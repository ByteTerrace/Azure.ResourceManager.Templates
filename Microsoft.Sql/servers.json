{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "examples": [
            {
                "description": "Deploys a logical SQL Server with the recommended set of properties for a development environment.",
                "name": "Development",
                "value": {
                    "audit": {
                        "isEnabled": false
                    },
                    "name": "MySqlServer",
                    "vulnerabilityAssessment": {
                        "isEnabled": false
                    }
                }
            },
            {
                "description": "Deploys a logical SQL Server with the recommended set of properties for a production environment.",
                "name": "Production",
                "value": {
                    "activeDirectoryAdministratorObjectId": "MyActiveDirectoryAdministratorUserId",
                    "activeDirectoryAdministratorUserName": "MyActiveDirectoryAdministratorUserName",
                    "audit": {
                        "logAnalyticsWorkspace": {
                            "name": "MyLogAnalyticsWorkspace"
                        }
                    },
                    "name": "MySqlServer",
                    "vulnerabilityAssessment": {
                        "storageAccountName": "MyStorageAccount"
                    }
                }
            }
        ]
    },
    "parameters": {
        "activeDirectoryAdministratorObjectId": {
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the Active Directory administrator object ID that will be assigned to the Azure SQL Server."
            },
            "type": "string"
        },
        "activeDirectoryAdministratorTenantId": {
            "defaultValue": "[subscription().tenantId]",
            "metadata": {
                "description": "Specifies the Active Directory administrator tenant ID that will be assigned to the Azure SQL Server."
            },
            "type": "string"
        },
        "activeDirectoryAdministratorUserName": {
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the Active Directory administrator user name that will be assigned to the Azure SQL Server."
            },
            "type": "string"
        },
        "audit": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the audit settings that will be applied to the Azure SQL Server."
            },
            "type": "object"
        },
        "connectionPolicy": {
            "allowedValues": [
                "Default",
                "Proxy",
                "Redirect"
            ],
            "defaultValue": "Default",
            "metadata": {
                "description": "Specifies how clients will connect to the Azure SQL Server."
            },
            "type": "string"
        },
        "customerManagedEncryption": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the customer-managed encryption settings that will be applied to the Azure SQL Server."
            },
            "type": "object"
        },
        "dnsAliases": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of dns aliases that will be assigned to the Azure SQL Server."
            },
            "type": "array"
        },
        "elasticPools": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of elastic pools that will be created within the Azure SQL Server."
            },
            "type": "array"
        },
        "firewallRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of firewall rules that will be assigned to the Azure SQL Server."
            },
            "type": "array"
        },
        "identity": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the properties of the identity that will be assigned to the Azure SQL Server."
            },
            "type": "object"
        },
        "isAllowTrustedMicrosoftServicesEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether trusted Azure services and resources are allowed to access the Azure SQL Server."
            },
            "type": "bool"
        },
        "isPublicNetworkAccessEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the Azure SQL Server is accessible from the internet."
            },
            "type": "bool"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure SQL Server resource(s) will be deployed."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 63,
            "metadata": {
                "description": "Specifies the name of the Azure SQL Server."
            },
            "type": "string",
            "minLength": 1
        },
        "privateEndpoints": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of private endpoints that will be linked with the Azure SQL Server."
            },
            "type": "array"
        },
        "serverVersion": {
            "allowedValues": [
                "12.0"
            ],
            "defaultValue": "12.0",
            "metadata": {
                "description": "Specifies the version of the Azure SQL Server."
            },
            "type": "string"
        },
        "sqlAdministratorUserName": {
            "defaultValue": "[uniqueString(toLower(parameters('name')))]",
            "metadata": {
                "description": "Specifies the default SQL administrator user name that will be assigned to the Azure SQL Server."
            },
            "type": "securestring"
        },
        "sqlAdministratorUserPassword": {
            "defaultValue": "[base64(replace(format('{0}{1}', newGuid(), newGuid()), '-', ''))]",
            "metadata": {
                "description": "Specifies the default SQL administrator user password that will be assigned to the Azure SQL Server."
            },
            "type": "securestring"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure SQL Server."
            },
            "type": "object"
        },
        "virtualNetworkRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of virtual network rules that will be assigned to the Azure SQL Server."
            },
            "type": "array"
        },
        "vulnerabilityAssessment": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the vulnerability assessment settings that will be applied to the Azure SQL Server."
            },
            "type": "object"
        }
    },
    "variables": {
        "apiVersions": {
            "deployments": "2021-04-01",
            "diagnosticSettings": "2017-05-01-preview",
            "keyVaults": "2019-09-01",
            "keyVaultsKeys": "2019-09-01",
            "privateEndpoints": "2020-07-01",
            "privateEndpointsPrivateDnsZoneGroups": "2020-07-01",
            "roleAssignments": "2020-04-01-preview",
            "sqlServers": "2020-11-01-preview",
            "sqlServersAdministrators": "2020-11-01-preview",
            "sqlServersAuditingSettings": "2020-11-01-preview",
            "sqlServersAzureAdOnlyAuthentications": "2020-11-01-preview",
            "sqlServersConnectionPolicies": "2014-04-01",
            "sqlServersDevOpsAuditingSettings": "2020-11-01-preview",
            "sqlServersDnsAliases": "2020-11-01-preview",
            "sqlServersElasticPools": "2021-02-01-preview",
            "sqlServersEncryptionProtectors": "2020-11-01-preview",
            "sqlServersFirewallRules": "2020-11-01-preview",
            "sqlServersKeys": "2020-11-01-preview",
            "sqlServersSecurityAlertPolicies": "2020-11-01-preview",
            "sqlServersVirtualNetworkRules": "2020-11-01-preview",
            "sqlServersVulnerabilityAssessments": "2020-11-01-preview",
            "storageAccounts": "2021-02-01"
        },
        "audit": "[union(variables('defaultResourceProperties').audit, parameters('audit'))]",
        "customerManagedEncryption": "[union(variables('defaultResourceProperties').customerManagedEncryption, parameters('customerManagedEncryption'))]",
        "customerManagedEncryptionKeyVaultRbacDeploymentName": "[format('{0}-KvRbac', deployment().name)]",
        "defaultResourceProperties": {
            "audit": {
                "actionAndGroupNames": [
                    "BATCH_COMPLETED_GROUP",
                    "FAILED_DATABASE_AUTHENTICATION_GROUP",
                    "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"
                ],
                "isEnabled": true,
                "logAnalyticsWorkspace": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "logNames": [
                    "Blocks",
                    "Deadlocks",
                    "DevOpsOperationsAudit",
                    "Errors",
                    "SQLSecurityAuditEvents",
                    "Timeouts"
                ],
                "retentionPolicy": {
                    "days": 137,
                    "isEnabled": true
                }
            },
            "customerManagedEncryption": {
                "isEnabled": false,
                "keyName": "",
                "keyVault": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "keyVersion": ""
            },
            "elasticPool": {
                "isAzureHybridBenefitEnabled": false,
                "isZoneRedundant": true,
                "maximumSizeInBytes": 268435456000,
                "numberOfCapacityUnits": 50,
                "skuName": "StandardPool"
            },
            "identity": {
                "isEnabled": true,
                "type": "[if(greater(variables('userAssignedIdentitiesCount'), 0), 'UserAssigned', 'SystemAssigned')]",
                "userAssignedIdentities": []
            },
            "privateEndpoint": {
                "dnsZone": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "location": "[parameters('location')]",
                "subnet": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "virtualNetworkRule": {
                "ignoreMissingVnetServiceEndpoint": true,
                "subnet": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "vulnerabilityAssessment": {
                "isEnabled": true,
                "storageAccount": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            }
        },
        "dnsAliases": "[if(variables('dnsAliasesIsNotEmpty'), parameters('dnsAliases'), createArray('dummyDnsAlias'))]",
        "dnsAliasesIsNotEmpty": "[greater(length(parameters('dnsAliases')), 0)]",
        "firewallRules": "[if(variables('firewallRulesIsNotEmpty'), parameters('firewallRules'), createArray(createObject('endIpAddress', '0.0.0.0', 'name', 'dummyRule', 'startIpAddress', '0.0.0.0')))]",
        "firewallRulesIsNotEmpty": "[greater(length(parameters('firewallRules')), 0)]",
        "identity": "[union(variables('defaultResourceProperties').identity, parameters('identity'))]",
        "isActiveDirectoryAdministratorEnabled": "[or(not(empty(parameters('activeDirectoryAdministratorObjectId'))), not(empty(parameters('activeDirectoryAdministratorUserName'))))]",
        "isAuditEnabled": "[variables('audit').isEnabled]",
        "isAuditLogAnalyticsWorkspaceNameNotEmpty": "[not(empty(variables('audit').logAnalyticsWorkspace.name))]",
        "isCustomerManagedEncryptionEnabled": "[variables('customerManagedEncryption').isEnabled]",
        "isVulnerabilityAssessmentEnabled": "[variables('vulnerabilityAssessment').isEnabled]",
        "privateEndpoints": "[if(variables('privateEndpointsIsNotEmpty'), parameters('privateEndpoints'), createArray(createObject('dnsZones', createArray(), 'name', '<NULL>')))]",
        "privateEndpointsCount": "[length(parameters('privateEndpoints'))]",
        "privateEndpointsIsNotEmpty": "[greater(variables('privateEndpointsCount'), 0)]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceIds": {
            "auditLogAnalyticsWorkspace": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.OperationalInsights/workspaces', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>'))]",
            "keyVaultCryptoServiceEncryptionUserRoleDefinition": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
            "sqlServer": "[resourceId('Microsoft.Sql/servers', variables('serverName'))]",
            "sqlServerAdministrator": "[resourceId('Microsoft.Sql/servers/administrators', variables('serverName'), 'activeDirectory')]",
            "sqlServerAuditingSettings": "[resourceId('Microsoft.Sql/servers/auditingSettings', variables('serverName'), 'default')]",
            "sqlServerCustomerManagedEncryptionKey": "[resourceId('Microsoft.Sql/servers/keys', variables('serverName'), variables('serverKeyName'))]",
            "sqlServerCustomerManagedEncryptionKeyVault": "[resourceId(variables('customerManagedEncryption').keyVault.subscriptionId, variables('customerManagedEncryption').keyVault.resourceGroupName, 'Microsoft.KeyVault/vaults', if(variables('isCustomerManagedEncryptionEnabled'), variables('customerManagedEncryption').keyVault.name, '<NULL>'))]",
            "sqlServerCustomerManagedEncryptionKeyVaultRbacDeployment": "[resourceId('Microsoft.Resources/deployments', variables('customerManagedEncryptionKeyVaultRbacDeploymentName'))]",
            "sqlServerSecurityAlertPolicies": "[resourceId('Microsoft.Sql/servers/securityAlertPolicies', variables('serverName'), 'default')]",
            "sqlServerVulnerabilityAssessmentStorageAccount": "[resourceId(variables('vulnerabilityAssessment').storageAccount.subscriptionId, variables('vulnerabilityAssessment').storageAccount.resourceGroupName, 'Microsoft.Storage/storageAccounts', if(variables('isVulnerabilityAssessmentEnabled'), variables('vulnerabilityAssessment').storageAccount.name, '<NULL>'))]",
            "sqlServerVulnerabilityAssessmentStorageAccountRbacDeployment": "[resourceId('Microsoft.Resources/deployments', variables('vulnerabilityAssessmentStorageAccountRbacDeploymentName'))]",
            "storageAccountBlobContributorRoleDefinition": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]"
        },
        "serverKeyName": "[if(variables('isCustomerManagedEncryptionEnabled'), format('{0}_{1}_{2}', variables('customerManagedEncryption').keyVault.name, variables('customerManagedEncryption').keyName, variables('customerManagedEncryption').keyVersion), 'ServiceManaged')]",
        "serverKeyType": "[if(variables('isCustomerManagedEncryptionEnabled'), 'AzureKeyVault', 'ServiceManaged')]",
        "serverName": "[toLower(parameters('name'))]",
        "subscriptionId": "[subscription().subscriptionId]",
        "virtualNetworkRules": "[if(variables('virtualNetworkRulesIsNotEmpty'), parameters('virtualNetworkRules'), createArray(createObject('name', 'dummyRule')))]",
        "virtualNetworkRulesIsNotEmpty": "[greater(length(parameters('virtualNetworkRules')), 0)]",
        "vulnerabilityAssessment": "[union(variables('defaultResourceProperties').vulnerabilityAssessment, parameters('vulnerabilityAssessment'))]",
        "vulnerabilityAssessmentStorageAccountRbacDeploymentName": "[format('{0}-SaRbac', deployment().name)]",
        "userAssignedIdentitiesCount": "[length(union(createObject('userAssignedIdentities', createArray()), parameters('identity')).userAssignedIdentities)]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').sqlServers]",
            "identity": "[if(variables('identity').isEnabled, union(createObject('type', union(variables('defaultResourceProperties').identity, parameters('identity')).type), if(contains(variables('identity').type, 'UserAssigned'), createObject('userAssignedIdentities', createObject(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', first(variables('identity').userAssignedIdentities).name), createObject())), createObject())), null())]",
            "location": "[parameters('location')]",
            "name": "[variables('serverName')]",
            "properties": {
                "administratorLogin": "[parameters('sqlAdministratorUserName')]",
                "administratorLoginPassword": "[parameters('sqlAdministratorUserPassword')]",
                "minimalTlsVersion": "1.2",
                "publicNetworkAccess": "[if(parameters('isPublicNetworkAccessEnabled'), 'Enabled', 'Disabled')]",
                "version": "[parameters('serverVersion')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Sql/servers"
        },
        {
            "apiVersion": "[variables('apiVersions').deployments]",
            "condition": "[variables('isCustomerManagedEncryptionEnabled')]",
            "dependsOn": [
                "[variables('resourceIds').sqlServer]"
            ],
            "name": "[variables('customerManagedEncryptionKeyVaultRbacDeploymentName')]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                    "keyVaultCryptoServiceEncryptionUserRoleDefinitionId": {
                        "value": "[variables('resourceIds').keyVaultCryptoServiceEncryptionUserRoleDefinition]"
                    },
                    "keyVaultId": {
                        "value": "[variables('resourceIds').sqlServerCustomerManagedEncryptionKeyVault]"
                    },
                    "keyVaultName": {
                        "value": "[variables('customerManagedEncryption').keyVault.name]"
                    },
                    "roleAssignmentsApiVersion": {
                        "value": "[variables('apiVersions').roleAssignments]"
                    },
                    "sqlServerApiVersion": {
                        "value": "[variables('apiVersions').sqlServers]"
                    },
                    "sqlServerId": {
                        "value": "[variables('resourceIds').sqlServer]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "keyVaultCryptoServiceEncryptionUserRoleDefinitionId": {
                            "type": "string"
                        },
                        "keyVaultId": {
                            "type": "string"
                        },
                        "keyVaultName": {
                            "type": "string"
                        },
                        "roleAssignmentsApiVersion":{
                            "type": "string"
                        },
                        "sqlServerApiVersion": {
                            "type": "string"
                        },
                        "sqlServerId": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "apiVersion": "[parameters('roleAssignmentsApiVersion')]",
                            "name": "[guid(parameters('sqlServerId'), parameters('keyVaultCryptoServiceEncryptionUserRoleDefinitionId'), parameters('keyVaultId'))]",
                            "properties": {
                                "principalId": "[reference(parameters('sqlServerId'), parameters('sqlServerApiVersion'), 'Full').identity.principalId]",
                                "roleDefinitionId": "[parameters('keyVaultCryptoServiceEncryptionUserRoleDefinitionId')]"
                            },
                            "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                            "type": "Microsoft.Authorization/roleAssignments"
                        }
                    ]
                }
            },
            "resourceGroup": "[variables('customerManagedEncryption').keyVault.resourceGroupName]",
            "subscriptionId": "[variables('customerManagedEncryption').keyVault.subscriptionId]",
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployments]",
            "condition": "[variables('isVulnerabilityAssessmentEnabled')]",
            "dependsOn": [
                "[variables('resourceIds').sqlServer]"
            ],
            "name": "[variables('vulnerabilityAssessmentStorageAccountRbacDeploymentName')]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                    "roleAssignmentsApiVersion": {
                        "value": "[variables('apiVersions').roleAssignments]"
                    },
                    "sqlServerApiVersion": {
                        "value": "[variables('apiVersions').sqlServers]"
                    },
                    "sqlServerId": {
                        "value": "[variables('resourceIds').sqlServer]"
                    },
                    "storageAccountBlobContributorRoleDefinitionId": {
                        "value": "[variables('resourceIds').storageAccountBlobContributorRoleDefinition]"
                    },
                    "storageAccountId": {
                        "value": "[variables('resourceIds').sqlServerVulnerabilityAssessmentStorageAccount]"
                    },
                    "storageAccountName": {
                        "value": "[variables('vulnerabilityAssessment').storageAccount.name]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "roleAssignmentsApiVersion":{
                            "type": "string"
                        },
                        "sqlServerApiVersion": {
                            "type": "string"
                        },
                        "sqlServerId": {
                            "type": "string"
                        },
                        "storageAccountBlobContributorRoleDefinitionId": {
                            "type": "string"
                        },
                        "storageAccountId": {
                            "type": "string"
                        },
                        "storageAccountName": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "apiVersion": "[parameters('roleAssignmentsApiVersion')]",
                            "name": "[guid(parameters('sqlServerId'), parameters('storageAccountBlobContributorRoleDefinitionId'), parameters('storageAccountId'))]",
                            "properties": {
                                "principalId": "[reference(parameters('sqlServerId'), parameters('sqlServerApiVersion'), 'Full').identity.principalId]",
                                "roleDefinitionId": "[parameters('storageAccountBlobContributorRoleDefinitionId')]"
                            },
                            "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                            "type": "Microsoft.Authorization/roleAssignments"
                        }
                    ]
                }
            },
            "resourceGroup": "[variables('vulnerabilityAssessment').storageAccount.resourceGroupName]",
            "subscriptionId": "[variables('vulnerabilityAssessment').storageAccount.subscriptionId]",
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').sqlServersAdministrators]",
            "condition": "[variables('isActiveDirectoryAdministratorEnabled')]",
            "dependsOn": [
                "[variables('resourceIds').sqlServer]"
            ],
            "name": "[format('{0}/activeDirectory', variables('serverName'))]",
            "properties": {
                "administratorType": "ActiveDirectory",
                "login": "[parameters('activeDirectoryAdministratorUserName')]",
                "sid": "[parameters('activeDirectoryAdministratorObjectId')]",
                "tenantId": "[if(empty(parameters('activeDirectoryAdministratorTenantId')), subscription().tenantId, parameters('activeDirectoryAdministratorTenantId'))]"
            },
            "type": "Microsoft.Sql/servers/administrators"
        },
        {
            "apiVersion": "[variables('apiVersions').sqlServersAzureAdOnlyAuthentications]",
            "condition": false,
            "dependsOn": [
                "[variables('resourceIds').sqlServer]",
                "[variables('resourceIds').sqlServerAdministrator]"
            ],
            "name": "[format('{0}/default', variables('serverName'))]",
            "properties": {
                "azureADOnlyAuthentication": true
            },
            "type": "Microsoft.Sql/servers/azureADOnlyAuthentications"
        },
        {
            "apiVersion": "[variables('apiVersions').sqlServersConnectionPolicies]",
            "dependsOn": [
                "[variables('resourceIds').sqlServer]",
                "[variables('resourceIds').sqlServerAdministrator]"
            ],
            "name": "[format('{0}/default', variables('serverName'))]",
            "properties": {
                "connectionType": "[parameters('connectionPolicy')]"
            },
            "type": "Microsoft.Sql/servers/connectionPolicies"
        },
        {
            "apiVersion": "[variables('apiVersions').sqlServersDnsAliases]",
            "condition": "[variables('dnsAliasesIsNotEmpty')]",
            "copy": {
                "count": "[length(variables('dnsAliases'))]",
                "mode": "Parallel",
                "name": "dnsAliasCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').sqlServer]",
                "[variables('resourceIds').sqlServerAdministrator]"
            ],
            "name": "[format('{0}/{1}', variables('serverName'), toLower(variables('dnsAliases')[copyIndex()]))]",
            "type": "Microsoft.Sql/servers/dnsAliases"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpoints]",
            "condition": "[variables('privateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('privateEndpointsCount')]",
                "mode": "Parallel",
                "name": "privateEndpointsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').sqlServer]",
                "[variables('resourceIds').sqlServerAdministrator]"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, variables('privateEndpoints')[copyIndex()]).location]",
            "name": "[variables('privateEndpoints')[copyIndex()].name]",
            "properties": {
                "customDnsConfigs": [],
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('privateEndpoints')[copyIndex()].name]",
                        "properties": {
                            "groupIds": [
                                "sqlServer"
                            ],
                            "privateLinkServiceId": "[variables('resourceIds').sqlServer]"
                        }
                    }
                ],
                "subnet": {
                    "id": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint, variables('privateEndpoints')[copyIndex()]).subnet.subscriptionId, union(variables('defaultResourceProperties').privateEndpoint, variables('privateEndpoints')[copyIndex()]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', variables('privateEndpoints')[copyIndex()].subnet.virtualNetworkName, variables('privateEndpoints')[copyIndex()].subnet.name)]"
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/privateEndpoints"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpointsPrivateDnsZoneGroups]",
            "condition": "[variables('privateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('privateEndpointsCount')]",
                "mode": "Parallel",
                "name": "privateDnsZoneGroupsCopy"
            },
            "dependsOn": [
                "privateEndpointsCopy"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, variables('privateEndpoints')[copyIndex()]).location]",
            "name": "[format('{0}/default', variables('privateEndpoints')[copyIndex()].name)]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(variables('privateEndpoints')[copyIndex()].dnsZones)]",
                        "input": {
                            "name": "[replace(variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name, '.', '-')]",
                            "properties": {
                                "privateDnsZoneId": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).subscriptionId, union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).resourceGroupName, 'Microsoft.Network/privateDnsZones', variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name)]"
                            }
                        },
                        "name": "privateDnsZoneConfigs"
                    }
                ]
            },
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
        },
        {
            "apiVersion": "[variables('apiVersions').sqlServersFirewallRules]",
            "condition": "[and(parameters('isPublicNetworkAccessEnabled'), parameters('isAllowTrustedMicrosoftServicesEnabled'))]",
            "dependsOn": [
                "privateDnsZoneGroupsCopy",
                "[variables('resourceIds').sqlServer]",
                "[variables('resourceIds').sqlServerAdministrator]"
            ],
            "name": "[format('{0}/AllowAllWindowsAzureIps', variables('serverName'))]",
            "properties": {
                "endIpAddress": "0.0.0.0",
                "startIpAddress": "0.0.0.0"
            },
            "type": "Microsoft.Sql/servers/firewallRules"
        },
        {
            "apiVersion": "[variables('apiVersions').sqlServersFirewallRules]",
            "condition": "[and(parameters('isPublicNetworkAccessEnabled'), variables('firewallRulesIsNotEmpty'))]",
            "copy": {
                "count": "[length(variables('firewallRules'))]",
                "mode": "Parallel",
                "name": "firewallRulesCopy"
            },
            "dependsOn": [
                "privateDnsZoneGroupsCopy",
                "[variables('resourceIds').sqlServer]",
                "[variables('resourceIds').sqlServerAdministrator]"
            ],
            "name": "[format('{0}/{1}', variables('serverName'), variables('firewallRules')[copyIndex()].name)]",
            "properties": {
                "endIpAddress": "[variables('firewallRules')[copyIndex()].endIpAddress]",
                "startIpAddress": "[variables('firewallRules')[copyIndex()].startIpAddress]"
            },
            "type": "Microsoft.Sql/servers/firewallRules"
        },
        {
            "apiVersion": "[variables('apiVersions').sqlServersVirtualNetworkRules]",
            "condition": "[and(parameters('isPublicNetworkAccessEnabled'), variables('virtualNetworkRulesIsNotEmpty'))]",
            "copy": {
                "count": "[length(variables('virtualNetworkRules'))]",
                "mode": "Parallel",
                "name": "virtualNetworkRulesCopy"
            },
            "dependsOn": [
                "firewallRulesCopy",
                "privateDnsZoneGroupsCopy",
                "[variables('resourceIds').sqlServer]",
                "[variables('resourceIds').sqlServerAdministrator]"
            ],
            "name": "[format('{0}/{1}', variables('serverName'), variables('virtualNetworkRules')[copyIndex()].name)]",
            "properties": {
                "ignoreMissingVnetServiceEndpoint": "[union(variables('defaultResourceProperties').virtualNetworkRule, variables('virtualNetworkRules')[copyIndex()]).ignoreMissingVnetServiceEndpoint]",
                "virtualNetworkSubnetId": "[resourceId(union(variables('defaultResourceProperties').virtualNetworkRule, variables('virtualNetworkRules')[copyIndex()]).subnet.subscriptionId, union(variables('defaultResourceProperties').virtualNetworkRule, variables('virtualNetworkRules')[copyIndex()]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkRules')[copyIndex()].subnet.virtualNetworkName, variables('virtualNetworkRules')[copyIndex()].subnet.name)]"
            },
            "type": "Microsoft.Sql/servers/virtualNetworkRules"
        },
        {
            "apiVersion": "[variables('apiVersions').sqlServersKeys]",
            "condition": "[variables('isCustomerManagedEncryptionEnabled')]",
            "dependsOn": [
                "firewallRulesCopy",
                "privateDnsZoneGroupsCopy",
                "virtualNetworkRulesCopy",
                "[variables('resourceIds').sqlServer]",
                "[variables('resourceIds').sqlServerAdministrator]",
                "[variables('resourceIds').sqlServerCustomerManagedEncryptionKeyVaultRbacDeployment]"
            ],
            "kind": "[variables('serverKeyType')]",
            "name": "[format('{0}/{1}', variables('serverName'), variables('serverKeyName'))]",
            "properties": {
                "serverKeyType": "[variables('serverKeyType')]",
                "uri": "[if(variables('isCustomerManagedEncryptionEnabled'), reference(format('{0}/keys/{1}{2}', variables('resourceIds').sqlServerCustomerManagedEncryptionKeyVault, variables('customerManagedEncryption').keyName, if(empty(variables('customerManagedEncryption').keyVersion), '', format('/versions/{0}', variables('customerManagedEncryption').keyVersion))), variables('apiVersions').keyVaultsKeys).keyUriWithVersion, null())]"
            },
            "type": "Microsoft.Sql/servers/keys"
        },
        {
            "apiVersion": "[variables('apiVersions').sqlServersEncryptionProtectors]",
            "dependsOn": [
                "[variables('resourceIds').sqlServerCustomerManagedEncryptionKey]"
            ],
            "kind": "[variables('serverKeyType')]",
            "name": "[format('{0}/current', variables('serverName'))]",
            "properties": {
                "autoRotationEnabled": "[variables('isCustomerManagedEncryptionEnabled')]",
                "serverKeyName": "[variables('serverKeyName')]",
                "serverKeyType": "[variables('serverKeyType')]"
            },
            "type": "Microsoft.Sql/servers/encryptionProtector"
        },
        {
            "apiVersion": "[variables('apiVersions').sqlServersAuditingSettings]",
            "dependsOn": [
                "firewallRulesCopy",
                "privateDnsZoneGroupsCopy",
                "virtualNetworkRulesCopy",
                "[variables('resourceIds').sqlServer]",
                "[variables('resourceIds').sqlServerAdministrator]"
            ],
            "name": "[format('{0}/default', variables('serverName'))]",
            "properties": {
                "auditActionsAndGroups": "[variables('audit').actionAndGroupNames]",
                "isAzureMonitorTargetEnabled": true,
                "retentionDays": "[variables('audit').retentionPolicy.days]",
                "state": "[if(variables('isAuditEnabled'), 'Enabled', 'Disabled')]"
            },
            "type": "Microsoft.Sql/servers/auditingSettings"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "condition": "[or(variables('isAuditEnabled'), variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'))]",
            "dependsOn": [
                "[variables('resourceIds').sqlServerAuditingSettings]"
            ],
            "name": "[format('{0}/master/Microsoft.Insights/audit', variables('serverName'))]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(variables('audit').logNames)]",
                        "input": {
                            "category": "[variables('audit').logNames[copyIndex('logs')]]",
                            "enabled": "[variables('isAuditEnabled')]",
                            "retentionPolicy": {
                                "days": "[variables('audit').retentionPolicy.days]",
                                "enabled": "[variables('audit').retentionPolicy.isEnabled]"
                            }
                        },
                        "name": "logs"
                    }
                ],
                "workspaceId": "[variables('resourceIds').auditLogAnalyticsWorkspace]"
            },
            "type": "Microsoft.Sql/servers/databases/providers/diagnosticSettings"
        },
        {
            "apiVersion": "[variables('apiVersions').sqlServersDevOpsAuditingSettings]",
            "dependsOn": [
                "[variables('resourceIds').sqlServerAuditingSettings]"
            ],
            "name": "[format('{0}/default', parameters('name'))]",
            "properties": {
                "isAzureMonitorTargetEnabled": true,
                "state": "[if(variables('isAuditEnabled'), 'Enabled', 'Disabled')]"
            },
            "type": "Microsoft.Sql/servers/devOpsAuditingSettings"
        },
        {
            "apiVersion": "[variables('apiVersions').sqlServersSecurityAlertPolicies]",
            "dependsOn": [
                "[variables('resourceIds').sqlServerAuditingSettings]"
            ],
            "name": "[format('{0}/default', parameters('name'))]",
            "properties": {
                "disabledAlerts": [],
                "emailAccountAdmins": true,
                "emailAddresses": [],
                "retentionDays": "[variables('audit').retentionPolicy.days]",
                "state": "[if(variables('isVulnerabilityAssessmentEnabled'), 'Enabled', 'Disabled')]"
            },
            "type": "Microsoft.Sql/servers/securityAlertPolicies"
        },
        {
            "apiVersion": "[variables('apiVersions').sqlServersVulnerabilityAssessments]",
            "condition": "[variables('isVulnerabilityAssessmentEnabled')]",
            "dependsOn": [
                "[variables('resourceIds').sqlServerSecurityAlertPolicies]",
                "[variables('resourceIds').sqlServerVulnerabilityAssessmentStorageAccountRbacDeployment]"
            ],
            "name": "[format('{0}/default', parameters('name'))]",
            "properties": {
                "recurringScans": {
                    "emails": [],
                    "emailSubscriptionAdmins": true,
                    "isEnabled": true
                },
                "storageContainerPath": "[if(variables('isVulnerabilityAssessmentEnabled'), format('{0}vulnerability-assessment', reference(variables('resourceIds').sqlServerVulnerabilityAssessmentStorageAccount, variables('apiVersions').storageAccounts).primaryEndpoints.blob), null())]"
            },
            "type": "Microsoft.Sql/servers/vulnerabilityAssessments"
        },
        {
            "apiVersion": "[variables('apiVersions').sqlServersElasticPools]",
            "copy": {
                "count": "[length(parameters('elasticPools'))]",
                "mode": "Parallel",
                "name": "elasticPoolsCopy"
            },
            "dependsOn": [
                "firewallRulesCopy",
                "privateDnsZoneGroupsCopy",
                "virtualNetworkRulesCopy",
                "[variables('resourceIds').sqlServer]",
                "[variables('resourceIds').sqlServerAdministrator]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/{1}', parameters('name'), parameters('elasticPools')[copyIndex()].name)]",
            "properties": {
                "licenseType": "[if(union(variables('defaultResourceProperties').elasticPool, parameters('elasticPools')[copyIndex()]).isAzureHybridBenefitEnabled, 'BasePrice', 'LicenseIncluded')]",
                "maintenanceConfigurationId": "/subscriptions/28932662-8488-49f8-9638-94a96eaceacb/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default",
                "maxSizeBytes": "[union(variables('defaultResourceProperties').elasticPool, parameters('elasticPools')[copyIndex()]).maximumSizeInBytes]",
                "perDatabaseSettings": {
                    "maxCapacity": "[union(variables('defaultResourceProperties').elasticPool, parameters('elasticPools')[copyIndex()]).numberOfCapacityUnits]",
                    "minCapacity": 0
                },
                "zoneRedundant": "[union(variables('defaultResourceProperties').elasticPool, parameters('elasticPools')[copyIndex()]).isZoneRedundant]"
            },
            "sku": {
                "capacity": "[union(variables('defaultResourceProperties').elasticPool, parameters('elasticPools')[copyIndex()]).numberOfCapacityUnits]",
                "name": "[union(variables('defaultResourceProperties').elasticPool, parameters('elasticPools')[copyIndex()]).skuName]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Sql/servers/elasticpools"
        }
    ]
}
