{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "diagnosticServicesTrustedStorageAccessObjectId": {
            "type": "string"
        },
        "resourceDefinitions": {
            "defaultValue": {},
            "type": "secureObject"
        },
        "tags": {
            "defaultValue": {},
            "type": "object"
        }
    },
    "variables": {
        "apiVersions": {
            "deployment": "2021-04-01",
            "roleAssignments": "2020-04-01-preview",
            "workspacesLinkedStorageAccounts": "2020-08-01"
        },
        "audit": {
            "isEnabled": true,
            "logAnalyticsWorkspace": {
                "name": "",
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "retentionPolicy": {
                "days": 137,
                "isEnabled": true
            }
        },
        "contentVersion": "[deployment().properties.template.contentVersion]",
        "defaultResourceDefinitions": {
            "applicationConfigurationStores": [],
            "applicationSecurityGroups": [],
            "applicationServiceEnvironments": [],
            "applicationServicePlans": [],
            "automationAccounts": [],
            "availabilitySets": [],
            "bastionHosts": [],
            "cdnProfiles": [],
            "communicationServices": [],
            "containerInstances": [],
            "containerRegistries": [],
            "cosmosDbAccounts": [],
            "deployments": [],
            "diskEncryptionSets": [],
            "dnsZones": {
                "private": [],
                "public": []
            },
            "eventGrid": {
                "domains": [],
                "eventSubscriptions": [],
                "topics": []
            },
            "eventHub": {
                "clusters": [],
                "hubs": [],
                "namespaces": []
            },
            "firewalls": [],
            "hdInsightClusters": [],
            "hostGroups": [],
            "keyVaults": [],
            "kubernetesServiceClusters": [],
            "loadBalancers": [],
            "logic": {
                "applications": []
            },
            "managedHsms": [],
            "managedIdentities": [],
            "monitor": {
                "applicationInsightsComponents": [],
                "logAnalyticsWorkspaces": [],
                "privateLinkScopes": []
            },
            "natGateways": [],
            "networkSecurityGroups": [],
            "proximityPlacementGroups": [],
            "publicIpAddresses": [],
            "publicIpPrefixes": [],
            "recoveryServicesVaults": [],
            "redisCaches": [],
            "roleAssignments": [],
            "routeTables": [],
            "scripts": {
                "postDeploy": [],
                "preDeploy": []
            },
            "serviceBus": {
                "namespaces": []
            },
            "sharedImageGalleries": [],
            "sqlDatabases": [],
            "sqlServers": [],
            "staticWebApplications": [],
            "storageAccounts": [],
            "subnets": [],
            "virtualMachines": [],
            "virtualMachineScaleSets": [],
            "virtualNetworks": [],
            "webApplications": []
        },
        "defaultResourceProperties": {
            "applicationConfigurationStore": {
                "customerManagedEncryption": {},
                "isPublicNetworkAccessEnabled": false,
                "privateEndpoints": [],
                "settings": {},
                "skuName": "Standard"
            },
            "applicationServiceEnvironment": {
                "audit": "[variables('audit')]",
                "isDedicatedHostGroup": false,
                "isInternalEncryptionEnabled": false,
                "isMinimalSslCipherSuiteConfigurationEnabled": true,
                "isZoneRedundant": true,
                "kind": "ASEV3",
                "privateDnsZone": {},
                "virtualIpType": "Internal"
            },
            "applicationServicePlan": {
                "audit": "[variables('audit')]",
                "autoscale": {},
                "isPerSiteScalingEnabled": false,
                "maximumElasticWorkerCount": 20,
                "operatingSystemName": "Linux",
                "serviceEnvironment": {},
                "skuName": "P1v2"
            },
            "automationAccount": {
                "desiredStateConfiguration": {},
                "identity": {},
                "isPublicNetworkAccessEnabled": false,
                "webWorker": {}
            },
            "availabilitySet": {
                "proximityPlacementGroup": {},
                "skuName": "Aligned"
            },
            "bastionHost": {
                "audit": "[variables('audit')]"
            },
            "cdnProfile": {
                "audit": "[variables('audit')]",
                "skuName": "Standard_Microsoft"
            },
            "communicationService": {
                "audit": "[variables('audit')]",
                "dataLocation": "United States"
            },
            "containerInstance": {
                "audit": "[variables('audit')]",
                "customerManagedEncryption": {},
                "identity": {},
                "imageRegistryCredentials": {},
                "operatingSystemName": "Linux",
                "ports": [
                    {
                        "port": 80,
                        "protocol": "tcp"
                    }
                ],
                "restartPolicy": "Always",
                "skuName": "Standard",
                "subnet": {},
                "volumes": []
            },
            "containerRegistry": {
                "customerManagedEncryption": {},
                "firewallRules": [],
                "identity": {},
                "isAdministratorAccountEnabled": false,
                "isAnonymousPullEnabled": false,
                "isDedicatedDataEndpointEnabled": false,
                "isAllowTrustedMicrosoftServicesEnabled": false,
                "isPublicNetworkAccessEnabled": false,
                "isZoneRedundant": true,
                "privateEndpoints": [],
                "skuName": "Standard",
                "virtualNetworkRules": []
            },
            "cosmosDbAccount": {
                "consistencyPolicy": {},
                "firewallRules": [],
                "geoReplicationLocations": [],
                "isAzurePortalAccessEnabled": true,
                "isAzurePublicDatacenterAccessEnabled": false,
                "isFreeTierEnabled": false,
                "kind": "GlobalDocumentDB",
                "virtualNetworkRules": []
            },
            "deployment": {
                "contentVersion": "[variables('contentVersion')]",
                "parameters": {
                    "diagnosticServicesTrustedStorageAccessObjectId": {
                        "value": "[parameters('diagnosticServicesTrustedStorageAccessObjectId')]"
                    },
                    "resourceDefinitions": {
                        "value": {}
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]",
                "templateSpec": {
                    "name": "ResourceGroupDeployment",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]",
                    "version": "[variables('contentVersion')]"
                }
            },
            "diskEncryptionSet": {
                "isDoubleEncryptionAtRestEnabled": true,
                "keyVaultResourceGroupName": "[variables('resourceGroupName')]",
                "keyVaultSubscriptionId": "[variables('subscriptionId')]",
                "keyVersion": ""
            },
            "dnsZone": {
                "private": {
                    "aRecords": [],
                    "cnameRecords": [],
                    "mxRecords": [],
                    "txtRecords": [],
                    "virtualNetworkLinks": []
                },
                "public": {
                    "aRecords": [],
                    "cnameRecords": [],
                    "mxRecords": [],
                    "nsRecords": [],
                    "txtRecords": []
                }
            },
            "eventGrid": {
                "domain": {
                    "audit": "[variables('audit')]"
                },
                "eventSubscription": {
                    "eventDeliverySchema": "EventGridSchema"
                },
                "topic": {
                    "audit": "[variables('audit')]"
                }
            },
            "eventHub": {
                "cluster": {
                    "numberOfCapacityUnits": 1
                },
                "hub": {
                    "consumerGroups": [],
                    "messageRetentionInDays": 1,
                    "numberOfPartitions": 3
                },
                "namespace": {
                    "audit": "[variables('audit')]",
                    "cluster": {},
                    "firewallRules": [],
                    "identity": {},
                    "isAllowTrustedMicrosoftServicesEnabled": false,
                    "isKafkaSupportEnabled": false,
                    "isPublicNetworkAccessEnabled": false,
                    "isZoneRedundant": true,
                    "privateEndpoints": [],
                    "skuName": "Standard",
                    "virtualNetworkRules": []
                }
            },
            "firewall": {
                "availabilityZones": [
                    1,
                    2,
                    3
                ],
                "ipConfigurations": [],
                "managementIpConfiguration": {},
                "skuName": "AZFW_VNet",
                "skuTier": "Standard"
            },
            "frontDoor": {
                "audit": "[variables('audit')]",
                "backendPools": [],
                "frontendEndpoints": [],
                "healthProbeSettings": [],
                "loadBalancingSettings": [],
                "routingRules": []
            },
            "hdInsightCluster": {
                "operatingSystem": "Linux",
                "storageProfile": {},
                "version": "4.0"
            },
            "hostGroup": {
                "availabilityZones": [],
                "hosts": [],
                "isAutomaticPlacementEnabled": false,
                "numberOfFaultDomains": 3
            },
            "keyVault": {
                "audit": "[variables('audit')]",
                "firewallRules": [],
                "isAllowTrustedMicrosoftServicesEnabled": false,
                "isDiskEncryptionEnabled": false,
                "isPublicNetworkAccessEnabled": false,
                "isPurgeProtectionEnabled": true,
                "isRbacAuthorizationEnabled": true,
                "isTemplateDeploymentEnabled": false,
                "isVirtualMachineDeploymentEnabled": false,
                "keys": {},
                "privateEndpoints": [],
                "secrets": {},
                "skuName": "Premium",
                "softDeleteRetentionInDays": 13,
                "tenantId": "[subscription().tenantId]",
                "virtualNetworkRules": []
            },
            "kubernetesServiceCluster": {
                "agentPoolProfiles": [],
                "audit": "[variables('audit')]",
                "customerManagedEncryption": {},
                "dnsPrefix": "",
                "identity": {},
                "kubernetesVersion": "1.20.7",
                "linuxProfile": {},
                "networking": {},
                "nodeResourceGroupName": "",
                "windowsProfile": {}
            },
            "loadBalancer": {
                "backendAddressPools": [],
                "frontendIpConfigurations": [],
                "healthProbes": [],
                "inboundNatPools": [],
                "inboundNatRules": [],
                "loadBalancingRules": [],
                "outboundRules": [],
                "skuName": "Standard",
                "skuTier": "Regional"
            },
            "location": "[resourceGroup().location]",
            "logic": {
                "application": {
                    "auditLogAnalyticsWorkspaceResourceGroupName": "[variables('resourceGroupName')]",
                    "auditLogAnalyticsWorkspaceSubscriptionId": "[variables('subscriptionId')]",
                    "isEnabled": true
                }
            },
            "managedHsm": {
                "audit": "[variables('audit')]",
                "firewallRules": [],
                "isAllowTrustedMicrosoftServicesEnabled": false,
                "isPublicNetworkAccessEnabled": false,
                "isPurgeProtectionEnabled": true,
                "privateEndpoints": [],
                "skuName": "Standard_B1",
                "softDeleteRetentionInDays": 13,
                "tenantId": "[subscription().tenantId]",
                "virtualNetworkRules": []
            },
            "managedIdentity": {},
            "monitor": {
                "applicationInsightsComponent": {
                    "logAnalyticsWorkspaceResourceGroupName": "[variables('resourceGroupName')]",
                    "logAnalyticsWorkspaceSubscriptionId": "[variables('subscriptionId')]",
                    "samplingPercentage": 100
                },
                "logAnalyticsWorkspace": {
                    "dataRetentionInDays": 30,
                    "isPublicNetworkAccessForIngestionEnabled": false,
                    "isPublicNetworkAccessForQueryEnabled": false,
                    "linkedStorageAccountResourceGroupName": "[variables('resourceGroupName')]",
                    "skuName": "pergb2018"
                },
                "privateLinkScope": {
                    "privateEndpoints": [],
                    "scopedResources": []
                }
            },
            "natGateway": {
                "availabilityZones": [],
                "idleTimeoutInMinutes": 4,
                "publicIpAddresses": [],
                "publicIpPrefixes": [],
                "skuName": "Standard"
            },
            "networkSecurityGroup": {
                "audit": "[variables('audit')]",
                "securityRules": []
            },
            "publicIpAddress": {
                "allocationMethod": "Static",
                "audit": "[variables('audit')]",
                "availabilityZones": [
                    "1",
                    "2",
                    "3"
                ],
                "dnsPrefix": "",
                "idleTimeoutInMinutes": 4,
                "ipPrefixName": "",
                "ipPrefixResourceGroupName": "[variables('resourceGroupName')]",
                "ipPrefixSubscriptionId": "[variables('subscriptionId')]",
                "skuName": "Standard",
                "skuTier": "Regional",
                "version": "IPv4"
            },
            "publicIpPrefix": {
                "ipVersion": "IPv4",
                "size": 28,
                "skuTier": "Regional"
            },
            "recoveryServicesVault": {
                "audit": "[variables('audit')]",
                "backup": {},
                "customerManagedEncryption": {}
            },
            "redisCache": {
                "audit": "[variables('audit')]",
                "availabilityZones": [
                    1,
                    2,
                    3
                ],
                "firewallRules": [],
                "identity": {},
                "isPublicNetworkAccessEnabled": false,
                "minimumSupportedTlsVersion": "1.2",
                "numberOfCapacityUnits": 1,
                "numberOfShards": 0,
                "privateEndpoints": [],
                "skuName": "Premium",
                "subnet": {},
                "version": "6"
            },
            "roleAssignment": {
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "routeTable": {
                "isBgpRoutePropagationEnabled": false,
                "routes": []
            },
            "script": {
                "kind": "AzurePowerShell"
            },
            "serviceBus": {
                "namespace": {
                    "audit": "[variables('audit')]",
                    "firewallRules": [],
                    "identity": {},
                    "isAllowTrustedMicrosoftServicesEnabled": false,
                    "isPublicNetworkAccessEnabled": false,
                    "isZoneRedundant": true,
                    "privateEndpoints": [],
                    "skuName": "Premium",
                    "virtualNetworkRules": []
                }
            },
            "sharedImageGallery": {
                "description": ""
            },
            "sqlDatabase": {
                "audit": "[variables('audit')]",
                "catalogCollation": "",
                "defaultCollation": "",
                "elasticPoolName": "",
                "isAzureHybridBenefitEnabled": false,
                "isZoneRedundant": true,
                "skuName": "Basic",
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "sqlServer": {
                "activeDirectoryAdministratorObjectId": "",
                "activeDirectoryAdministratorTenantId": "[subscription().tenantId]",
                "activeDirectoryAdministratorUserName": "",
                "audit": "[variables('audit')]",
                "connectionPolicy": "Default",
                "customerManagedEncryption": {},
                "dnsAliases": [],
                "elasticPools": [],
                "firewallRules": [],
                "identity": {},
                "isAllowTrustedMicrosoftServicesEnabled": false,
                "isPublicNetworkAccessEnabled": false,
                "privateEndpoints": [],
                "serverVersion": "12.0",
                "virtualNetworkRules": [],
                "vulnerabilityAssessment": {}
            },
            "staticWebApplication": {
                "privateEndpoints": [],
                "skuName": "Standard"
            },
            "storageAccount": {
                "accessTier": "Hot",
                "audit": "[variables('audit')]",
                "blobServices": {},
                "customerManagedEncryption": {},
                "dataLake": {},
                "encryptionScopes": [],
                "fileServices": {},
                "firewallRules": [],
                "identity": {},
                "isAdvancedThreatProtectionEnabled": true,
                "isAllowTrustedMicrosoftServicesEnabled": false,
                "isPublicNetworkAccessEnabled": false,
                "isSharedKeyAccessEnabled": false,
                "kind": "StorageV2",
                "queueServices": {},
                "skuName": "Standard_LRS",
                "tableServices": {},
                "virtualNetworkRules": []
            },
            "subnet": {
                "delegatedServiceNames": [],
                "isPrivateEndpointSupportEnabled": false,
                "isPrivateLinkServiceSupportEnabled": false,
                "natGateway": {},
                "networkSecurityGroup": {},
                "routeTable": {},
                "serviceEndpoints": [],
                "virtualNetwork": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "virtualMachine": {
                "audit": "[variables('audit')]",
                "availabilitySet": {},
                "backup": {},
                "dataDisks": [],
                "diskEncryptionSet": {},
                "extensions": {},
                "host": {},
                "identity": {},
                "imageReference": {},
                "isEncryptionAtHostEnabled": true,
                "isSecureBootEnabled": true,
                "isUltraSsdSupportEnabled": false,
                "isVirtualTrustedPlatformModuleEnabled": true,
                "isVulnerabilityAssessmentEnabled": true,
                "justInTimeAccess": {},
                "licenseType": "None",
                "linuxConfiguration": {},
                "osDisk": {},
                "priority": "Regular",
                "skuName": "Standard_D2s_v4",
                "windowsConfiguration": {}
            },
            "virtualMachineScaleSet": {
                "audit": "[variables('audit')]",
                "autoscale": {},
                "availabilityZones": [
                    1,
                    2,
                    3
                ],
                "computerNamePrefix": "",
                "diskEncryptionSet": {},
                "extensions": {},
                "host": {},
                "identity": {},
                "isOverprovisioningEnabled": true,
                "isUltraSsdSupportEnabled": false,
                "licenseType": "None",
                "linuxConfiguration": {},
                "numberOfFaultDomains": 1,
                "numberOfVirtualMachines": 0,
                "orchestrationMode": "Uniform",
                "osDisk": {},
                "priority": "Regular",
                "proximityPlacementGroup": {},
                "skuName": "Standard_D2s_v4",
                "windowsConfiguration": {}
            },
            "virtualNetwork": {
                "addressPrefixes": [],
                "ddosProtectionPlanName": "",
                "ddosProtectionPlanResourceGroupName": "[variables('resourceGroupName')]",
                "ddosProtectionPlanSubscriptionId": "[variables('subscriptionId')]",
                "dnsServers": [],
                "subnets": []
            },
            "webApplication": {
                "audit": "[variables('audit')]",
                "autoHeal": {},
                "applicationSettings": {},
                "connectionStrings": {},
                "cors": {},
                "customDomains": [],
                "dnsZones": {},
                "frameworkVersion": "DOTNETCORE|3.1",
                "functionExtension": {},
                "healthCheck": {},
                "ipSecurityRestrictions": [],
                "isAlwaysOnEnabled": true,
                "isClientAffinityEnabled": false,
                "isHttpsOnlyModeEnabled": true,
                "isHttp20SupportEnabled": true,
                "isWebSocketSupportEnabled": false,
                "is32BitModeEnabled": false,
                "logging": {},
                "metadata": [],
                "minimumSupportedTlsVersion": "1.2",
                "privateCertificates": [],
                "privateEndpoints": [],
                "publicCertificates": [],
                "remoteDebugging": {},
                "scmIpSecurityRestrictions": [],
                "subnet": {},
                "timeZone": "UTC"
            }
        },
        "deploymentNames": {
            "applicationConfigurationStore": "[format('{0}-AppConfigurationStore', deployment().name)]",
            "applicationInsightsComponent": "[format('{0}-AppInsightsComponent', deployment().name)]",
            "applicationSecurityGroup": "[format('{0}-AppSecurityGroup', deployment().name)]",
            "applicationServiceEnvironment": "[format('{0}-AppServiceEnvironment', deployment().name)]",
            "applicationServicePlan": "[format('{0}-AppServicePlan', deployment().name)]",
            "automationAccount": "[format('{0}-AutomationAccount', deployment().name)]",
            "availabilitySet": "[format('{0}-AvailabilitySet', deployment().name)]",
            "bastionHost": "[format('{0}-BastionHost', deployment().name)]",
            "cdnProfile": "[format('{0}-CdnProfile', deployment().name)]",
            "communicationService": "[format('{0}-CommunicationService', deployment().name)]",
            "containerInstance": "[format('{0}-ContainerInstance', deployment().name)]",
            "containerRegistry": "[format('{0}-ContainerRegistry', deployment().name)]",
            "cosmosDbAccount": "[format('{0}-CosmosDbAccount', deployment().name)]",
            "deployment": "[format('{0}-Deployment', deployment().name)]",
            "diskEncryptionSet": "[format('{0}-DiskEncryptionSet', deployment().name)]",
            "dnsPrivateZone": "[format('{0}-DnsPrivateZone', deployment().name)]",
            "dnsPublicZone": "[format('{0}-DnsPublicZone', deployment().name)]",
            "eventGridDomain": "[format('{0}-EventGridDomain', deployment().name)]",
            "eventGridEventSubscription": "[format('{0}-EventGridEventSub', deployment().name)]",
            "eventGridTopic": "[format('{0}-EventGridTopic', deployment().name)]",
            "eventHubCluster": "[format('{0}-EventHubCluster', deployment().name)]",
            "eventHub": "[format('{0}-EventHub', deployment().name)]",
            "eventHubNamespace": "[format('{0}-EventHubNamespace', deployment().name)]",
            "firewall": "[format('{0}-Firewall', deployment().name)]",
            "hdInsightCluster": "[format('{0}-HdInsightCluster', deployment().name)]",
            "hostGroup": "[format('{0}-HostGroup', deployment().name)]",
            "keyVault": "[format('{0}-KeyVault', deployment().name)]",
            "kubernetesServiceCluster": "[format('{0}-KubernetesServiceCluster', deployment().name)]",
            "loadBalancer": "[format('{0}-LoadBalancer', deployment().name)]",
            "logAnalyticsWorkspace": "[format('{0}-LogAnalyticsWorkspace', deployment().name)]",
            "logicApplicationWorkflow": "[format('{0}-LogicAppWorkflow', deployment().name)]",
            "managedHsm": "[format('{0}-ManagedHsm', deployment().name)]",
            "managedIdentity": "[format('{0}-ManagedIdentity', deployment().name)]",
            "monitorPrivateLinkScope": "[format('{0}-MonitorPrivateLinkScope', deployment().name)]",
            "proximityPlacementGroup": "[format('{0}-ProximityPlacementGroup', deployment().name)]",
            "natGateway": "[format('{0}-NatGateway', deployment().name)]",
            "networkSecurityGroup": "[format('{0}-NetworkSecurityGroup', deployment().name)]",
            "privateEndpoint": "[format('{0}-PrivateEndpoint', deployment().name)]",
            "publicIpAddress": "[format('{0}-PublicIpAddress', deployment().name)]",
            "publicIpPrefix": "[format('{0}-PublicIpPrefix', deployment().name)]",
            "recoveryServicesVault": "[format('{0}-RecoveryServicesVault', deployment().name)]",
            "redisCache": "[format('{0}-RedisCache', deployment().name)]",
            "roleAssignment": "[format('{0}-RoleAssignment', deployment().name)]",
            "routeTable": "[format('{0}-RouteTable', deployment().name)]",
            "scriptPostDeploy": "[format('{0}-ScriptPostDeploy', deployment().name)]",
            "scriptPreDeploy": "[format('{0}-ScriptPreDeploy', deployment().name)]",
            "serviceBusNamespace": "[format('{0}-ServiceBusNamespace', deployment().name)]",
            "sharedImageGallery": "[format('{0}-SharedImageGallery', deployment().name)]",
            "sqlDatabases": "[format('{0}-SqlDatabase', deployment().name)]",
            "sqlServer": "[format('{0}-SqlServer', deployment().name)]",
            "staticWebApplication": "[format('{0}-StaticWebApplication', deployment().name)]",
            "storageAccount": "[format('{0}-StorageAccount', deployment().name)]",
            "subnet": "[format('{0}-Subnet', deployment().name)]",
            "virtualMachine": "[format('{0}-VirtualMachine', deployment().name)]",
            "virtualMachineScaleSet": "[format('{0}-VirtualMachineScaleSets', deployment().name)]",
            "virtualNetwork": "[format('{0}-VirtualNetwork', deployment().name)]",
            "webApplication": "[format('{0}-WebApplication', deployment().name)]"
        },
        "logAnalyticsWorkspaces": "[if(variables('logAnalyticsWorkspacesIsNotEmpty'), variables('resourceDefinitions').monitor.logAnalyticsWorkspaces, createArray(createObject('name', 'dummyLogAnalyticsWorkspace')))]",
        "logAnalyticsWorkspacesCount": "[length(variables('resourceDefinitions').monitor.logAnalyticsWorkspaces)]",
        "logAnalyticsWorkspacesIsNotEmpty": "[greater(variables('logAnalyticsWorkspacesCount'), 0)]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceDefinitions": "[union(variables('defaultResourceDefinitions'), parameters('resourceDefinitions'))]",
        "subscriptionId": "[subscription().subscriptionId]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').scripts.preDeploy))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').scripts.preDeploy)]",
                "mode": "Parallel",
                "name": "scriptsPreDeployCopy"
            },
            "name": "[format('{0}_{1}', variables('deploymentNames').scriptPreDeploy, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "kind": {
                        "value": "[union(variables('defaultResourceProperties').script, variables('resourceDefinitions').scripts.preDeploy[copyIndex()]).kind]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').scripts.preDeploy[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').scripts.preDeploy[copyIndex()].name]"
                    },
                    "scriptContent": {
                        "value": "[variables('resourceDefinitions').scripts.preDeploy[copyIndex()].scriptContent]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Resources/deploymentScripts.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').managedIdentities))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').managedIdentities)]",
                "mode": "Parallel",
                "name": "managedIdentitiesCopy"
            },
            "dependsOn": [
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').managedIdentity, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').managedIdentities[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').managedIdentities[copyIndex()].name]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.ManagedIdentity/userAssignedIdentities.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[variables('logAnalyticsWorkspacesIsNotEmpty')]",
            "copy": {
                "count": "[variables('logAnalyticsWorkspacesCount')]",
                "mode": "Parallel",
                "name": "logAnalyticsWorkspacesCopy"
            },
            "dependsOn": [
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').logAnalyticsWorkspace, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "dataRetentionInDays": {
                        "value": "[union(variables('defaultResourceProperties').monitor.logAnalyticsWorkspace, variables('logAnalyticsWorkspaces')[copyIndex()]).dataRetentionInDays]"
                    },
                    "isPublicNetworkAccessForIngestionEnabled": {
                        "value": "[union(variables('defaultResourceProperties').monitor.logAnalyticsWorkspace, variables('logAnalyticsWorkspaces')[copyIndex()]).isPublicNetworkAccessForIngestionEnabled]"
                    },
                    "isPublicNetworkAccessForQueryEnabled": {
                        "value": "[union(variables('defaultResourceProperties').monitor.logAnalyticsWorkspace, variables('logAnalyticsWorkspaces')[copyIndex()]).isPublicNetworkAccessForQueryEnabled]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('logAnalyticsWorkspaces')[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('logAnalyticsWorkspaces')[copyIndex()].name]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').monitor.logAnalyticsWorkspace, variables('logAnalyticsWorkspaces')[copyIndex()]).skuName]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.OperationalInsights/workspaces.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[variables('logAnalyticsWorkspacesIsNotEmpty')]",
            "copy": {
                "count": "[variables('logAnalyticsWorkspacesCount')]",
                "mode": "Parallel",
                "name": "logAnalyticsWorkspacesLinkedStorageRbacCopy"
            },
            "dependsOn": [
                "logAnalyticsWorkspacesCopy",
                "storageAccountsCopy"
            ],
            "name": "[format('{0}_{1}-LsRbac', variables('deploymentNames').logAnalyticsWorkspace, copyIndex())]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                    "diagnosticServicesTrustedStorageAccessObjectId": {
                        "value": "[parameters('diagnosticServicesTrustedStorageAccessObjectId')]"
                    },
                    "roleAssignmentsApiVersion": {
                        "value": "[variables('apiVersions').roleAssignments]"
                    },
                    "storageAccountName": {
                        "value": "[variables('logAnalyticsWorkspaces')[copyIndex()].linkedStorageAccountName]"
                    },
                    "storageAccountResourceGroupName": {
                        "value": "[union(variables('defaultResourceProperties').monitor.logAnalyticsWorkspace, variables('logAnalyticsWorkspaces')[copyIndex()]).linkedStorageAccountResourceGroupName]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "diagnosticServicesTrustedStorageAccessObjectId": {
                            "type": "string"
                        },
                        "roleAssignmentsApiVersion": {
                            "type": "string"
                        },
                        "storageAccountName": {
                            "type": "string"
                        },
                        "storageAccountResourceGroupName": {
                            "type": "string"
                        }
                    },
                    "variables": {
                        "resourceIds": {
                            "storageAccountBlobContributorRoleDefinition": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                            "storageAccount": "[resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                        }
                    },
                    "resources": [
                        {
                            "apiVersion": "[parameters('roleAssignmentsApiVersion')]",
                            "name": "[guid(parameters('diagnosticServicesTrustedStorageAccessObjectId'), variables('resourceIds').storageAccountBlobContributorRoleDefinition, variables('resourceIds').storageAccount)]",
                            "properties": {
                                "principalId": "[parameters('diagnosticServicesTrustedStorageAccessObjectId')]",
                                "roleDefinitionId": "[variables('resourceIds').storageAccountBlobContributorRoleDefinition]"
                            },
                            "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                            "type": "Microsoft.Authorization/roleAssignments"
                        }
                    ]
                }
            },
            "resourceGroup": "[union(variables('defaultResourceProperties').monitor.logAnalyticsWorkspace, variables('logAnalyticsWorkspaces')[copyIndex()]).linkedStorageAccountResourceGroupName]",
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[variables('logAnalyticsWorkspacesIsNotEmpty')]",
            "copy": {
                "count": "[variables('logAnalyticsWorkspacesCount')]",
                "mode": "Parallel",
                "name": "logAnalyticsWorkspacesLinkedStorageJoinCopy"
            },
            "dependsOn": [
                "logAnalyticsWorkspacesCopy",
                "logAnalyticsWorkspacesLinkedStorageRbacCopy",
                "storageAccountsCopy"
            ],
            "name": "[format('{0}_{1}-LsJoin', variables('deploymentNames').logAnalyticsWorkspace, copyIndex())]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                    "logAnalyticsWorkspaceName": {
                        "value": "[variables('logAnalyticsWorkspaces')[copyIndex()].name]"
                    },
                    "storageAccountName": {
                        "value": "[variables('logAnalyticsWorkspaces')[copyIndex()].linkedStorageAccountName]"
                    },
                    "storageAccountResourceGroupName": {
                        "value": "[union(variables('defaultResourceProperties').monitor.logAnalyticsWorkspace, variables('logAnalyticsWorkspaces')[copyIndex()]).linkedStorageAccountResourceGroupName]"
                    },
                    "workspacesLinkedStorageAccountsApiVersion": {
                        "value": "[variables('apiVersions').workspacesLinkedStorageAccounts]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "logAnalyticsWorkspaceName": {
                            "type": "string"
                        },
                        "storageAccountName": {
                            "type": "string"
                        },
                        "storageAccountResourceGroupName": {
                            "type": "string"
                        },
                        "workspacesLinkedStorageAccountsApiVersion": {
                            "type": "string"
                        }
                    },
                    "variables": {
                        "resourceIds": {
                            "storageAccount": "[resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                        }
                    },
                    "resources": [
                        {
                            "apiVersion": "[parameters('workspacesLinkedStorageAccountsApiVersion')]",
                            "name": "[format('{0}/alerts', parameters('logAnalyticsWorkspaceName'))]",
                            "properties": {
                                "storageAccountIds": [
                                    "[variables('resourceIds').storageAccount]"
                                ]
                            },
                            "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts"
                        },
                        {
                            "apiVersion": "[parameters('workspacesLinkedStorageAccountsApiVersion')]",
                            "name": "[format('{0}/customlogs', parameters('logAnalyticsWorkspaceName'))]",
                            "properties": {
                                "storageAccountIds": [
                                    "[variables('resourceIds').storageAccount]"
                                ]
                            },
                            "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts"
                        },
                        {
                            "apiVersion": "[parameters('workspacesLinkedStorageAccountsApiVersion')]",
                            "name": "[format('{0}/query', parameters('logAnalyticsWorkspaceName'))]",
                            "properties": {
                                "storageAccountIds": [
                                    "[variables('resourceIds').storageAccount]"
                                ]
                            },
                            "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts"
                        }
                    ]
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').publicIpPrefixes))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').publicIpPrefixes)]",
                "mode": "Parallel",
                "name": "publicIpPrefixesCopy"
            },
            "dependsOn": [
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').publicIpPrefix, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "ipVersion": {
                        "value": "[union(variables('defaultResourceProperties').publicIpPrefix, variables('resourceDefinitions').publicIpPrefixes[copyIndex()]).ipVersion]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').publicIpPrefixes[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').publicIpPrefixes[copyIndex()].name]"
                    },
                    "size": {
                        "value": "[union(variables('defaultResourceProperties').publicIpPrefix, variables('resourceDefinitions').publicIpPrefixes[copyIndex()]).size]"
                    },
                    "skuTier": {
                        "value": "[union(variables('defaultResourceProperties').publicIpPrefix, variables('resourceDefinitions').publicIpPrefixes[copyIndex()]).skuTier]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Network/publicIpPrefixes.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').publicIpAddresses))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').publicIpAddresses)]",
                "mode": "Parallel",
                "name": "publicIpAddressesCopy"
            },
            "dependsOn": [
                "logAnalyticsWorkspacesCopy",
                "publicIpPrefixesCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').publicIpAddress, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "allocationMethod": {
                        "value": "[union(variables('defaultResourceProperties').publicIpAddress, variables('resourceDefinitions').publicIpAddresses[copyIndex()]).allocationMethod]"
                    },
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').publicIpAddress, variables('resourceDefinitions').publicIpAddresses[copyIndex()]).audit]"
                    },
                    "availabilityZones": {
                        "value": "[union(variables('defaultResourceProperties').publicIpAddress, variables('resourceDefinitions').publicIpAddresses[copyIndex()]).availabilityZones]"
                    },
                    "dnsPrefix": {
                        "value": "[union(variables('defaultResourceProperties').publicIpAddress, variables('resourceDefinitions').publicIpAddresses[copyIndex()]).dnsPrefix]"
                    },
                    "idleTimeoutInMinutes": {
                        "value": "[union(variables('defaultResourceProperties').publicIpAddress, variables('resourceDefinitions').publicIpAddresses[copyIndex()]).idleTimeoutInMinutes]"
                    },
                    "ipPrefixName": {
                        "value": "[union(variables('defaultResourceProperties').publicIpAddress, variables('resourceDefinitions').publicIpAddresses[copyIndex()]).ipPrefixName]"
                    },
                    "ipPrefixResourceGroupName": {
                        "value": "[union(variables('defaultResourceProperties').publicIpAddress, variables('resourceDefinitions').publicIpAddresses[copyIndex()]).ipPrefixResourceGroupName]"
                    },
                    "ipPrefixSubscriptionId": {
                        "value": "[union(variables('defaultResourceProperties').publicIpAddress, variables('resourceDefinitions').publicIpAddresses[copyIndex()]).ipPrefixSubscriptionId]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').publicIpAddresses[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').publicIpAddresses[copyIndex()].name]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').publicIpAddress, variables('resourceDefinitions').publicIpAddresses[copyIndex()]).skuName]"
                    },
                    "skuTier": {
                        "value": "[union(variables('defaultResourceProperties').publicIpAddress, variables('resourceDefinitions').publicIpAddresses[copyIndex()]).skuTier]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "version": {
                        "value": "[union(variables('defaultResourceProperties').publicIpAddress, variables('resourceDefinitions').publicIpAddresses[copyIndex()]).version]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Network/publicIpAddresses.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').natGateways))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').natGateways)]",
                "mode": "Parallel",
                "name": "natGatewaysCopy"
            },
            "dependsOn": [
                "publicIpAddressesCopy",
                "publicIpPrefixesCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').natGateway, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "availabilityZones": {
                        "value": "[union(variables('defaultResourceProperties').natGateway, variables('resourceDefinitions').natGateways[copyIndex()]).availabilityZones]"
                    },
                    "idleTimeoutInMinutes": {
                        "value": "[union(variables('defaultResourceProperties').natGateway, variables('resourceDefinitions').natGateways[copyIndex()]).idleTimeoutInMinutes]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').natGateways[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').natGateways[copyIndex()].name]"
                    },
                    "publicIpAddresses": {
                        "value": "[union(variables('defaultResourceProperties').natGateway, variables('resourceDefinitions').natGateways[copyIndex()]).publicIpAddresses]"
                    },
                    "publicIpPrefixes": {
                        "value": "[union(variables('defaultResourceProperties').natGateway, variables('resourceDefinitions').natGateways[copyIndex()]).publicIpPrefixes]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').natGateway, variables('resourceDefinitions').natGateways[copyIndex()]).skuName]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Network/natGateways.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').networkSecurityGroups))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').networkSecurityGroups)]",
                "mode": "Parallel",
                "name": "networkSecurityGroupsCopy"
            },
            "dependsOn": [
                "logAnalyticsWorkspacesCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').networkSecurityGroup, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').networkSecurityGroup, variables('resourceDefinitions').networkSecurityGroups[copyIndex()]).audit]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').networkSecurityGroups[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').networkSecurityGroups[copyIndex()].name]"
                    },
                    "securityRules": {
                        "value": "[union(variables('defaultResourceProperties').networkSecurityGroup, variables('resourceDefinitions').networkSecurityGroups[copyIndex()]).securityRules]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Network/networkSecurityGroups.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').applicationSecurityGroups))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').applicationSecurityGroups)]",
                "mode": "Parallel",
                "name": "applicationSecurityGroupsCopy"
            },
            "dependsOn": [
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').applicationSecurityGroup, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').applicationSecurityGroups[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').applicationSecurityGroups[copyIndex()].name]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Network/applicationSecurityGroups.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').routeTables))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').routeTables)]",
                "mode": "Parallel",
                "name": "routeTablesCopy"
            },
            "dependsOn": [
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').routeTable, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "isBgpRoutePropagationEnabled": {
                        "value": "[union(variables('defaultResourceProperties').routeTable, variables('resourceDefinitions').routeTables[copyIndex()]).isBgpRoutePropagationEnabled]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').routeTables[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').routeTables[copyIndex()].name]"
                    },
                    "routes": {
                        "value": "[union(variables('defaultResourceProperties').routeTable, variables('resourceDefinitions').routeTables[copyIndex()]).routes]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Network/routeTables.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').cdnProfiles))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').cdnProfiles)]",
                "mode": "Parallel",
                "name": "cdnProfilesCopy"
            },
            "dependsOn": [
                "logAnalyticsWorkspacesCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').cdnProfile, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').cdnProfile, variables('resourceDefinitions').cdnProfiles[copyIndex()]).audit]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').cdnProfiles[copyIndex()].name]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').cdnProfile, variables('resourceDefinitions').cdnProfiles[copyIndex()]).skuName]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Cdn/profiles.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').virtualNetworks))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').virtualNetworks)]",
                "mode": "Parallel",
                "name": "virtualNetworksCopy"
            },
            "dependsOn": [
                "natGatewaysCopy",
                "networkSecurityGroupsCopy",
                "routeTablesCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').virtualNetwork, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "addressPrefixes": {
                        "value": "[union(variables('defaultResourceProperties').virtualNetwork, variables('resourceDefinitions').virtualNetworks[copyIndex()]).addressPrefixes]"
                    },
                    "ddosProtectionPlanName": {
                        "value": "[union(variables('defaultResourceProperties').virtualNetwork, variables('resourceDefinitions').virtualNetworks[copyIndex()]).ddosProtectionPlanName]"
                    },
                    "ddosProtectionPlanResourceGroupName": {
                        "value": "[union(variables('defaultResourceProperties').virtualNetwork, variables('resourceDefinitions').virtualNetworks[copyIndex()]).ddosProtectionPlanResourceGroupName]"
                    },
                    "ddosProtectionPlanSubscriptionId": {
                        "value": "[union(variables('defaultResourceProperties').virtualNetwork, variables('resourceDefinitions').virtualNetworks[copyIndex()]).ddosProtectionPlanSubscriptionId]"
                    },
                    "dnsServers": {
                        "value": "[union(variables('defaultResourceProperties').virtualNetwork, variables('resourceDefinitions').virtualNetworks[copyIndex()]).dnsServers]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').virtualNetworks[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').virtualNetworks[copyIndex()].name]"
                    },
                    "subnets": {
                        "value": "[union(variables('defaultResourceProperties').virtualNetwork, variables('resourceDefinitions').virtualNetworks[copyIndex()]).subnets]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Network/virtualNetworks.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').subnets))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').subnets)]",
                "mode": "Serial",
                "name": "subnetsCopy"
            },
            "dependsOn": [
                "scriptsPreDeployCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').subnet, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "addressPrefixes": {
                        "value": "[variables('resourceDefinitions').subnets[copyIndex()].addressPrefixes]"
                    },
                    "delegatedServiceNames": {
                        "value": "[union(variables('defaultResourceProperties').subnet, variables('resourceDefinitions').subnets[copyIndex()]).delegatedServiceNames]"
                    },
                    "isPrivateEndpointSupportEnabled": {
                        "value": "[union(variables('defaultResourceProperties').subnet, variables('resourceDefinitions').subnets[copyIndex()]).isPrivateEndpointSupportEnabled]"
                    },
                    "isPrivateLinkServiceSupportEnabled": {
                        "value": "[union(variables('defaultResourceProperties').subnet, variables('resourceDefinitions').subnets[copyIndex()]).isPrivateLinkServiceSupportEnabled]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').subnets[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').subnets[copyIndex()].name]"
                    },
                    "natGateway": {
                        "value": "[union(variables('defaultResourceProperties').subnet, variables('resourceDefinitions').subnets[copyIndex()]).natGateway]"
                    },
                    "networkSecurityGroup": {
                        "value": "[union(variables('defaultResourceProperties').subnet, variables('resourceDefinitions').subnets[copyIndex()]).networkSecurityGroup]"
                    },
                    "routeTable": {
                        "value": "[union(variables('defaultResourceProperties').subnet, variables('resourceDefinitions').subnets[copyIndex()]).routeTable]"
                    },
                    "serviceEndpoints": {
                        "value": "[union(variables('defaultResourceProperties').subnet, variables('resourceDefinitions').subnets[copyIndex()]).serviceEndpoints]"
                    },
                    "virtualNetwork": {
                        "value": "[variables('resourceDefinitions').subnets[copyIndex()].virtualNetwork]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Network/subnets.json"
                }
            },
            "resourceGroup": "[union(variables('defaultResourceProperties').subnet, variables('resourceDefinitions').subnets[copyIndex()]).virtualNetwork.resourceGroupName]",
            "subscriptionId": "[union(variables('defaultResourceProperties').subnet, variables('resourceDefinitions').subnets[copyIndex()]).virtualNetwork.subscriptionId]",
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').bastionHosts))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').bastionHosts)]",
                "mode": "Parallel",
                "name": "bastionHostsCopy"
            },
            "dependsOn": [
                "publicIpAddressesCopy",
                "publicIpPrefixesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').bastionHost, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').bastionHost, variables('resourceDefinitions').bastionHosts[copyIndex()]).audit]"
                    },
                    "ipConfigurations": {
                        "value": "[variables('resourceDefinitions').bastionHosts[copyIndex()].ipConfigurations]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').bastionHosts[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').bastionHosts[copyIndex()].name]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Network/bastionHosts.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').firewalls))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').firewalls)]",
                "mode": "Parallel",
                "name": "firewallsCopy"
            },
            "dependsOn": [
                "publicIpAddressesCopy",
                "publicIpPrefixesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').firewall, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "availabilityZones": {
                        "value": "[union(variables('defaultResourceProperties').firewall, variables('resourceDefinitions').firewalls[copyIndex()]).availabilityZones]"
                    },
                    "ipConfigurations": {
                        "value": "[union(variables('defaultResourceProperties').firewall, variables('resourceDefinitions').firewalls[copyIndex()]).ipConfigurations]"
                    },
                    "managementIpConfiguration": {
                        "value": "[union(variables('defaultResourceProperties').firewall, variables('resourceDefinitions').firewalls[copyIndex()]).managementIpConfiguration]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').firewalls[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').firewalls[copyIndex()].name]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').firewall, variables('resourceDefinitions').firewalls[copyIndex()]).skuName]"
                    },
                    "skuTier": {
                        "value": "[union(variables('defaultResourceProperties').firewall, variables('resourceDefinitions').firewalls[copyIndex()]).skuTier]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Network/azureFirewalls.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').dnsZones.private))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').dnsZones.private)]",
                "mode": "Parallel",
                "name": "privateDnsZonesCopy"
            },
            "dependsOn": [
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').dnsPrivateZone, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "aRecords": {
                        "value": "[union(variables('defaultResourceProperties').dnsZone.private, variables('resourceDefinitions').dnsZones.private[copyIndex()]).aRecords]"
                    },
                    "cnameRecords": {
                        "value": "[union(variables('defaultResourceProperties').dnsZone.private, variables('resourceDefinitions').dnsZones.private[copyIndex()]).cnameRecords]"
                    },
                    "mxRecords": {
                        "value": "[union(variables('defaultResourceProperties').dnsZone.private, variables('resourceDefinitions').dnsZones.private[copyIndex()]).mxRecords]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').dnsZones.private[copyIndex()].name]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "txtRecords": {
                        "value": "[union(variables('defaultResourceProperties').dnsZone.private, variables('resourceDefinitions').dnsZones.private[copyIndex()]).txtRecords]"
                    },
                    "virtualNetworkLinks": {
                        "value": "[union(variables('defaultResourceProperties').dnsZone.private, variables('resourceDefinitions').dnsZones.private[copyIndex()]).virtualNetworkLinks]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Network/dnsPrivateZones.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').dnsZones.public))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').dnsZones.public)]",
                "mode": "Parallel",
                "name": "publicDnsZonesCopy"
            },
            "dependsOn": [
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').dnsPublicZone, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "aRecords": {
                        "value": "[union(variables('defaultResourceProperties').dnsZone.public, variables('resourceDefinitions').dnsZones.public[copyIndex()]).aRecords]"
                    },
                    "cnameRecords": {
                        "value": "[union(variables('defaultResourceProperties').dnsZone.public, variables('resourceDefinitions').dnsZones.public[copyIndex()]).cnameRecords]"
                    },
                    "mxRecords": {
                        "value": "[union(variables('defaultResourceProperties').dnsZone.public, variables('resourceDefinitions').dnsZones.public[copyIndex()]).mxRecords]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').dnsZones.public[copyIndex()].name]"
                    },
                    "nsRecords": {
                        "value": "[union(variables('defaultResourceProperties').dnsZone.public, variables('resourceDefinitions').dnsZones.public[copyIndex()]).nsRecords]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "txtRecords": {
                        "value": "[union(variables('defaultResourceProperties').dnsZone.public, variables('resourceDefinitions').dnsZones.public[copyIndex()]).txtRecords]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Network/dnsPublicZones.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').eventGrid.domains))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').eventGrid.domains)]",
                "mode": "Parallel",
                "name": "eventGridDomainsCopy"
            },
            "dependsOn": [
                "logAnalyticsWorkspacesCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').eventGridDomain, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').eventGrid.domain, variables('resourceDefinitions').eventGrid.domains[copyIndex()]).audit]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').eventGrid.domains[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').eventGrid.domains[copyIndex()].name]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.EventGrid/domains.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').eventGrid.topics))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').eventGrid.topics)]",
                "mode": "Parallel",
                "name": "eventGridTopicsCopy"
            },
            "dependsOn": [
                "eventGridDomainsCopy",
                "logAnalyticsWorkspacesCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').eventGridTopic, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').eventGrid.topic, variables('resourceDefinitions').eventGrid.topics[copyIndex()]).audit]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').eventGrid.topics[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').eventGrid.topics[copyIndex()].name]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.EventGrid/topics.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').eventGrid.eventSubscriptions))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').eventGrid.eventSubscriptions)]",
                "mode": "Parallel",
                "name": "eventGridEventSubcriptionsCopy"
            },
            "dependsOn": [
                "eventGridDomainsCopy",
                "eventGridTopicsCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').eventGridEventSubscription, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "destination": {
                        "value": "[union(variables('defaultResourceProperties').eventGrid.eventSubscription, variables('resourceDefinitions').eventGrid.eventSubscriptions[copyIndex()]).destination]"
                    },
                    "eventDeliverySchema": {
                        "value": "[union(variables('defaultResourceProperties').eventGrid.eventSubscription, variables('resourceDefinitions').eventGrid.eventSubscriptions[copyIndex()]).eventDeliverySchema]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').eventGrid.eventSubscriptions[copyIndex()].name]"
                    },
                    "topicName": {
                        "value": "[variables('resourceDefinitions').eventGrid.eventSubscriptions[copyIndex()].topicName]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.EventGrid/eventSubscriptions.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').eventHub.clusters))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').eventHub.clusters)]",
                "mode": "Parallel",
                "name": "eventHubsClustersCopy"
            },
            "dependsOn": [
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').cluster, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "numberOfCapacityUnits": {
                        "value": "[union(variables('defaultResourceProperties').eventHub.cluster, variables('resourceDefinitions').eventHub.clusters[copyIndex()]).numberOfCapacityUnits]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').eventHub.clusters[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').eventHub.clusters[copyIndex()].name]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.EventHub/clusters.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').eventHub.namespaces))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').eventHub.namespaces)]",
                "mode": "Parallel",
                "name": "eventHubsNamespacesCopy"
            },
            "dependsOn": [
                "eventHubsClustersCopy",
                "logAnalyticsWorkspacesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').eventHubNamespace, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').eventHub.namespace, variables('resourceDefinitions').eventHub.namespaces[copyIndex()]).audit]"
                    },
                    "cluster": {
                        "value": "[union(variables('defaultResourceProperties').eventHub.namespace, variables('resourceDefinitions').eventHub.namespaces[copyIndex()]).cluster]"
                    },
                    "firewallRules": {
                        "value": "[union(variables('defaultResourceProperties').eventHub.namespace, variables('resourceDefinitions').eventHub.namespaces[copyIndex()]).firewallRules]"
                    },
                    "identity": {
                        "value": "[union(variables('defaultResourceProperties').eventHub.namespace, variables('resourceDefinitions').eventHub.namespaces[copyIndex()]).identity]"
                    },
                    "isAllowTrustedMicrosoftServicesEnabled": {
                        "value": "[union(variables('defaultResourceProperties').eventHub.namespace, variables('resourceDefinitions').eventHub.namespaces[copyIndex()]).isAllowTrustedMicrosoftServicesEnabled]"
                    },
                    "isKafkaSupportEnabled": {
                        "value": "[union(variables('defaultResourceProperties').eventHub.namespace, variables('resourceDefinitions').eventHub.namespaces[copyIndex()]).isKafkaSupportEnabled]"
                    },
                    "isPublicNetworkAccessEnabled": {
                        "value": "[union(variables('defaultResourceProperties').eventHub.namespace, variables('resourceDefinitions').eventHub.namespaces[copyIndex()]).isPublicNetworkAccessEnabled]"
                    },
                    "isZoneRedundant": {
                        "value": "[union(variables('defaultResourceProperties').eventHub.namespace, variables('resourceDefinitions').eventHub.namespaces[copyIndex()]).isZoneRedundant]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').eventHub.namespaces[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').eventHub.namespaces[copyIndex()].name]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').eventHub.namespace, variables('resourceDefinitions').eventHub.namespaces[copyIndex()]).skuName]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "virtualNetworkRules": {
                        "value": "[union(variables('defaultResourceProperties').eventHub.namespace, variables('resourceDefinitions').eventHub.namespaces[copyIndex()]).virtualNetworkRules]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.EventHub/namespaces.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').eventHub.hubs))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').eventHub.hubs)]",
                "mode": "Parallel",
                "name": "eventHubsCopy"
            },
            "dependsOn": [
                "eventHubsNamespacesCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').eventHub, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "consumerGroups": {
                        "value": "[union(variables('defaultResourceProperties').eventHub.hub, variables('resourceDefinitions').eventHub.hubs[copyIndex()]).consumerGroups]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').eventHub.hubs[copyIndex()]).location]"
                    },
                    "messageRetentionInDays": {
                        "value": "[union(variables('defaultResourceProperties').eventHub.hub, variables('resourceDefinitions').eventHub.hubs[copyIndex()]).messageRetentionInDays]"
                    },
                    "numberOfPartitions": {
                        "value": "[union(variables('defaultResourceProperties').eventHub.hub, variables('resourceDefinitions').eventHub.hubs[copyIndex()]).numberOfPartitions]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').eventHub.hubs[copyIndex()].name]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.EventHub/eventhubs.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').serviceBus.namespaces))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').serviceBus.namespaces)]",
                "mode": "Parallel",
                "name": "serviceBusNamespacesCopy"
            },
            "dependsOn": [
                "logAnalyticsWorkspacesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').serviceBusNamespace, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').serviceBus.namespace, variables('resourceDefinitions').serviceBus.namespaces[copyIndex()]).audit]"
                    },
                    "firewallRules": {
                        "value": "[union(variables('defaultResourceProperties').serviceBus.namespace, variables('resourceDefinitions').serviceBus.namespaces[copyIndex()]).firewallRules]"
                    },
                    "identity": {
                        "value": "[union(variables('defaultResourceProperties').serviceBus.namespace, variables('resourceDefinitions').serviceBus.namespaces[copyIndex()]).identity]"
                    },
                    "isAllowTrustedMicrosoftServicesEnabled": {
                        "value": "[union(variables('defaultResourceProperties').serviceBus.namespace, variables('resourceDefinitions').serviceBus.namespaces[copyIndex()]).isAllowTrustedMicrosoftServicesEnabled]"
                    },
                    "isPublicNetworkAccessEnabled": {
                        "value": "[union(variables('defaultResourceProperties').serviceBus.namespace, variables('resourceDefinitions').serviceBus.namespaces[copyIndex()]).isPublicNetworkAccessEnabled]"
                    },
                    "isZoneRedundant": {
                        "value": "[union(variables('defaultResourceProperties').serviceBus.namespace, variables('resourceDefinitions').serviceBus.namespaces[copyIndex()]).isZoneRedundant]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').serviceBus.namespaces[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').serviceBus.namespaces[copyIndex()].name]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').serviceBus.namespace, variables('resourceDefinitions').serviceBus.namespaces[copyIndex()]).skuName]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "virtualNetworkRules": {
                        "value": "[union(variables('defaultResourceProperties').serviceBus.namespace, variables('resourceDefinitions').serviceBus.namespaces[copyIndex()]).virtualNetworkRules]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.ServiceBus/namespaces.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').redisCaches))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').redisCaches)]",
                "mode": "Parallel",
                "name": "redisCachesCopy"
            },
            "dependsOn": [
                "logAnalyticsWorkspacesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').redisCache, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').redisCache, variables('resourceDefinitions').redisCaches[copyIndex()]).audit]"
                    },
                    "availabilityZones": {
                        "value": "[union(variables('defaultResourceProperties').redisCache, variables('resourceDefinitions').redisCaches[copyIndex()]).availabilityZones]"
                    },
                    "firewallRules": {
                        "value": "[union(variables('defaultResourceProperties').redisCache, variables('resourceDefinitions').redisCaches[copyIndex()]).firewallRules]"
                    },
                    "identity": {
                        "value": "[union(variables('defaultResourceProperties').redisCache, variables('resourceDefinitions').redisCaches[copyIndex()]).identity]"
                    },
                    "isPublicNetworkAccessEnabled": {
                        "value": "[union(variables('defaultResourceProperties').redisCache, variables('resourceDefinitions').redisCaches[copyIndex()]).isPublicNetworkAccessEnabled]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').redisCaches[copyIndex()]).location]"
                    },
                    "minimumSupportedTlsVersion": {
                        "value": "[union(variables('defaultResourceProperties').redisCache, variables('resourceDefinitions').redisCaches[copyIndex()]).minimumSupportedTlsVersion]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').redisCaches[copyIndex()].name]"
                    },
                    "numberOfCapacityUnits": {
                        "value": "[union(variables('defaultResourceProperties').redisCache, variables('resourceDefinitions').redisCaches[copyIndex()]).numberOfCapacityUnits]"
                    },
                    "numberOfShards": {
                        "value": "[union(variables('defaultResourceProperties').redisCache, variables('resourceDefinitions').redisCaches[copyIndex()]).numberOfShards]"
                    },
                    "privateEndpoints": {
                        "value": "[union(variables('defaultResourceProperties').redisCache, variables('resourceDefinitions').redisCaches[copyIndex()]).privateEndpoints]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').redisCache, variables('resourceDefinitions').redisCaches[copyIndex()]).skuName]"
                    },
                    "subnet": {
                        "value": "[union(variables('defaultResourceProperties').redisCache, variables('resourceDefinitions').redisCaches[copyIndex()]).subnet]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Cache/redis.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').loadBalancers))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').loadBalancers)]",
                "mode": "Parallel",
                "name": "loadBalancersCopy"
            },
            "dependsOn": [
                "publicIpAddressesCopy",
                "publicIpPrefixesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').loadBalancer, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "backendAddressPools": {
                        "value": "[union(variables('defaultResourceProperties').loadBalancer, variables('resourceDefinitions').loadBalancers[copyIndex()]).backendAddressPools]"
                    },
                    "frontendIpConfigurations": {
                        "value": "[union(variables('defaultResourceProperties').loadBalancer, variables('resourceDefinitions').loadBalancers[copyIndex()]).frontendIpConfigurations]"
                    },
                    "healthProbes": {
                        "value": "[union(variables('defaultResourceProperties').loadBalancer, variables('resourceDefinitions').loadBalancers[copyIndex()]).healthProbes]"
                    },
                    "inboundNatPools": {
                        "value": "[union(variables('defaultResourceProperties').loadBalancer, variables('resourceDefinitions').loadBalancers[copyIndex()]).inboundNatPools]"
                    },
                    "inboundNatRules": {
                        "value": "[union(variables('defaultResourceProperties').loadBalancer, variables('resourceDefinitions').loadBalancers[copyIndex()]).inboundNatRules]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').loadBalancers[copyIndex()]).location]"
                    },
                    "loadBalancingRules": {
                        "value": "[union(variables('defaultResourceProperties').loadBalancer, variables('resourceDefinitions').loadBalancers[copyIndex()]).loadBalancingRules]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').loadBalancers[copyIndex()].name]"
                    },
                    "outboundRules": {
                        "value": "[union(variables('defaultResourceProperties').loadBalancer, variables('resourceDefinitions').loadBalancers[copyIndex()]).outboundRules]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').loadBalancer, variables('resourceDefinitions').loadBalancers[copyIndex()]).skuName]"
                    },
                    "skuTier": {
                        "value": "[union(variables('defaultResourceProperties').loadBalancer, variables('resourceDefinitions').loadBalancers[copyIndex()]).skuTier]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Network/loadBalancers.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').monitor.applicationInsightsComponents))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').monitor.applicationInsightsComponents)]",
                "mode": "Parallel",
                "name": "applicationInsightsComponentsCopy"
            },
            "dependsOn": [
                "logAnalyticsWorkspacesCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').applicationInsightsComponent, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').monitor.applicationInsightsComponents[copyIndex()]).location]"
                    },
                    "logAnalyticsWorkspaceName": {
                        "value": "[union(variables('defaultResourceProperties').monitor.applicationInsightsComponent, variables('resourceDefinitions').monitor.applicationInsightsComponents[copyIndex()]).logAnalyticsWorkspaceName]"
                    },
                    "logAnalyticsWorkspaceResourceGroupName": {
                        "value": "[union(variables('defaultResourceProperties').monitor.applicationInsightsComponent, variables('resourceDefinitions').monitor.applicationInsightsComponents[copyIndex()]).logAnalyticsWorkspaceResourceGroupName]"
                    },
                    "logAnalyticsWorkspaceSubscriptionId": {
                        "value": "[union(variables('defaultResourceProperties').monitor.applicationInsightsComponent, variables('resourceDefinitions').monitor.applicationInsightsComponents[copyIndex()]).logAnalyticsWorkspaceSubscriptionId]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').monitor.applicationInsightsComponents[copyIndex()].name]"
                    },
                    "samplingPercentage": {
                        "value": "[union(variables('defaultResourceProperties').monitor.applicationInsightsComponent, variables('resourceDefinitions').monitor.applicationInsightsComponents[copyIndex()]).samplingPercentage]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Insights/components.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').monitor.privateLinkScopes))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').monitor.privateLinkScopes)]",
                "mode": "Parallel",
                "name": "monitorPrivateLinkScopesCopy"
            },
            "dependsOn": [
                "applicationInsightsComponentsCopy",
                "logAnalyticsWorkspacesCopy",
                "privateDnsZonesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').monitorPrivateLinkScope, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "name": {
                        "value": "[variables('resourceDefinitions').monitor.privateLinkScopes[copyIndex()].name]"
                    },
                    "privateEndpoints": {
                        "value": "[union(variables('defaultResourceProperties').monitor.privateLinkScope, variables('resourceDefinitions').monitor.privateLinkScopes[copyIndex()]).privateEndpoints]"
                    },
                    "scopedResources": {
                        "value": "[union(variables('defaultResourceProperties').monitor.privateLinkScope, variables('resourceDefinitions').monitor.privateLinkScopes[copyIndex()]).scopedResources]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Insights/privateLinkScopes.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').keyVaults))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').keyVaults)]",
                "mode": "Parallel",
                "name": "keyVaultsCopy"
            },
            "dependsOn": [
                "logAnalyticsWorkspacesCopy",
                "privateDnsZonesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').keyVault, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).audit]"
                    },
                    "firewallRules": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).firewallRules]"
                    },
                    "isAllowTrustedMicrosoftServicesEnabled": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).isAllowTrustedMicrosoftServicesEnabled]"
                    },
                    "isDiskEncryptionEnabled": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).isDiskEncryptionEnabled]"
                    },
                    "isPublicNetworkAccessEnabled": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).isPublicNetworkAccessEnabled]"
                    },
                    "isPurgeProtectionEnabled": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).isPurgeProtectionEnabled]"
                    },
                    "isRbacAuthorizationEnabled": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).isRbacAuthorizationEnabled]"
                    },
                    "isTemplateDeploymentEnabled": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).isTemplateDeploymentEnabled]"
                    },
                    "isVirtualMachineDeploymentEnabled": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).isVirtualMachineDeploymentEnabled]"
                    },
                    "keys": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).keys]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').keyVaults[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').keyVaults[copyIndex()].name]"
                    },
                    "privateEndpoints": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).privateEndpoints]"
                    },
                    "secrets": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).secrets]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).skuName]"
                    },
                    "softDeleteRetentionInDays": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).softDeleteRetentionInDays]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "tenantId": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).tenantId]"
                    },
                    "virtualNetworkRules": {
                        "value": "[union(variables('defaultResourceProperties').keyVault, variables('resourceDefinitions').keyVaults[copyIndex()]).virtualNetworkRules]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.KeyVault/vaults.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').managedHsms))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').managedHsms)]",
                "mode": "Parallel",
                "name": "managedHsmsCopy"
            },
            "dependsOn": [
                "logAnalyticsWorkspacesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').managedHsm, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "administratorObjectIds": {
                        "value": "[variables('resourceDefinitions').managedHsms[copyIndex()].administratorObjectIds]"
                    },
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').managedHsm, variables('resourceDefinitions').managedHsms[copyIndex()]).audit]"
                    },
                    "firewallRules": {
                        "value": "[union(variables('defaultResourceProperties').managedHsm, variables('resourceDefinitions').managedHsms[copyIndex()]).firewallRules]"
                    },
                    "isAllowTrustedMicrosoftServicesEnabled": {
                        "value": "[union(variables('defaultResourceProperties').managedHsm, variables('resourceDefinitions').managedHsms[copyIndex()]).isAllowTrustedMicrosoftServicesEnabled]"
                    },
                    "isPublicNetworkAccessEnabled": {
                        "value": "[union(variables('defaultResourceProperties').managedHsm, variables('resourceDefinitions').managedHsms[copyIndex()]).isPublicNetworkAccessEnabled]"
                    },
                    "isPurgeProtectionEnabled": {
                        "value": "[union(variables('defaultResourceProperties').managedHsm, variables('resourceDefinitions').managedHsms[copyIndex()]).isPurgeProtectionEnabled]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').managedHsms[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').managedHsms[copyIndex()].name]"
                    },
                    "privateEndpoints": {
                        "value": "[union(variables('defaultResourceProperties').managedHsm, variables('resourceDefinitions').managedHsms[copyIndex()]).privateEndpoints]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').managedHsm, variables('resourceDefinitions').managedHsms[copyIndex()]).skuName]"
                    },
                    "softDeleteRetentionInDays": {
                        "value": "[union(variables('defaultResourceProperties').managedHsm, variables('resourceDefinitions').managedHsms[copyIndex()]).softDeleteRetentionInDays]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "tenantId": {
                        "value": "[union(variables('defaultResourceProperties').managedHsm, variables('resourceDefinitions').managedHsms[copyIndex()]).tenantId]"
                    },
                    "virtualNetworkRules": {
                        "value": "[union(variables('defaultResourceProperties').managedHsm, variables('resourceDefinitions').managedHsms[copyIndex()]).virtualNetworkRules]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.KeyVault/managedHSMs.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').communicationServices))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').communicationServices)]",
                "mode": "Parallel",
                "name": "communicationServicesCopy"
            },
            "dependsOn": [
                "logAnalyticsWorkspacesCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').communicationService, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').communicationService, variables('resourceDefinitions').communicationServices[copyIndex()]).audit]"
                    },
                    "dataLocation": {
                        "value": "[union(variables('defaultResourceProperties').communicationService, variables('resourceDefinitions').communicationServices[copyIndex()]).dataLocation]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').communicationServices[copyIndex()].name]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Communication/communicationServices.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').applicationConfigurationStores))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').applicationConfigurationStores)]",
                "mode": "Parallel",
                "name": "applicationConfigurationStoresCopy"
            },
            "dependsOn": [
                "keyVaultsCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').applicationConfigurationStore, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "customerManagedEncryption": {
                        "value": "[union(variables('defaultResourceProperties').applicationConfigurationStore, variables('resourceDefinitions').applicationConfigurationStores[copyIndex()]).customerManagedEncryption]"
                    },
                    "isPublicNetworkAccessEnabled": {
                        "value": "[union(variables('defaultResourceProperties').applicationConfigurationStore, variables('resourceDefinitions').applicationConfigurationStores[copyIndex()]).isPublicNetworkAccessEnabled]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').applicationConfigurationStores[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').applicationConfigurationStores[copyIndex()].name]"
                    },
                    "privateEndpoints": {
                        "value": "[union(variables('defaultResourceProperties').applicationConfigurationStore, variables('resourceDefinitions').applicationConfigurationStores[copyIndex()]).privateEndpoints]"
                    },
                    "settings": {
                        "value": "[union(variables('defaultResourceProperties').applicationConfigurationStore, variables('resourceDefinitions').applicationConfigurationStores[copyIndex()]).settings]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').applicationConfigurationStore, variables('resourceDefinitions').applicationConfigurationStores[copyIndex()]).skuName]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.AppConfiguration/configurationStores.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').recoveryServicesVaults))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').recoveryServicesVaults)]",
                "mode": "Parallel",
                "name": "recoveryServicesVaultsCopy"
            },
            "dependsOn": [
                "keyVaultsCopy",
                "logAnalyticsWorkspacesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').recoveryServicesVault, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').recoveryServicesVault, variables('resourceDefinitions').recoveryServicesVaults[copyIndex()]).audit]"
                    },
                    "backup": {
                        "value": "[union(variables('defaultResourceProperties').recoveryServicesVault, variables('resourceDefinitions').recoveryServicesVaults[copyIndex()]).backup]"
                    },
                    "customerManagedEncryption": {
                        "value": "[union(variables('defaultResourceProperties').recoveryServicesVault, variables('resourceDefinitions').recoveryServicesVaults[copyIndex()]).customerManagedEncryption]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').recoveryServicesVaults[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').recoveryServicesVaults[copyIndex()].name]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.RecoveryServices/vaults.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').containerRegistries))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').containerRegistries)]",
                "mode": "Parallel",
                "name": "containerRegistriesCopy"
            },
            "dependsOn": [
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').containerRegistry, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "customerManagedEncryption": {
                        "value": "[union(variables('defaultResourceProperties').containerRegistry, variables('resourceDefinitions').containerRegistries[copyIndex()]).customerManagedEncryption]"
                    },
                    "firewallRules": {
                        "value": "[union(variables('defaultResourceProperties').containerRegistry, variables('resourceDefinitions').containerRegistries[copyIndex()]).firewallRules]"
                    },
                    "identity": {
                        "value": "[union(variables('defaultResourceProperties').containerRegistry, variables('resourceDefinitions').containerRegistries[copyIndex()]).identity]"
                    },
                    "isAdministratorAccountEnabled": {
                        "value": "[union(variables('defaultResourceProperties').containerRegistry, variables('resourceDefinitions').containerRegistries[copyIndex()]).isAdministratorAccountEnabled]"
                    },
                    "isAllowTrustedMicrosoftServicesEnabled": {
                        "value": "[union(variables('defaultResourceProperties').containerRegistry, variables('resourceDefinitions').containerRegistries[copyIndex()]).isAllowTrustedMicrosoftServicesEnabled]"
                    },
                    "isAnonymousPullEnabled": {
                        "value": "[union(variables('defaultResourceProperties').containerRegistry, variables('resourceDefinitions').containerRegistries[copyIndex()]).isAnonymousPullEnabled]"
                    },
                    "isDedicatedDataEndpointEnabled": {
                        "value": "[union(variables('defaultResourceProperties').containerRegistry, variables('resourceDefinitions').containerRegistries[copyIndex()]).isDedicatedDataEndpointEnabled]"
                    },
                    "isPublicNetworkAccessEnabled": {
                        "value": "[union(variables('defaultResourceProperties').containerRegistry, variables('resourceDefinitions').containerRegistries[copyIndex()]).isPublicNetworkAccessEnabled]"
                    },
                    "isZoneRedundant": {
                        "value": "[union(variables('defaultResourceProperties').containerRegistry, variables('resourceDefinitions').containerRegistries[copyIndex()]).isZoneRedundant]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').containerRegistries[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').containerRegistries[copyIndex()].name]"
                    },
                    "privateEndpoints": {
                        "value": "[union(variables('defaultResourceProperties').containerRegistry, variables('resourceDefinitions').containerRegistries[copyIndex()]).privateEndpoints]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').containerRegistry, variables('resourceDefinitions').containerRegistries[copyIndex()]).skuName]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "virtualNetworkRules": {
                        "value": "[union(variables('defaultResourceProperties').containerRegistry, variables('resourceDefinitions').containerRegistries[copyIndex()]).virtualNetworkRules]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.ContainerRegistry/registries.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').sharedImageGalleries))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').sharedImageGalleries)]",
                "mode": "Parallel",
                "name": "sharedImageGalleriesCopy"
            },
            "dependsOn": [
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').sharedImageGallery, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "description": {
                        "value": "[union(variables('defaultResourceProperties').sharedImageGallery, variables('resourceDefinitions').availabilitySets[copyIndex()]).description]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').sharedImageGalleries[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').sharedImageGalleries[copyIndex()].name]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Compute/galleries.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').proximityPlacementGroups))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').proximityPlacementGroups)]",
                "mode": "Parallel",
                "name": "proximityPlacementGroupsCopy"
            },
            "dependsOn": [
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').proximityPlacementGroup, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').proximityPlacementGroups[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').proximityPlacementGroups[copyIndex()].name]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Compute/proximityPlacementGroups.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').availabilitySets))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').availabilitySets)]",
                "mode": "Parallel",
                "name": "availabilitySetsCopy"
            },
            "dependsOn": [
                "proximityPlacementGroupsCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').availabilitySet, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').availabilitySets[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').availabilitySets[copyIndex()].name]"
                    },
                    "numberOfFaultDomains": {
                        "value": "[union(variables('defaultResourceProperties').availabilitySet, variables('resourceDefinitions').availabilitySets[copyIndex()]).numberOfFaultDomains]"
                    },
                    "numberOfUpdateDomains": {
                        "value": "[union(variables('defaultResourceProperties').availabilitySet, variables('resourceDefinitions').availabilitySets[copyIndex()]).numberOfUpdateDomains]"
                    },
                    "proximityPlacementGroup": {
                        "value": "[union(variables('defaultResourceProperties').availabilitySet, variables('resourceDefinitions').availabilitySets[copyIndex()]).proximityPlacementGroup]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').availabilitySet, variables('resourceDefinitions').availabilitySets[copyIndex()]).skuName]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Compute/availabilitySets.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').diskEncryptionSets))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').diskEncryptionSets)]",
                "mode": "Parallel",
                "name": "diskEncryptionSetsCopy"
            },
            "dependsOn": [
                "keyVaultsCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').diskEncryptionSet, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "isDoubleEncryptionAtRestEnabled": {
                        "value": "[union(variables('defaultResourceProperties').diskEncryptionSet, variables('resourceDefinitions').diskEncryptionSets[copyIndex()]).isDoubleEncryptionAtRestEnabled]"
                    },
                    "keyName": {
                        "value": "[variables('resourceDefinitions').diskEncryptionSets[copyIndex()].keyName]"
                    },
                    "keyVaultName": {
                        "value": "[variables('resourceDefinitions').diskEncryptionSets[copyIndex()].keyVaultName]"
                    },
                    "keyVaultResourceGroupName": {
                        "value": "[union(variables('defaultResourceProperties').diskEncryptionSet, variables('resourceDefinitions').diskEncryptionSets[copyIndex()]).keyVaultResourceGroupName]"
                    },
                    "keyVaultSubscriptionId": {
                        "value": "[union(variables('defaultResourceProperties').diskEncryptionSet, variables('resourceDefinitions').diskEncryptionSets[copyIndex()]).keyVaultSubscriptionId]"
                    },
                    "keyVersion": {
                        "value": "[union(variables('defaultResourceProperties').diskEncryptionSet, variables('resourceDefinitions').diskEncryptionSets[copyIndex()]).keyVersion]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').diskEncryptionSets[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').diskEncryptionSets[copyIndex()].name]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Compute/diskEncryptionSets.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').hostGroups))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').hostGroups)]",
                "mode": "Parallel",
                "name": "hostGroupsCopy"
            },
            "dependsOn": [
                "logAnalyticsWorkspacesCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').hostGroup, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "availabilityZones": {
                        "value": "[union(variables('defaultResourceProperties').hostGroup, variables('resourceDefinitions').hostGroups[copyIndex()]).availabilityZones]"
                    },
                    "hosts": {
                        "value": "[union(variables('defaultResourceProperties').hostGroup, variables('resourceDefinitions').hostGroups[copyIndex()]).hosts]"
                    },
                    "isAutomaticPlacementEnabled": {
                        "value": "[union(variables('defaultResourceProperties').hostGroup, variables('resourceDefinitions').hostGroups[copyIndex()]).isAutomaticPlacementEnabled]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').hostGroups[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').hostGroups[copyIndex()].name]"
                    },
                    "numberOfFaultDomains": {
                        "value": "[union(variables('defaultResourceProperties').hostGroup, variables('resourceDefinitions').hostGroups[copyIndex()]).numberOfFaultDomains]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Compute/hostGroups.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').automationAccounts))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').automationAccounts)]",
                "mode": "Parallel",
                "name": "automationAccountsCopy"
            },
            "dependsOn": [
                "applicationSecurityGroupsCopy",
                "diskEncryptionSetsCopy",
                "privateDnsZonesCopy",
                "publicDnsZonesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').automationAccount, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "desiredStateConfiguration": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).desiredStateConfiguration]"
                    },
                    "identity": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).identity]"
                    },
                    "isPublicNetworkAccessEnabled": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).isPublicNetworkAccessEnabled]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').automationAccounts[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').automationAccounts[copyIndex()].name]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "webWorker": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).webWorker]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Automation/automationAccounts.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').virtualMachineScaleSets))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').virtualMachineScaleSets)]",
                "mode": "Parallel",
                "name": "virtualMachineScaleSetsCopy"
            },
            "dependsOn": [
                "applicationSecurityGroupsCopy",
                "diskEncryptionSetsCopy",
                "hostGroupsCopy",
                "loadBalancersCopy",
                "privateDnsZonesCopy",
                "publicDnsZonesCopy",
                "recoveryServicesVaultsCopy",
                "scriptsPreDeployCopy",
                "sharedImageGalleriesCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').virtualMachineScaleSet, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).audit]"
                    },
                    "autoscale": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).autoscale]"
                    },
                    "availabilityZones": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).availabilityZones]"
                    },
                    "computerNamePrefix": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).computerNamePrefix]"
                    },
                    "diskEncryptionSet": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).diskEncryptionSet]"
                    },
                    "extensions": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).extensions]"
                    },
                    "host": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).host]"
                    },
                    "identity": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).identity]"
                    },
                    "imageReference": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).imageReference]"
                    },
                    "isOverprovisioningEnabled": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).isOverprovisioningEnabled]"
                    },
                    "isUltraSsdSupportEnabled": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).isUltraSsdSupportEnabled]"
                    },
                    "licenseType": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).licenseType]"
                    },
                    "linuxConfiguration": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).linuxConfiguration]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()].name]"
                    },
                    "networkInterfaceConfigurations": {
                        "value": "[variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()].networkInterfaceConfigurations]"
                    },
                    "numberOfFaultDomains": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).numberOfFaultDomains]"
                    },
                    "numberOfVirtualMachines": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).numberOfVirtualMachines]"
                    },
                    "orchestrationMode": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).orchestrationMode]"
                    },
                    "osDisk": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).osDisk]"
                    },
                    "priority": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).priority]"
                    },
                    "proximityPlacementGroup": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).proximityPlacementGroup]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).skuName]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "windowsConfiguration": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachineScaleSet, variables('resourceDefinitions').virtualMachineScaleSets[copyIndex()]).windowsConfiguration]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Compute/virtualMachineScaleSets.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').virtualMachines))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').virtualMachines)]",
                "mode": "Parallel",
                "name": "virtualMachinesCopy"
            },
            "dependsOn": [
                "applicationSecurityGroupsCopy",
                "availabilitySetsCopy",
                "diskEncryptionSetsCopy",
                "hostGroupsCopy",
                "loadBalancersCopy",
                "privateDnsZonesCopy",
                "publicDnsZonesCopy",
                "recoveryServicesVaultsCopy",
                "scriptsPreDeployCopy",
                "sharedImageGalleriesCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').virtualMachine, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).audit]"
                    },
                    "availabilitySet": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).availabilitySet]"
                    },
                    "backup": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).backup]"
                    },
                    "dataDisks": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).dataDisks]"
                    },
                    "diskEncryptionSet": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).diskEncryptionSet]"
                    },
                    "extensions": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).extensions]"
                    },
                    "host": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).host]"
                    },
                    "identity": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).identity]"
                    },
                    "imageReference": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).imageReference]"
                    },
                    "isEncryptionAtHostEnabled": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).isEncryptionAtHostEnabled]"
                    },
                    "isSecureBootEnabled": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).isSecureBootEnabled]"
                    },
                    "isUltraSsdSupportEnabled": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).isUltraSsdSupportEnabled]"
                    },
                    "isVirtualTrustedPlatformModuleEnabled": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).isVirtualTrustedPlatformModuleEnabled]"
                    },
                    "isVulnerabilityAssessmentEnabled": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).isVulnerabilityAssessmentEnabled]"
                    },
                    "justInTimeAccess": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).justInTimeAccess]"
                    },
                    "licenseType": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).licenseType]"
                    },
                    "linuxConfiguration": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).linuxConfiguration]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').virtualMachines[copyIndex()]).location]"
                    },
                    "networkInterfaceCards": {
                        "value": "[variables('resourceDefinitions').virtualMachines[copyIndex()].networkInterfaceCards]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').virtualMachines[copyIndex()].name]"
                    },
                    "osDisk": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).osDisk]"
                    },
                    "priority": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).priority]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).skuName]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "windowsConfiguration": {
                        "value": "[union(variables('defaultResourceProperties').virtualMachine, variables('resourceDefinitions').virtualMachines[copyIndex()]).windowsConfiguration]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Compute/virtualMachines.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').containerInstances))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').containerInstances)]",
                "mode": "Parallel",
                "name": "containerInstancesCopy"
            },
            "dependsOn": [
                "containerRegistriesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').containerInstance, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "customerManagedEncryption": {
                        "value": "[union(variables('defaultResourceProperties').containerInstance, variables('resourceDefinitions').containerInstances[copyIndex()]).audit]"
                    },
                    "customerManagedEncryption": {
                        "value": "[union(variables('defaultResourceProperties').containerInstance, variables('resourceDefinitions').containerInstances[copyIndex()]).customerManagedEncryption]"
                    },
                    "containers": {
                        "value": "[variables('resourceDefinitions').containerInstances[copyIndex()].containers]"
                    },
                    "customerManagedEncryption": {
                        "value": "[union(variables('defaultResourceProperties').containerInstance, variables('resourceDefinitions').containerInstances[copyIndex()]).customerManagedEncryption]"
                    },
                    "dnsPrefix": {
                        "value": "[union(createObject('dnsPrefix', toLower(variables('resourceDefinitions').containerInstances[copyIndex()].name)), variables('resourceDefinitions').containerInstances[copyIndex()]).dnsPrefix]"
                    },
                    "identity": {
                        "value": "[union(variables('defaultResourceProperties').containerInstance, variables('resourceDefinitions').containerInstances[copyIndex()]).identity]"
                    },
                    "imageRegistryCredentials": {
                        "value": "[union(variables('defaultResourceProperties').containerInstance, variables('resourceDefinitions').containerInstances[copyIndex()]).imageRegistryCredentials]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').containerInstances[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').containerInstances[copyIndex()].name]"
                    },
                    "operatingSystemName": {
                        "value": "[union(variables('defaultResourceProperties').containerInstance, variables('resourceDefinitions').containerInstances[copyIndex()]).operatingSystemName]"
                    },
                    "ports": {
                        "value": "[union(variables('defaultResourceProperties').containerInstance, variables('resourceDefinitions').containerInstances[copyIndex()]).ports]"
                    },
                    "restartPolicy": {
                        "value": "[union(variables('defaultResourceProperties').containerInstance, variables('resourceDefinitions').containerInstances[copyIndex()]).restartPolicy]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').containerInstance, variables('resourceDefinitions').containerInstances[copyIndex()]).skuName]"
                    },
                    "subnet": {
                        "value": "[union(variables('defaultResourceProperties').containerInstance, variables('resourceDefinitions').containerInstances[copyIndex()]).subnet]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "volumes": {
                        "value": "[union(variables('defaultResourceProperties').containerInstance, variables('resourceDefinitions').containerInstances[copyIndex()]).volumes]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.ContainerInstance/containerGroups.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').storageAccounts))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').storageAccounts)]",
                "mode": "Parallel",
                "name": "storageAccountsCopy"
            },
            "dependsOn": [
                "keyVaultsCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').storageAccount, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "accessTier": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).accessTier]"
                    },
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).audit]"
                    },
                    "blobServices": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).blobServices]"
                    },
                    "customerManagedEncryption": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).customerManagedEncryption]"
                    },
                    "dataLake": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).dataLake]"
                    },
                    "encryptionScopes": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).encryptionScopes]"
                    },
                    "fileServices": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).fileServices]"
                    },
                    "firewallRules": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).firewallRules]"
                    },
                    "identity": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).identity]"
                    },
                    "isAdvancedThreatProtectionEnabled": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).isAdvancedThreatProtectionEnabled]"
                    },
                    "isAllowTrustedMicrosoftServicesEnabled": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).isAllowTrustedMicrosoftServicesEnabled]"
                    },
                    "isPublicNetworkAccessEnabled": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).isPublicNetworkAccessEnabled]"
                    },
                    "isSharedKeyAccessEnabled": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).isSharedKeyAccessEnabled]"
                    },
                    "kind": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).kind]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').storageAccounts[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').storageAccounts[copyIndex()].name]"
                    },
                    "queueServices": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).queueServices]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).skuName]"
                    },
                    "tableServices": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).tableServices]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "virtualNetworkRules": {
                        "value": "[union(variables('defaultResourceProperties').storageAccount, variables('resourceDefinitions').storageAccounts[copyIndex()]).virtualNetworkRules]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Storage/storageAccounts.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').sqlServers))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').sqlServers)]",
                "mode": "Parallel",
                "name": "sqlServersCopy"
            },
            "dependsOn": [
                "keyVaultsCopy",
                "logAnalyticsWorkspacesCopy",
                "privateDnsZonesCopy",
                "publicDnsZonesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').sqlServer, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "activeDirectoryAdministratorObjectId": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).activeDirectoryAdministratorObjectId]"
                    },
                    "activeDirectoryAdministratorTenantId": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).activeDirectoryAdministratorTenantId]"
                    },
                    "activeDirectoryAdministratorUserName": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).activeDirectoryAdministratorUserName]"
                    },
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).audit]"
                    },
                    "connectionPolicy": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).connectionPolicy]"
                    },
                    "customerManagedEncryption": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).customerManagedEncryption]"
                    },
                    "dnsAliases": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).dnsAliases]"
                    },
                    "elasticPools": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).elasticPools]"
                    },
                    "firewallRules": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).firewallRules]"
                    },
                    "identity": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).identity]"
                    },
                    "isAllowTrustedMicrosoftServicesEnabled": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).isAllowTrustedMicrosoftServicesEnabled]"
                    },
                    "isPublicNetworkAccessEnabled": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).isPublicNetworkAccessEnabled]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').sqlServers[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').sqlServers[copyIndex()].name]"
                    },
                    "privateEndpoints": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).privateEndpoints]"
                    },
                    "serverVersion": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).serverVersion]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "virtualNetworkRules": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).virtualNetworkRules]"
                    },
                    "vulnerabilityAssessment": {
                        "value": "[union(variables('defaultResourceProperties').sqlServer, variables('resourceDefinitions').sqlServers[copyIndex()]).vulnerabilityAssessment]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Sql/servers.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').sqlDatabases))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').sqlDatabases)]",
                "mode": "Parallel",
                "name": "sqlDatabasesCopy"
            },
            "dependsOn": [
                "keyVaultsCopy",
                "logAnalyticsWorkspacesCopy",
                "privateDnsZonesCopy",
                "publicDnsZonesCopy",
                "scriptsPreDeployCopy",
                "sqlServersCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').sqlDatabases, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').sqlDatabase, variables('resourceDefinitions').sqlDatabases[copyIndex()]).audit]"
                    },
                    "catalogCollation": {
                        "value": "[union(variables('defaultResourceProperties').sqlDatabase, variables('resourceDefinitions').sqlDatabases[copyIndex()]).catalogCollation]"
                    },
                    "defaultCollation": {
                        "value": "[union(variables('defaultResourceProperties').sqlDatabase, variables('resourceDefinitions').sqlDatabases[copyIndex()]).defaultCollation]"
                    },
                    "elasticPoolName": {
                        "value": "[union(variables('defaultResourceProperties').sqlDatabase, variables('resourceDefinitions').sqlDatabases[copyIndex()]).elasticPoolName]"
                    },
                    "isAzureHybridBenefitEnabled": {
                        "value": "[union(variables('defaultResourceProperties').sqlDatabase, variables('resourceDefinitions').sqlDatabases[copyIndex()]).isAzureHybridBenefitEnabled]"
                    },
                    "isZoneRedundant": {
                        "value": "[union(variables('defaultResourceProperties').sqlDatabase, variables('resourceDefinitions').sqlDatabases[copyIndex()]).isZoneRedundant]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').sqlDatabases[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').sqlDatabases[copyIndex()].name]"
                    },
                    "serverName": {
                        "value": "[variables('resourceDefinitions').sqlDatabases[copyIndex()].name]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').sqlDatabase, variables('resourceDefinitions').sqlDatabases[copyIndex()]).skuName]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Sql/databases.json"
                }
            },
            "resourceGroup": "[union(variables('defaultResourceProperties').sqlDatabase, variables('resourceDefinitions').sqlDatabases[copyIndex()]).resourceGroupName]",
            "subscriptionId": "[union(variables('defaultResourceProperties').sqlDatabase, variables('resourceDefinitions').sqlDatabases[copyIndex()]).subscriptionId]",
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').cosmosDbAccounts))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').cosmosDbAccounts)]",
                "mode": "Parallel",
                "name": "cosmosDbAccountsCopy"
            },
            "dependsOn": [
                "keyVaultsCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').cosmosDbAccount, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "consistencyPolicy": {
                        "value": "[union(variables('defaultResourceProperties').cosmosDbAccount, variables('resourceDefinitions').cosmosDbAccounts[copyIndex()]).consistencyPolicy]"
                    },
                    "firewallRules": {
                        "value": "[union(variables('defaultResourceProperties').cosmosDbAccount, variables('resourceDefinitions').cosmosDbAccounts[copyIndex()]).firewallRules]"
                    },
                    "geoReplicationLocations": {
                        "value": "[union(variables('defaultResourceProperties').cosmosDbAccount, variables('resourceDefinitions').cosmosDbAccounts[copyIndex()]).geoReplicationLocations]"
                    },
                    "isAzurePortalAccessEnabled": {
                        "value": "[union(variables('defaultResourceProperties').cosmosDbAccount, variables('resourceDefinitions').cosmosDbAccounts[copyIndex()]).isAzurePortalAccessEnabled]"
                    },
                    "isAzurePublicDatacenterAccessEnabled": {
                        "value": "[union(variables('defaultResourceProperties').cosmosDbAccount, variables('resourceDefinitions').cosmosDbAccounts[copyIndex()]).isAzurePublicDatacenterAccessEnabled]"
                    },
                    "isFreeTierEnabled": {
                        "value": "[union(variables('defaultResourceProperties').cosmosDbAccount, variables('resourceDefinitions').cosmosDbAccounts[copyIndex()]).isFreeTierEnabled]"
                    },
                    "kind": {
                        "value": "[union(variables('defaultResourceProperties').cosmosDbAccount, variables('resourceDefinitions').cosmosDbAccounts[copyIndex()]).kind]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').cosmosDbAccounts[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').cosmosDbAccounts[copyIndex()].name]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "virtualNetworkRules": {
                        "value": "[union(variables('defaultResourceProperties').cosmosDbAccount, variables('resourceDefinitions').cosmosDbAccounts[copyIndex()]).virtualNetworkRules]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.DocumentDB/databaseAccounts.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').kubernetesServiceClusters))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').kubernetesServiceClusters)]",
                "mode": "Parallel",
                "name": "kubernetesServiceClustersCopy"
            },
            "dependsOn": [
                "diskEncryptionSetsCopy",
                "keyVaultsCopy",
                "managedIdentitiesCopy",
                "privateDnsZonesCopy",
                "publicDnsZonesCopy",
                "routeTablesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').kubernetesServiceCluster, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "administratorObjectIds": {
                        "value": "[variables('resourceDefinitions').kubernetesServiceClusters[copyIndex()].administratorObjectIds]"
                    },
                    "agentPoolProfiles": {
                        "value": "[union(variables('defaultResourceProperties').kubernetesServiceCluster, variables('resourceDefinitions').kubernetesServiceClusters[copyIndex()]).agentPoolProfiles]"
                    },
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').kubernetesServiceCluster, variables('resourceDefinitions').kubernetesServiceClusters[copyIndex()]).audit]"
                    },
                    "customerManagedEncryption": {
                        "value": "[union(variables('defaultResourceProperties').kubernetesServiceCluster, variables('resourceDefinitions').kubernetesServiceClusters[copyIndex()]).customerManagedEncryption]"
                    },
                    "dnsPrefix": {
                        "value": "[union(createObject('dnsPrefix', variables('resourceDefinitions').publicIpAddresses[copyIndex()].name), variables('resourceDefinitions').kubernetesServiceClusters[copyIndex()]).dnsPrefix]"
                    },
                    "identity": {
                        "value": "[union(variables('defaultResourceProperties').kubernetesServiceCluster, variables('resourceDefinitions').kubernetesServiceClusters[copyIndex()]).identity]"
                    },
                    "kubernetesVersion": {
                        "value": "[union(variables('defaultResourceProperties').kubernetesServiceCluster, variables('resourceDefinitions').kubernetesServiceClusters[copyIndex()]).kubernetesVersion]"
                    },
                    "linuxProfile": {
                        "value": "[union(variables('defaultResourceProperties').kubernetesServiceCluster, variables('resourceDefinitions').kubernetesServiceClusters[copyIndex()]).linuxProfile]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').kubernetesServiceClusters[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').kubernetesServiceClusters[copyIndex()].name]"
                    },
                    "networking": {
                        "value": "[union(variables('defaultResourceProperties').kubernetesServiceCluster, variables('resourceDefinitions').kubernetesServiceClusters[copyIndex()]).networking]"
                    },
                    "nodeResourceGroupName": {
                        "value": "[union(variables('defaultResourceProperties').kubernetesServiceCluster, variables('resourceDefinitions').kubernetesServiceClusters[copyIndex()]).nodeResourceGroupName]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "windowsProfile": {
                        "value": "[union(variables('defaultResourceProperties').kubernetesServiceCluster, variables('resourceDefinitions').kubernetesServiceClusters[copyIndex()]).windowsProfile]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.ContainerService/managedClusters.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').hdInsightClusters))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').hdInsightClusters)]",
                "mode": "Parallel",
                "name": "hdInsightClustersCopy"
            },
            "dependsOn": [
                "scriptsPreDeployCopy",
                "sqlServersCopy",
                "storageAccountsCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').hdInsightCluster, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "clusterAdministratorUserName": {
                        "value": "[union(createObject('clusterAdministratorUserName', uniqueString(variables('resourceDefinitions').hdInsightClusters[copyIndex()].name)), variables('resourceDefinitions').hdInsightClusters[copyIndex()]).clusterAdministratorUserName]"
                    },
                    "configurationProfile": {
                        "value": "[union(variables('defaultResourceProperties').hdInsightCluster, variables('resourceDefinitions').hdInsightClusters[copyIndex()]).configurationProfile]"
                    },
                    "computeProfile": {
                        "value": "[union(variables('defaultResourceProperties').hdInsightCluster, variables('resourceDefinitions').hdInsightClusters[copyIndex()]).computeProfile]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').hdInsightClusters[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').hdInsightClusters[copyIndex()].name]"
                    },
                    "operatingSystem": {
                        "value": "[union(variables('defaultResourceProperties').hdInsightCluster, variables('resourceDefinitions').hdInsightClusters[copyIndex()]).operatingSystem]"
                    },
                    "sshPublicKey": {
                        "value": "[variables('resourceDefinitions').hdInsightClusters[copyIndex()].sshPublicKey]"
                    },
                    "sshUserName": {
                        "value": "[union(createObject('sshUserName', uniqueString(variables('resourceDefinitions').hdInsightClusters[copyIndex()].name)), variables('resourceDefinitions').hdInsightClusters[copyIndex()]).sshUserName]"
                    },
                    "storageProfile": {
                        "value": "[union(variables('defaultResourceProperties').hdInsightCluster, variables('resourceDefinitions').hdInsightClusters[copyIndex()]).storageProfile]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "version": {
                        "value": "[union(variables('defaultResourceProperties').hdInsightCluster, variables('resourceDefinitions').hdInsightClusters[copyIndex()]).version]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.HDInsight/clusters.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').applicationServiceEnvironments))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').applicationServiceEnvironments)]",
                "mode": "Parallel",
                "name": "applicationServiceEnvironmentsCopy"
            },
            "dependsOn": [
                "cdnProfilesCopy",
                "privateDnsZonesCopy",
                "publicDnsZonesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').applicationServiceEnvironment, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').applicationServiceEnvironment, variables('resourceDefinitions').applicationServiceEnvironments[copyIndex()]).audit]"
                    },
                    "isDedicatedHostGroup": {
                        "value": "[union(variables('defaultResourceProperties').applicationServiceEnvironment, variables('resourceDefinitions').applicationServiceEnvironments[copyIndex()]).isDedicatedHostGroup]"
                    },
                    "isInternalEncryptionEnabled": {
                        "value": "[union(variables('defaultResourceProperties').applicationServiceEnvironment, variables('resourceDefinitions').applicationServiceEnvironments[copyIndex()]).isInternalEncryptionEnabled]"
                    },
                    "isMinimalSslCipherSuiteConfigurationEnabled": {
                        "value": "[union(variables('defaultResourceProperties').applicationServiceEnvironment, variables('resourceDefinitions').applicationServiceEnvironments[copyIndex()]).isMinimalSslCipherSuiteConfigurationEnabled]"
                    },
                    "isZoneRedundant": {
                        "value": "[union(variables('defaultResourceProperties').applicationServiceEnvironment, variables('resourceDefinitions').applicationServiceEnvironments[copyIndex()]).isZoneRedundant]"
                    },
                    "kind": {
                        "value": "[union(variables('defaultResourceProperties').applicationServiceEnvironment, variables('resourceDefinitions').applicationServiceEnvironments[copyIndex()]).kind]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').applicationServiceEnvironments[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').applicationServiceEnvironments[copyIndex()].name]"
                    },
                    "privateDnsZone": {
                        "value": "[union(variables('defaultResourceProperties').applicationServiceEnvironment, variables('resourceDefinitions').applicationServiceEnvironments[copyIndex()]).privateDnsZone]"
                    },
                    "subnet": {
                        "value": "[variables('resourceDefinitions').applicationServiceEnvironments[copyIndex()].subnet]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "virtualIpType": {
                        "value": "[union(variables('defaultResourceProperties').applicationServiceEnvironment, variables('resourceDefinitions').applicationServiceEnvironments[copyIndex()]).virtualIpType]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Web/hostingEnvironments.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').applicationServicePlans))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').applicationServicePlans)]",
                "mode": "Parallel",
                "name": "applicationServicePlansCopy"
            },
            "dependsOn": [
                "applicationServiceEnvironmentsCopy",
                "privateDnsZonesCopy",
                "publicDnsZonesCopy",
                "scriptsPreDeployCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').applicationServicePlan, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').applicationServicePlan, variables('resourceDefinitions').applicationServicePlans[copyIndex()]).audit]"
                    },
                    "autoscale": {
                        "value": "[union(variables('defaultResourceProperties').applicationServicePlan, variables('resourceDefinitions').applicationServicePlans[copyIndex()]).autoscale]"
                    },
                    "isPerSiteScalingEnabled": {
                        "value": "[union(variables('defaultResourceProperties').applicationServicePlan, variables('resourceDefinitions').applicationServicePlans[copyIndex()]).isPerSiteScalingEnabled]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').applicationServicePlans[copyIndex()]).location]"
                    },
                    "maximumElasticWorkerCount": {
                        "value": "[union(variables('defaultResourceProperties').applicationServicePlan, variables('resourceDefinitions').applicationServicePlans[copyIndex()]).maximumElasticWorkerCount]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').applicationServicePlans[copyIndex()].name]"
                    },
                    "operatingSystemName": {
                        "value": "[union(variables('defaultResourceProperties').applicationServicePlan, variables('resourceDefinitions').applicationServicePlans[copyIndex()]).operatingSystemName]"
                    },
                    "serviceEnvironment": {
                        "value": "[union(variables('defaultResourceProperties').applicationServicePlan, variables('resourceDefinitions').applicationServicePlans[copyIndex()]).serviceEnvironment]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').applicationServicePlan, variables('resourceDefinitions').applicationServicePlans[copyIndex()]).skuName]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Web/serverfarms.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').staticWebApplications))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').staticWebApplications)]",
                "mode": "Parallel",
                "name": "staticWebApplicationsCopy"
            },
            "dependsOn": [
                "applicationInsightsComponentsCopy",
                "cdnProfilesCopy",
                "containerRegistriesCopy",
                "keyVaultsCopy",
                "privateDnsZonesCopy",
                "publicDnsZonesCopy",
                "scriptsPreDeployCopy",
                "sqlServersCopy",
                "storageAccountsCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').staticWebApplication, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').staticWebApplications[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').staticWebApplications[copyIndex()].name]"
                    },
                    "privateEndpoints": {
                        "value": "[union(variables('defaultResourceProperties').staticWebApplication, variables('resourceDefinitions').staticWebApplications[copyIndex()]).privateEndpoints]"
                    },
                    "skuName": {
                        "value": "[union(variables('defaultResourceProperties').staticWebApplication, variables('resourceDefinitions').staticWebApplications[copyIndex()]).skuName]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Web/staticSites.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').webApplications))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').webApplications)]",
                "mode": "Parallel",
                "name": "webApplicationsCopy"
            },
            "dependsOn": [
                "applicationInsightsComponentsCopy",
                "applicationServiceEnvironmentsCopy",
                "applicationServicePlansCopy",
                "cdnProfilesCopy",
                "containerRegistriesCopy",
                "keyVaultsCopy",
                "privateDnsZonesCopy",
                "publicDnsZonesCopy",
                "scriptsPreDeployCopy",
                "sqlServersCopy",
                "storageAccountsCopy",
                "subnetsCopy",
                "virtualNetworksCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').webApplication, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).audit]"
                    },
                    "autoHeal": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).autoHeal]"
                    },
                    "applicationSettings": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).applicationSettings]"
                    },
                    "connectionStrings": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).connectionStrings]"
                    },
                    "cors": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).cors]"
                    },
                    "customDomains": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).customDomains]"
                    },
                    "dnsZones": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).dnsZones]"
                    },
                    "frameworkVersion": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).frameworkVersion]"
                    },
                    "functionExtension": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).functionExtension]"
                    },
                    "healthCheck": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).healthCheck]"
                    },
                    "ipSecurityRestrictions": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).ipSecurityRestrictions]"
                    },
                    "isAlwaysOnEnabled": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).isAlwaysOnEnabled]"
                    },
                    "isClientAffinityEnabled": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).isClientAffinityEnabled]"
                    },
                    "isHttpsOnlyModeEnabled": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).isHttpsOnlyModeEnabled]"
                    },
                    "isHttp20SupportEnabled": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).isHttp20SupportEnabled]"
                    },
                    "isWebSocketSupportEnabled": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).isWebSocketSupportEnabled]"
                    },
                    "is32BitModeEnabled": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).is32BitModeEnabled]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').webApplications[copyIndex()]).location]"
                    },
                    "logging": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).logging]"
                    },
                    "metadata": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).metadata]"
                    },
                    "minimumSupportedTlsVersion": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).minimumSupportedTlsVersion]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').webApplications[copyIndex()].name]"
                    },
                    "privateCertificates": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).privateCertificates]"
                    },
                    "privateEndpoints": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).privateEndpoints]"
                    },
                    "publicCertificates": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).publicCertificates]"
                    },
                    "remoteDebugging": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).remoteDebugging]"
                    },
                    "scmIpSecurityRestrictions": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).scmIpSecurityRestrictions]"
                    },
                    "servicePlan": {
                        "value": "[variables('resourceDefinitions').webApplications[copyIndex()].servicePlan]"
                    },
                    "subnet": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).subnet]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "timeZone": {
                        "value": "[union(variables('defaultResourceProperties').webApplication, variables('resourceDefinitions').webApplications[copyIndex()]).timeZone]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Web/sites.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').logic.applications))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').logic.applications)]",
                "mode": "Parallel",
                "name": "logicApplicationWorkflowsCopy"
            },
            "dependsOn": [
                "logAnalyticsWorkspacesCopy",
                "scriptsPreDeployCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').logicApplicationWorkflow, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "audit": {
                        "value": "[union(variables('defaultResourceProperties').logic.application, variables('resourceDefinitions').logic.applications[copyIndex()]).audit]"
                    },
                    "isEnabled": {
                        "value": "[union(variables('defaultResourceProperties').logic.application, variables('resourceDefinitions').logic.applications[copyIndex()]).isEnabled]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').logic.applications[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').logic.applications[copyIndex()].name]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Logic/workflows.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').roleAssignments))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').roleAssignments)]",
                "mode": "parallel",
                "name": "roleAssignmentsCopy"
            },
            "dependsOn": [
                "applicationConfigurationStoresCopy",
                "applicationInsightsComponentsCopy",
                "applicationSecurityGroupsCopy",
                "applicationServiceEnvironmentsCopy",
                "applicationServicePlansCopy",
                "automationAccountsCopy",
                "availabilitySetsCopy",
                "bastionHostsCopy",
                "cdnProfilesCopy",
                "communicationServicesCopy",
                "containerInstancesCopy",
                "containerRegistriesCopy",
                "cosmosDbAccountsCopy",
                "diskEncryptionSetsCopy",
                "eventGridDomainsCopy",
                "eventGridEventSubcriptionsCopy",
                "eventGridTopicsCopy",
                "eventHubsClustersCopy",
                "eventHubsCopy",
                "eventHubsNamespacesCopy",
                "firewallsCopy",
                "hdInsightClustersCopy",
                "hostGroupsCopy",
                "keyVaultsCopy",
                "kubernetesServiceClustersCopy",
                "loadBalancersCopy",
                "logAnalyticsWorkspacesCopy",
                "logAnalyticsWorkspacesLinkedStorageJoinCopy",
                "logAnalyticsWorkspacesLinkedStorageRbacCopy",
                "logicApplicationWorkflowsCopy",
                "managedHsmsCopy",
                "managedIdentitiesCopy",
                "monitorPrivateLinkScopesCopy",
                "natGatewaysCopy",
                "networkSecurityGroupsCopy",
                "privateDnsZonesCopy",
                "proximityPlacementGroupsCopy",
                "publicDnsZonesCopy",
                "publicIpAddressesCopy",
                "publicIpPrefixesCopy",
                "recoveryServicesVaultsCopy",
                "routeTablesCopy",
                "scriptsPreDeployCopy",
                "serviceBusNamespacesCopy",
                "sharedImageGalleriesCopy",
                "sqlDatabasesCopy",
                "sqlServersCopy",
                "staticWebApplicationsCopy",
                "storageAccountsCopy",
                "subnetsCopy",
                "virtualMachinesCopy",
                "virtualMachineScaleSetsCopy",
                "virtualNetworksCopy",
                "webApplicationsCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').roleAssignment, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "assignee": {
                        "value": "[variables('resourceDefinitions').roleAssignments[copyIndex()].assignee]"
                    },
                    "assignor": {
                        "value": "[variables('resourceDefinitions').roleAssignments[copyIndex()].assignor]"
                    },
                    "roleDefinition": {
                        "value": "[variables('resourceDefinitions').roleAssignments[copyIndex()].roleDefinition]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Authorization/roleAssignments.json"
                }
            },
            "resourceGroup": "[union(variables('defaultResourceProperties').roleAssignment, variables('resourceDefinitions').roleAssignments[copyIndex()]).resourceGroupName]",
            "subscriptionId": "[union(variables('defaultResourceProperties').roleAssignment, variables('resourceDefinitions').roleAssignments[copyIndex()]).subscriptionId]",
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').deployments))]",
            "dependsOn": [
                "applicationConfigurationStoresCopy",
                "applicationInsightsComponentsCopy",
                "applicationSecurityGroupsCopy",
                "applicationServiceEnvironmentsCopy",
                "applicationServicePlansCopy",
                "automationAccountsCopy",
                "availabilitySetsCopy",
                "bastionHostsCopy",
                "cdnProfilesCopy",
                "communicationServicesCopy",
                "containerInstancesCopy",
                "containerRegistriesCopy",
                "cosmosDbAccountsCopy",
                "diskEncryptionSetsCopy",
                "eventGridDomainsCopy",
                "eventGridEventSubcriptionsCopy",
                "eventGridTopicsCopy",
                "eventHubsClustersCopy",
                "eventHubsCopy",
                "eventHubsNamespacesCopy",
                "firewallsCopy",
                "hdInsightClustersCopy",
                "hostGroupsCopy",
                "keyVaultsCopy",
                "kubernetesServiceClustersCopy",
                "loadBalancersCopy",
                "logAnalyticsWorkspacesCopy",
                "logAnalyticsWorkspacesLinkedStorageJoinCopy",
                "logAnalyticsWorkspacesLinkedStorageRbacCopy",
                "logicApplicationWorkflowsCopy",
                "managedHsmsCopy",
                "managedIdentitiesCopy",
                "monitorPrivateLinkScopesCopy",
                "natGatewaysCopy",
                "networkSecurityGroupsCopy",
                "privateDnsZonesCopy",
                "proximityPlacementGroupsCopy",
                "publicDnsZonesCopy",
                "publicIpAddressesCopy",
                "publicIpPrefixesCopy",
                "recoveryServicesVaultsCopy",
                "roleAssignmentsCopy",
                "routeTablesCopy",
                "scriptsPreDeployCopy",
                "serviceBusNamespacesCopy",
                "sharedImageGalleriesCopy",
                "sqlDatabasesCopy",
                "sqlServersCopy",
                "staticWebApplicationsCopy",
                "storageAccountsCopy",
                "subnetsCopy",
                "virtualMachinesCopy",
                "virtualMachineScaleSetsCopy",
                "virtualNetworksCopy",
                "webApplicationsCopy"
            ],
            "copy": {
                "count": "[length(variables('resourceDefinitions').deployments)]",
                "mode": "Parallel",
                "name": "deploymentsCopy"
            },
            "name": "[union(createObject('name', format('{0}_{1}', variables('deploymentNames').deployment, copyIndex())), variables('resourceDefinitions').deployments[copyIndex()]).name]",
            "properties": {
                "mode": "Incremental",
                "parameters": "[union(variables('defaultResourceProperties').deployment, variables('resourceDefinitions').deployments[copyIndex()]).parameters]",
                "templateLink": {
                    "contentVersion": "[union(variables('defaultResourceProperties').deployment, variables('resourceDefinitions').deployments[copyIndex()]).contentVersion]",
                    "id": "[resourceId(union(variables('defaultResourceProperties').deployment, variables('resourceDefinitions').deployments[copyIndex()]).templateSpec.subscriptionId, union(variables('defaultResourceProperties').deployment, variables('resourceDefinitions').deployments[copyIndex()]).templateSpec.resourceGroupName, 'Microsoft.Resources/templateSpecs/versions', union(variables('defaultResourceProperties').deployment, variables('resourceDefinitions').deployments[copyIndex()]).templateSpec.name, union(variables('defaultResourceProperties').deployment, variables('resourceDefinitions').deployments[copyIndex()]).templateSpec.version)]"
                }
            },
            "resourceGroup": "[union(variables('defaultResourceProperties').deployment, variables('resourceDefinitions').deployments[copyIndex()]).resourceGroupName]",
            "subscriptionId": "[union(variables('defaultResourceProperties').deployment, variables('resourceDefinitions').deployments[copyIndex()]).subscriptionId]",
            "type": "Microsoft.Resources/deployments"
        }/*,
        {
            "apiVersion": "[variables('apiVersions').deployment]",
            "condition": "[not(empty(variables('resourceDefinitions').scripts.postDeploy))]",
            "copy": {
                "count": "[length(variables('resourceDefinitions').scripts.postDeploy)]",
                "mode": "parallel",
                "name": "scriptsPostDeployCopy"
            },
            "dependsOn": [
                "applicationConfigurationStoresCopy",
                "applicationInsightsComponentsCopy",
                "applicationSecurityGroupsCopy",
                "applicationServiceEnvironmentsCopy",
                "applicationServicePlansCopy",
                "automationAccountsCopy",
                "availabilitySetsCopy",
                "bastionHostsCopy",
                "cdnProfilesCopy",
                "communicationServicesCopy",
                "containerInstancesCopy",
                "containerRegistriesCopy",
                "cosmosDbAccountsCopy",
                "diskEncryptionSetsCopy",
                "eventGridDomainsCopy",
                "eventGridEventSubcriptionsCopy",
                "eventGridTopicsCopy",
                "eventHubsClustersCopy",
                "eventHubsCopy",
                "eventHubsNamespacesCopy",
                "firewallsCopy",
                "hdInsightClustersCopy",
                "hostGroupsCopy",
                "keyVaultsCopy",
                "kubernetesServiceClustersCopy",
                "loadBalancersCopy",
                "logAnalyticsWorkspacesCopy",
                "logAnalyticsWorkspacesLinkedStorageJoinCopy",
                "logAnalyticsWorkspacesLinkedStorageRbacCopy",
                "logicApplicationWorkflowsCopy",
                "managedHsmsCopy",
                "managedIdentitiesCopy",
                "monitorPrivateLinkScopesCopy",
                "natGatewaysCopy",
                "networkSecurityGroupsCopy",
                "privateDnsZonesCopy",
                "proximityPlacementGroupsCopy",
                "publicDnsZonesCopy",
                "publicIpAddressesCopy",
                "publicIpPrefixesCopy",
                "recoveryServicesVaultsCopy",
                "roleAssignmentsCopy",
                "routeTablesCopy",
                "scriptsPreDeployCopy",
                "serviceBusNamespacesCopy",
                "sharedImageGalleriesCopy",
                "sqlDatabasesCopy",
                "sqlServersCopy",
                "staticWebApplicationsCopy",
                "storageAccountsCopy",
                "subnetsCopy",
                "virtualMachinesCopy",
                "virtualMachineScaleSetsCopy",
                "virtualNetworksCopy",
                "webApplicationsCopy"
            ],
            "name": "[format('{0}_{1}', variables('deploymentNames').scriptPostDeploy, copyIndex())]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "kind": {
                        "value": "[union(variables('defaultResourceProperties').script, variables('resourceDefinitions').scripts.postDeploy[copyIndex()]).kind]"
                    },
                    "location": {
                        "value": "[union(variables('defaultResourceProperties'), variables('resourceDefinitions').scripts.postDeploy[copyIndex()]).location]"
                    },
                    "name": {
                        "value": "[variables('resourceDefinitions').scripts.postDeploy[copyIndex()].name]"
                    },
                    "scriptContent": {
                        "value": "[variables('resourceDefinitions').scripts.postDeploy[copyIndex()].scriptContent]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "[variables('contentVersion')]",
                    "relativePath": "./Microsoft.Resources/deploymentScripts.json"
                }
            },
            "type": "Microsoft.Resources/deployments"
        }*/
    ]
}
