{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "customerManagedEncryption": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the customer-managed encryption settings that will be applied to the Azure Application Configuration Store."
            },
            "type": "object"
        },
        "isPublicNetworkAccessEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the Azure Application Configuration Store is accessible from the internet."
            },
            "type": "bool"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Application Configuration Store resource(s) should be deployed."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 50,
            "metadata": {
                "description": "Specifies the name of the Azure Application Configuration Store."
            },
            "type": "string",
            "minLength": 5
        },
        "privateEndpoints": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of private endpoints that will be linked with the Azure Application Configuration Store."
            },
            "type": "array"
        },
        "settings": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the array of settings that will be housed within the Azure Application Configuration Store."
            },
            "type": "secureObject"
        },
        "skuName": {
            "allowedValues": [
                "Free",
                "Standard"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "Specifies the SKU name of the Azure Application Configuration Store."
            },
            "type": "string"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Application Configuration Store."
            },
            "type": "object"
        }
    },
    "variables": {
        "apiVersions": {
            "configurationStores": "2020-07-01-preview",
            "configurationStoresKeyValues": "2020-07-01-preview",
            "deployments": "2021-04-01",
            "keyVaults": "2019-09-01",
            "privateEndpoints": "2020-07-01",
            "privateEndpointsPrivateDnsZoneGroups": "2020-07-01",
            "roleAssignments": "2020-04-01-preview",
            "userAssignedIdentities": "2018-11-30"
        },
        "configurationStoreManagedIdentityName": "[format('{0}-appconfiguration-managedidentity', parameters('name'))]",
        "customerManagedEncryption": "[union(variables('defaultResourceProperties').customerManagedEncryption, parameters('customerManagedEncryption'))]",
        "customerManagedEncryptionKeyVaultRbacDeploymentName": "[format('{0}-KvRbac', deployment().name)]",
        "defaultResourceProperties": {
            "customerManagedEncryption": {
                "isEnabled": true,
                "keyName": "",
                "keyVault": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "keyVersion": ""
            },
            "privateEndpoint": {
                "dnsZone": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "subnet": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "setting": {
                "contentType": "",
                "tags": {}
            }
        },
        "isCustomerManagedEncryptionEnabled": "[variables('customerManagedEncryption').isEnabled]",
        "privateEndpoints": "[if(variables('privateEndpointsIsNotEmpty'), parameters('privateEndpoints'), createArray(createObject('dnsZones', createArray(), 'name', 'dummyEndpoint')))]",
        "privateEndpointsCount": "[length(parameters('privateEndpoints'))]",
        "privateEndpointsIsNotEmpty": "[greater(variables('privateEndpointsCount'), 0)]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceIds": {
            "configurationStore": "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]",
            "configurationStoreCustomerManagedEncryptionKeyVault": "[resourceId(variables('customerManagedEncryption').keyVault.subscriptionId, variables('customerManagedEncryption').keyVault.resourceGroupName, 'Microsoft.KeyVault/vaults', if(variables('isCustomerManagedEncryptionEnabled'), variables('customerManagedEncryption').keyVault.name, 'dummyKeyVault'))]",
            "configurationStoreCustomerManagedEncryptionKeyVaultRbacDeployment": "[resourceId('Microsoft.Resources/deployments', variables('customerManagedEncryptionKeyVaultRbacDeploymentName'))]",
            "configurationStoreManagedIdentity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('configurationStoreManagedIdentityName'))]",
            "keyVaultCryptoServiceEncryptionUserRoleDefinition": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
        },
        "settings": "[if(variables('settingsIsNotEmpty'), parameters('settings').array, createArray(createObject('name', 'dummySetting')))]",
        "settingsCount": "[length(union(createObject('array', createArray()), parameters('settings')).array)]",
        "settingsIsNotEmpty": "[greater(variables('settingsCount'), 0)]",
        "subscriptionId": "[subscription().subscriptionId]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').userAssignedIdentities]",
            "location": "[parameters('location')]",
            "name": "[variables('configurationStoreManagedIdentityName')]",
            "properties": {},
            "tags": "[parameters('tags')]",
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities"
        },
        {
            "apiVersion": "[variables('apiVersions').deployments]",
            "condition": "[variables('isCustomerManagedEncryptionEnabled')]",
            "dependsOn": [
                "[variables('resourceIds').configurationStoreManagedIdentity]"
            ],
            "name": "[variables('customerManagedEncryptionKeyVaultRbacDeploymentName')]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                    "keyVaultCryptoServiceEncryptionUserRoleDefinitionId": {
                        "value": "[variables('resourceIds').keyVaultCryptoServiceEncryptionUserRoleDefinition]"
                    },
                    "keyVaultId": {
                        "value": "[variables('resourceIds').configurationStoreCustomerManagedEncryptionKeyVault]"
                    },
                    "keyVaultName": {
                        "value": "[variables('customerManagedEncryption').keyVault.name]"
                    },
                    "roleAssignmentsApiVersion": {
                        "value": "[variables('apiVersions').roleAssignments]"
                    },
                    "userAssignedIdentitiesApiVersion": {
                        "value": "[variables('apiVersions').userAssignedIdentities]"
                    },
                    "userAssignedIdentityId": {
                        "value": "[variables('resourceIds').configurationStoreManagedIdentity]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "keyVaultCryptoServiceEncryptionUserRoleDefinitionId": {
                            "type": "string"
                        },
                        "keyVaultId": {
                            "type": "string"
                        },
                        "keyVaultName": {
                            "type": "string"
                        },
                        "roleAssignmentsApiVersion":{
                            "type": "string"
                        },
                        "userAssignedIdentitiesApiVersion": {
                            "type": "string"
                        },
                        "userAssignedIdentityId": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "apiVersion": "[parameters('roleAssignmentsApiVersion')]",
                            "name": "[guid(parameters('userAssignedIdentityId'), parameters('keyVaultCryptoServiceEncryptionUserRoleDefinitionId'), parameters('keyVaultId'))]",
                            "properties": {
                                "principalId": "[reference(parameters('userAssignedIdentityId'), parameters('userAssignedIdentitiesApiVersion'), 'Full').properties.principalId]",
                                "roleDefinitionId": "[parameters('keyVaultCryptoServiceEncryptionUserRoleDefinitionId')]"
                            },
                            "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                            "type": "Microsoft.Authorization/roleAssignments"
                        }
                    ]
                }
            },
            "resourceGroup": "[variables('customerManagedEncryption').keyVault.resourceGroupName]",
            "subscriptionId": "[variables('customerManagedEncryption').keyVault.subscriptionId]",
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').configurationStores]",
            "dependsOn": [
                "[variables('resourceIds').configurationStoreCustomerManagedEncryptionKeyVaultRbacDeployment]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[variables('resourceIds').configurationStoreManagedIdentity]": {}
                }
            },
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": {
                "encryption": {
                    "keyVaultProperties": {
                        "identityClientId": "[if(variables('isCustomerManagedEncryptionEnabled'), reference(variables('resourceIds').configurationStoreManagedIdentity, variables('apiVersions').userAssignedIdentities).clientId, null())]",
                        "keyIdentifier": "[if(variables('isCustomerManagedEncryptionEnabled'), format('{0}keys/{1}{2}', reference(variables('resourceIds').configurationStoreCustomerManagedEncryptionKeyVault, variables('apiVersions').keyVaults).vaultUri, variables('customerManagedEncryption').keyName, if(empty(variables('customerManagedEncryption').keyVersion), '', format('/{1}', variables('customerManagedEncryption').keyVersion))), null())]"
                    }
                },
                "publicNetworkAccess": "[if(parameters('isPublicNetworkAccessEnabled'), 'Enabled', 'Disabled')]"
            },
            "sku": {
                "name": "[parameters('skuName')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.AppConfiguration/configurationStores"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpoints]",
            "condition": "[variables('privateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('privateEndpointsCount')]",
                "mode": "Parallel",
                "name": "privateEndpointsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').configurationStore]"
            ],
            "location": "[parameters('location')]",
            "name": "[variables('privateEndpoints')[copyIndex()].name]",
            "properties": {
                "customDnsConfigs": [],
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('privateEndpoints')[copyIndex()].name]",
                        "properties": {
                            "groupIds": [
                                "configurationStores"
                            ],
                            "privateLinkServiceId": "[variables('resourceIds').configurationStore]"
                        }
                    }
                ],
                "subnet": {
                    "id": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint, variables('privateEndpoints')[copyIndex()]).subnet.subscriptionId, union(variables('defaultResourceProperties').privateEndpoint, variables('privateEndpoints')[copyIndex()]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', variables('privateEndpoints')[copyIndex()].subnet.virtualNetworkName, variables('privateEndpoints')[copyIndex()].subnet.name)]"
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/privateEndpoints"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpointsPrivateDnsZoneGroups]",
            "condition": "[variables('privateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('privateEndpointsCount')]",
                "mode": "Parallel",
                "name": "privateDnsZoneGroupsCopy"
            },
            "dependsOn": [
                "privateEndpointsCopy"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/default', variables('privateEndpoints')[copyIndex()].name)]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(variables('privateEndpoints')[copyIndex()].dnsZones)]",
                        "input": {
                            "name": "[replace(variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name, '.', '-')]",
                            "properties": {
                                "privateDnsZoneId": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).subscriptionId, union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).resourceGroupName, 'Microsoft.Network/privateDnsZones', variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name)]"
                            }
                        },
                        "name": "privateDnsZoneConfigs"
                    }
                ]
            },
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
        },
        {
            "apiVersion": "[variables('apiVersions').configurationStoresKeyValues]",
            "condition": "[variables('settingsIsNotEmpty')]",
            "copy": {
                "count": "[variables('settingsCount')]",
                "mode": "Parallel",
                "name": "settingsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').configurationStore]"
            ],
            "name": "[format('{0}/{1}', parameters('name'), variables('settings')[copyIndex()].name)]",
            "properties": {
                "contentType": "[union(variables('defaultResourceProperties').setting, variables('settings')[copyIndex()]).contentType]",
                "tags": "[union(variables('defaultResourceProperties').setting, variables('settings')[copyIndex()]).tags]",
                "value": "[variables('settings')[copyIndex()].value]"
            },
            "type": "Microsoft.AppConfiguration/configurationStores/keyValues"
        }
    ]
}
