env:
  contentVersion: '3.0.0.0'
name: 'Azure Resource Manager Templates'
on:
  push:
    branches:
      - 'features/**'
      - 'main'
  workflow_dispatch:
    inputs:
      templateSpecCredentials:
        description: 'Template Spec Credentials'
        required: false
      templateSpecResourceGroupName:
        default: 'byteterrace'
        description: 'Template Spec Resource Group Name'
        required: true
      templateSpecSubscriptionIdOrName:
        default: 'byteterrace'
        description: 'Template Spec Subscription Name Or Id'
        required: true
jobs:
  build:
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'checkout Azure Resource Manager template repository'
        uses: 'actions/checkout@v2'
        with:
          clean: true
          fetch-depth: 1
          lfs: false
          path: ${{ format('{0}/project', github.workspace) }}
          submodules: false
      - name: 'transform Azure Resource Manager templates'
        uses: 'microsoft/variable-substitution@v1'
        with:
          files: '/project/**/*.json'
      - name: 'upload Azure Resource Manager template artifact'
        uses: 'actions/upload-artifact@v2'
        with:
          if-no-files-found: 'error'
          name: 'project'
          path: ${{ format('{0}/project/**/*.json', github.workspace) }}
          retention-days: 13
  deploy:
    needs: 'build'
    runs-on: 'ubuntu-latest'
    steps:
      - id: 'maskInputs'
        env:
          TEMPLATESPEC_CREDENTIALS: ${{ secrets.AZURE_APPLICATION_CREDENTIALS }}
        name: 'mask inputs'
        run: |
          if [ -z "${TEMPLATESPEC_CREDENTIALS}" ]; then
              TEMPLATESPEC_CREDENTIALS=$(jq -r '.inputs.templateSpecCredentials' $GITHUB_EVENT_PATH)
              echo ::add-mask::$TEMPLATESPEC_CREDENTIALS
          fi
          echo ::set-output name=templateSpecCredentials::$TEMPLATESPEC_CREDENTIALS
      - name: 'download Azure Resource Manager template artifact'
        uses: 'actions/download-artifact@v2'
        with:
          name: 'project'
          path: ${{ format('{0}/downloads/arm-templates', github.workspace) }}
      - name: 'login to Azure'
        uses: 'azure/login@v1'
        with:
          allow-no-subscriptions: true
          creds: ${{ steps.maskInputs.outputs.templateSpecCredentials }}
          environment: 'AzureCloud'
      - name: 'publish template spec to Azure Resource Group'
        env:
          RESOURCEGROUP_NAME: ${{ fromJSON(secrets.AZURE_RESOURCEGROUP_PROPERTIES).resourceGroupName }}
          SUBSCRIPTION_ID_OR_NAME: ${{ fromJSON(secrets.AZURE_RESOURCEGROUP_PROPERTIES).subscriptionIdOrName }}
        run: |
          if ([string]::IsNullOrEmpty(${Env:RESOURCEGROUP_NAME})) {
              ${Env:RESOURCEGROUP_NAME} = $(jq -r '.inputs.templateSpecResourceGroupName' ${Env:GITHUB_EVENT_PATH});
          }
          if ([string]::IsNullOrEmpty(${Env:SUBSCRIPTION_ID_OR_NAME})) {
              ${Env:SUBSCRIPTION_ID_OR_NAME} = $(jq -r '.inputs.templateSpecSubscriptionIdOrName' ${Env:GITHUB_EVENT_PATH});
          }

          az ts create `
              --name 'ResourceGroupDeployment' `
              --resource-group ${Env:RESOURCEGROUP_NAME} `
              --subscription ${Env:SUBSCRIPTION_ID_OR_NAME} `
              --template-file "${Env:GITHUB_WORKSPACE}/downloads/arm-templates/resourceGroupDeployment.json" `
              --version ${Env:CONTENTVERSION} `
              --yes;
        shell: 'pwsh'
      - name: 'logout of Azure'
        uses: 'azure/CLI@v1'
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
