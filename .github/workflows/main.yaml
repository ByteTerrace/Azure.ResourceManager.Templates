env:
  contentVersion: '3.0.0.0'
name: 'Azure Resource Manager Templates'
on:
  workflow_dispatch:
    inputs:
      templateSpecCredentials:
        description: 'Template Spec Credentials'
        required: true
      templateSpecResourceGroupName:
        default: 'byteterrace'
        description: 'Template Spec Resource Group Name'
        required: true
      templateSpecSubscriptionNameOrId:
        default: 'byteterrace'
        description: 'Template Spec Subscription Name Or Id'
        required: true
jobs:
  build:
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'checkout Azure Resource Manager template repository'
        uses: 'actions/checkout@v2'
        with:
          clean: true
          fetch-depth: 1
          lfs: false
          path: ${{ format('{0}/project', github.workspace) }}
          submodules: false
      - name: 'transform Azure Resource Manager templates'
        uses: 'microsoft/variable-substitution@v1'
        with:
          files: '/project/**/*.json'
      - name: 'upload Azure Resource Manager template artifact'
        uses: 'actions/upload-artifact@v2'
        with:
          if-no-files-found: 'error'
          name: 'project'
          path: ${{ format('{0}/project/**/*.json', github.workspace) }}
          retention-days: 13
  deploy:
    needs: 'build'
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'mask inputs'
        run: |
          INPUT_SECRET_TEMPLATESPEC_APPLICATION_CREDENTIALS=$(jq -r '.inputs.templateSpecSubscriptionNameOrId' $GITHUB_EVENT_PATH)
          echo ::add-mask::$INPUT_SECRET_TEMPLATESPEC_APPLICATION_CREDENTIALS
          echo ::set-output name=templateSpecSubscriptionNameOrId::$INPUT_SECRET_TEMPLATESPEC_APPLICATION_CREDENTIALS
          echo INPUT_SECRET_TEMPLATESPEC_APPLICATION_CREDENTIALS="$INPUT_SECRET_TEMPLATESPEC_APPLICATION_CREDENTIALS" >> $GITHUB_ENV
      - name: 'download Azure Resource Manager template artifact'
        uses: 'actions/download-artifact@v2'
        with:
          name: 'project'
          path: ${{ format('{0}/downloads/arm-templates', github.workspace) }}
      - name: 'login to Azure'
        uses: 'azure/login@v1'
        with:
          allow-no-subscriptions: true
          creds: ${{ env.INPUT_SECRET_TEMPLATESPEC_APPLICATION_CREDENTIALS }}
          environment: 'AzureCloud'
      - name: 'publish template spec to Azure Resource Group'
        run: |
          $resourceGroupName = ${{ format('''{0}''', env.templateSpecResourceGroupName) }};
          $subscriptionIdOrName = ${{ format('''{0}''', fromJSON(env.templateSpecSubscriptionNameOrId).subscriptionIdOrName) }};
          $templateFilePath = ${{ format('''{0}/downloads/arm-templates/resourceGroupDeployment.json''', github.workspace) }};
          $templateName = 'ResourceGroupDeployment';
          $version = ${{ format('''{0}''', env.contentVersion) }};

          az ts create `
              --name $templateName `
              --resource-group $resourceGroupName `
              --subscription $subscriptionIdOrName `
              --template-file $templateFilePath `
              --version $version `
              --yes;
        shell: 'pwsh'
      - name: 'logout of Azure'
        uses: 'azure/CLI@v1'
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
