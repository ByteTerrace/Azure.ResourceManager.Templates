{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "audit": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the audit settings that will be applied to the Azure SignalR Services."
            },
            "type": "object"
        },
        "cors": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the CORS settings that will be applied to the Azure SignalR Services."
            },
            "type": "object"
        },
        "identity": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the properties of the identity that will be assigned to the Azure SignalR Services."
            },
            "type": "object"
        },
        "isPublicNetworkAccessEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the Azure SignalR Services is accessible from the internet."
            },
            "type": "bool"
        },
        "isSharedKeyAccessEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether shared keys are able to be used to access the Azure SignalR Services."
            },
            "type": "bool"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure SignalR Services resource(s) should be deployed."
            },
            "type": "string"
        },
        "name": {
            "metadata": {
                "description": "Specifies the name of the Azure SignalR Services."
            },
            "type": "string"
        },
        "privateEndpoints": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of private endpoints that will be linked with the Azure SignalR Services."
            },
            "type": "array"
        },
        "serverless": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the server-less settings that will be applied to the Azure SignalR Services."
            },
            "type": "object"
        },
        "skuName": {
            "defaultValue": "Standard_S1",
            "metadata": {
                "description": "Specifies the SKU name of the Azure SignalR Services."
            },
            "type": "string"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure SignalR Services."
            },
            "type": "object"
        }
    },
    "variables": {
        "apiVersions": {
            "diagnosticSettings": "2017-05-01-preview",
            "privateEndpoints": "2020-07-01",
            "privateEndpointsPrivateDnsZoneGroups": "2020-07-01",
            "signalrServices": "2021-06-01-preview"
        },
        "audit": "[union(variables('defaultResourceProperties').audit, parameters('audit'))]",
        "cors": "[union(variables('defaultResourceProperties').cors, parameters('cors'))]",
        "defaultResourceProperties": {
            "audit": {
                "isEnabled": true,
                "logAnalyticsWorkspace": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "logNames": [
                    "AllLogs"
                ],
                "retentionPolicy": {
                    "days": 137,
                    "isEnabled": true
                }
            },
            "cors": {
                "allowedOrigins": []
            },
            "identity": {
                "isEnabled": true,
                "type": "[if(greater(variables('userAssignedIdentitiesCount'), 0), 'UserAssigned', 'SystemAssigned')]",
                "userAssignedIdentities": []
            },
            "privateEndpoint": {
                "dnsZone": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "location": "[parameters('location')]",
                "subnet": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "serverless": {
                "isEnabled": false,
                "upstreamTemplates": []
            }
        },
        "features": [
            {
                "flag": "EnableConnectivityLogs",
                "value": "True"
            },
            {
                "flag": "EnableLiveTrace",
                "value": "False"
            },
            {
                "flag": "EnableMessagingLogs",
                "value": "False"
            },
            {
                "flag": "ServiceMode",
                "value": "[if(variables('isServerlessModeEnabled'), 'Serverless', 'Default')]"
            }
        ],
        "identity": "[union(variables('defaultResourceProperties').identity, parameters('identity'))]",
        "isAuditEnabled": "[variables('audit').isEnabled]",
        "isAuditLogAnalyticsWorkspaceNameNotEmpty": "[not(empty(variables('audit').logAnalyticsWorkspace.name))]",
        "isServerlessModeEnabled": "[variables('serverless').isEnabled]",
        "privateEndpointsCount": "[length(parameters('privateEndpoints'))]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceIds": {
            "auditLogAnalyticsWorkspace": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.OperationalInsights/workspaces', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>'))]",
            "signalrService": "[resourceId('Microsoft.SignalRService/signalR', parameters('name'))]"
        },
        "serverless": "[union(variables('defaultResourceProperties').serverless, parameters('serverless'))]",
        "subscriptionId": "[subscription().subscriptionId]",
        "userAssignedIdentitiesCount": "[length(union(createObject('userAssignedIdentities', createArray()), parameters('identity')).userAssignedIdentities)]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').signalrServices]",
            "identity": "[if(variables('identity').isEnabled, union(createObject('type', union(variables('defaultResourceProperties').identity, parameters('identity')).type), if(contains(variables('identity').type, 'UserAssigned'), createObject('userAssignedIdentities', createObject(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', first(variables('identity').userAssignedIdentities).name), createObject())), createObject())), null())]",
            "kind": "SignalR",
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": {
                "cors": {
                    "allowedOrigins": "[if(empty(variables('cors').allowedOrigins), null(), variables('cors').allowedOrigins)]"
                },
                "disableAadAuth": false,
                "disableLocalAuth": "[not(parameters('isSharedKeyAccessEnabled'))]",
                "features": "[variables('features')]",
                "networkACLs": {
                    "defaultAction": "Deny"
                },
                "publicNetworkAccess": "[if(parameters('isPublicNetworkAccessEnabled'), 'Enabled', 'Disabled')]",
                "tls": {
                    "clientCertEnabled": false
                },
                "upstream": {
                    "copy": [
                        {
                            "count": "[length(variables('serverless').upstreamTemplates)]",
                            "input": {
                                "categoryPattern": "[variables('serverless').upstreamTemplates[copyIndex('templates')].categoryPattern]",
                                "eventPattern": "[variables('serverless').upstreamTemplates[copyIndex('templates')].eventPattern]",
                                "hubPattern": "[variables('serverless').upstreamTemplates[copyIndex('templates')].hubPattern]",
                                "urlTemplate": "[variables('serverless').upstreamTemplates[copyIndex('templates')].urlTemplate]"
                            },
                            "name": "templates"
                        }
                    ]
                }
            },
            "sku": {
                "name": "[parameters('skuName')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.SignalRService/signalR"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpoints]",
            "copy": {
                "count": "[variables('privateEndpointsCount')]",
                "mode": "Parallel",
                "name": "privateEndpointsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').signalrService]"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, parameters('privateEndpoints')[copyIndex()]).location]",
            "name": "[parameters('privateEndpoints')[copyIndex()].name]",
            "properties": {
                "customDnsConfigs": [],
                "privateLinkServiceConnections": [
                    {
                        "name": "[parameters('privateEndpoints')[copyIndex()].name]",
                        "properties": {
                            "groupIds": [
                                "signalr"
                            ],
                            "privateLinkServiceId": "[variables('resourceIds').signalrService]"
                        }
                    }
                ],
                "subnet": {
                    "id": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint, parameters('privateEndpoints')[copyIndex()]).subnet.subscriptionId, union(variables('defaultResourceProperties').privateEndpoint, parameters('privateEndpoints')[copyIndex()]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('privateEndpoints')[copyIndex()].subnet.virtualNetworkName, parameters('privateEndpoints')[copyIndex()].subnet.name)]"
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/privateEndpoints"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpointsPrivateDnsZoneGroups]",
            "copy": {
                "count": "[variables('privateEndpointsCount')]",
                "mode": "Parallel",
                "name": "privateDnsZoneGroupsCopy"
            },
            "dependsOn": [
                "privateEndpointsCopy"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, parameters('privateEndpoints')[copyIndex()]).location]",
            "name": "[format('{0}/default', parameters('privateEndpoints')[copyIndex()].name)]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(parameters('privateEndpoints')[copyIndex()].dnsZones)]",
                        "input": {
                            "name": "[replace(parameters('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name, '.', '-')]",
                            "properties": {
                                "privateDnsZoneId": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint.dnsZone, parameters('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).subscriptionId, union(variables('defaultResourceProperties').privateEndpoint.dnsZone, parameters('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).resourceGroupName, 'Microsoft.Network/privateDnsZones', parameters('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name)]"
                            }
                        },
                        "name": "privateDnsZoneConfigs"
                    }
                ]
            },
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "condition": "[or(variables('isAuditEnabled'), variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'))]",
            "dependsOn": [
                "[variables('resourceIds').signalrService]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/Microsoft.Insights/audit', parameters('name'))]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(variables('audit').logNames)]",
                        "input": {
                            "category": "[variables('audit').logNames[copyIndex('logs')]]",
                            "enabled": "[variables('isAuditEnabled')]",
                            "retentionPolicy": {
                                "days": "[variables('audit').retentionPolicy.days]",
                                "enabled": "[variables('audit').retentionPolicy.isEnabled]"
                            }
                        },
                        "name": "logs"
                    }
                ],
                "workspaceId": "[variables('resourceIds').auditLogAnalyticsWorkspace]"
            },
            "type": "Microsoft.SignalRService/signalR/providers/diagnosticsettings"
        }
    ]
}
