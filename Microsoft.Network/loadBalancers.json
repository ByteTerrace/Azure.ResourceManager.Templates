{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "backendAddressPools": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of backend address pools that will be created within the Azure Load Balancer."
            },
            "type": "array"
        },
        "frontendIpConfigurations": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of frontend ip configurations that will be created within the Azure Load Balancer."
            },
            "type": "array"
        },
        "healthProbes": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of health probes that will be created within the Azure Load Balancer."
            },
            "type": "array"
        },
        "inboundNatPools": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of inbound NAT pools that will be created within the Azure Load Balancer."
            },
            "type": "array"
        },
        "inboundNatRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of inbound NAT rules that will be created within the Azure Load Balancer."
            },
            "type": "array"
        },
        "loadBalancingRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of load balancing rules that will be created within the Azure Load Balancer."
            },
            "type": "array"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Load Balancer resource(s) will be deployed."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 80,
            "metadata": {
                "description": "Specifies the name of the Azure Load Balancer."
            },
            "minLength": 1,
            "type": "string"
        },
        "outboundRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of outbound rules that will be created within the Azure Load Balancer."
            },
            "type": "array"
        },
        "skuName": {
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "Specifies the SKU name of the Azure Load Balancer."
            },
            "type": "string"
        },
        "skuTier": {
            "allowedValues": [
                "Global",
                "Regional"
            ],
            "defaultValue": "Regional",
            "metadata": {
                "description": "Specifies the SKU tier of the Azure Load Balancer."
            },
            "type": "string"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Load Balancer."
            },
            "type": "object"
        }
    },
    "variables": {
        "defaultResourceProperties": {
            "backendAddressPool": {},
            "frontendIpConfiguration": {
                "privateIpAddress": {
                    "allocationMethod": "Static",
                    "address": "",
                    "version": "IPv4",
                    "virtualNetwork": {
                        "name": "",
                        "resourceGroupName": "[resourceGroup().name]",
                        "subscriptionId": "[subscription().subscriptionId]"
                    }
                },
                "publicIpAddress": {
                    "name": "",
                    "resourceGroupName": "[resourceGroup().name]",
                    "subscriptionId": "[subscription().subscriptionId]"
                },
                "publicIpPrefix": {
                    "name": "",
                    "resourceGroupName": "[resourceGroup().name]",
                    "subscriptionId": "[subscription().subscriptionId]"
                }
            },
            "healthProbe": {
                "intervalInSeconds": 30,
                "numberOfProbes": 2
            },
            "inboundNatPool": {
                "enableFloatingIp": false,
                "enableTcpReset": false,
                "idleTimeoutInMinutes": 4
            },
            "inboundNatRule": {
                "enableFloatingIp": false,
                "enableTcpReset": false,
                "idleTimeoutInMinutes": 4
            },
            "loadBalancingRule": {
                "distributionMode": "Default",
                "enableFloatingIp": false,
                "enableTcpReset": false,
                "idleTimeoutInMinutes": 4,
                "isOutboundSnatDisabled": false
            },
            "outboundRule": {
                "enableTcpReset": false,
                "idleTimeoutInMinutes": 4
            }
        }
    },
    "resources": [
        {
            "apiVersion": "2020-07-01",
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(parameters('backendAddressPools'))]",
                        "input": {
                            "name": "[parameters('backendAddressPools')[copyIndex('backendAddressPools')].name]"
                        },
                        "name": "backendAddressPools"
                    },
                    {
                        "count": "[length(parameters('frontendIpConfigurations'))]",
                        "input": {
                            "name": "[parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')].name]",
                            "properties": {
                                "privateIPAddress": "[if(not(empty(union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).privateIpAddress.address)), parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')].privateIpAddress.address, null())]",
                                "privateIPAddressVersion": "[if(or(equals(union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).privateIpAddress.allocationMethod, 'Dynamic'), not(empty(union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).privateIpAddress.address))), union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).privateIpAddress.version, null())]",
                                "privateIPAllocationMethod": "[if(or(equals(union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).privateIpAddress.allocationMethod, 'Dynamic'), not(empty(union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).privateIpAddress.address))), union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).privateIpAddress.allocationMethod, null())]",
                                "publicIPAddress": "[if(not(empty(union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).publicIpAddress.name)), createObject('id', resourceId(union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).publicIpAddress.subscriptionId, union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).publicIpAddress.resourceGroupName, 'Microsoft.Network/publicIPAddresses', parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')].publicIpAddress.name)), null())]",
                                "publicIPPrefix": "[if(not(empty(union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).publicIpPrefix.name)), createObject('id', resourceId(union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).publicIpPrefix.subscriptionId, union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).publicIpPrefix.resourceGroupName, 'Microsoft.Network/publicIPPrefixes', parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')].publicIpPrefix.name)), null())]",
                                "subnet": "[if(or(equals(union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).privateIpAddress.allocationMethod, 'Dynamic'), not(empty(union(variables('defaultResourceProperties').frontendIpConfiguration, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')]).privateIpAddress.address))), createObject('id', resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')].privateIpAddress.virtualNetwork.name, parameters('frontendIpConfigurations')[copyIndex('frontendIPConfigurations')].privateIpAddress.virtualNetwork.subnetName)), null())]"
                            }
                        },
                        "name": "frontendIPConfigurations"
                    },
                    {
                        "count": "[length(parameters('inboundNatPools'))]",
                        "input": {
                            "name": "[parameters('inboundNatPools')[copyIndex('inboundNatPools')].name]",
                            "properties": {
                                "backendPort": "[parameters('inboundNatPools')[copyIndex('inboundNatPools')].backendPort]",
                                "enableFloatingIP": "[union(variables('defaultResourceProperties').inboundNatPool, parameters('inboundNatPools')[copyIndex('inboundNatPools')]).enableFloatingIp]",
                                "enableTcpReset": "[if(equals(toUpper(parameters('inboundNatPools')[copyIndex('inboundNatPools')].protocol), 'TCP'), union(variables('defaultResourceProperties').inboundNatPool, parameters('inboundNatPools')[copyIndex('inboundNatPools')]).enableTcpReset, null())]",
                                "idleTimeoutInMinutes": "[if(equals(toUpper(parameters('inboundNatPools')[copyIndex('inboundNatPools')].protocol), 'TCP'), union(variables('defaultResourceProperties').inboundNatPool, parameters('inboundNatPools')[copyIndex('inboundNatPools')]).idleTimeoutInMinutes, null())]",
                                "frontendIPConfiguration": {
                                    "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('name'), parameters('inboundNatPools')[copyIndex('inboundNatPools')].frontendIpConfigurationName)]"
                                },
                                "frontendPortRangeEnd": "[parameters('inboundNatPools')[copyIndex('inboundNatPools')].frontendPortRangeEnd]",
                                "frontendPortRangeStart": "[parameters('inboundNatPools')[copyIndex('inboundNatPools')].frontendPortRangeStart]",
                                "protocol": "[toUpper(parameters('inboundNatPools')[copyIndex('inboundNatPools')].protocol)]"
                            }
                        },
                        "name": "inboundNatPools"
                    },
                    {
                        "count": "[length(parameters('inboundNatRules'))]",
                        "input": {
                            "name": "[parameters('inboundNatRules')[copyIndex('inboundNatRules')].name]",
                            "properties": {
                                "backendPort": "[parameters('inboundNatRules')[copyIndex('inboundNatRules')].backendPort]",
                                "enableFloatingIP": "[union(variables('defaultResourceProperties').inboundNatRule, parameters('inboundNatRules')[copyIndex('inboundNatRules')]).enableFloatingIp]",
                                "enableTcpReset": "[if(equals(toUpper(parameters('inboundNatRules')[copyIndex('inboundNatRules')].protocol), 'TCP'), union(variables('defaultResourceProperties').inboundNatPool, parameters('inboundNatRules')[copyIndex('inboundNatRules')]).enableTcpReset, null())]",
                                "idleTimeoutInMinutes": "[if(equals(toUpper(parameters('inboundNatRules')[copyIndex('inboundNatRules')].protocol), 'TCP'), union(variables('defaultResourceProperties').inboundNatPool, parameters('inboundNatRules')[copyIndex('inboundNatRules')]).idleTimeoutInMinutes, null())]",
                                "frontendIPConfiguration": {
                                    "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('name'), parameters('inboundNatRules')[copyIndex('inboundNatRules')].frontendIpConfigurationName)]"
                                },
                                "frontendPort": "[parameters('inboundNatRules')[copyIndex('inboundNatRules')].frontendPort]",
                                "protocol": "[toUpper(parameters('inboundNatRules')[copyIndex('inboundNatRules')].protocol)]"
                            }
                        },
                        "name": "inboundNatRules"
                    },
                    {
                        "count": "[length(parameters('loadBalancingRules'))]",
                        "input": {
                            "name": "[parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].name]",
                            "properties": {
                                "backendAddressPool": {
                                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('name'), parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].backendAddressPoolName)]"
                                },
                                "backendPort": "[union(createObject('backendPort', union(createObject('port', 0), parameters('loadBalancingRules')[copyIndex('loadBalancingRules')]).port), parameters('loadBalancingRules')[copyIndex('loadBalancingRules')]).backendPort]",
                                "disableOutboundSnat": "[union(variables('defaultResourceProperties').loadBalancingRule, parameters('loadBalancingRules')[copyIndex('loadBalancingRules')]).isOutboundSnatDisabled]",
                                "enableFloatingIP": "[union(variables('defaultResourceProperties').loadBalancingRule, parameters('loadBalancingRules')[copyIndex('loadBalancingRules')]).enableFloatingIp]",
                                "enableTcpReset": "[if(equals(toUpper(parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].protocol), 'TCP'), union(variables('defaultResourceProperties').loadBalancingRule, parameters('loadBalancingRules')[copyIndex('loadBalancingRules')]).enableTcpReset, null())]",
                                "frontendIPConfiguration": {
                                    "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('name'), parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].frontendIpConfigurationName)]"
                                },
                                "frontendPort": "[union(createObject('frontendPort', union(createObject('port', 0), parameters('loadBalancingRules')[copyIndex('loadBalancingRules')]).port), parameters('loadBalancingRules')[copyIndex('loadBalancingRules')]).frontendPort]",
                                "idleTimeoutInMinutes": "[if(equals(toUpper(parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].protocol), 'TCP'), union(variables('defaultResourceProperties').loadBalancingRule, parameters('loadBalancingRules')[copyIndex('loadBalancingRules')]).idleTimeoutInMinutes, null())]",
                                "loadDistribution": "[union(variables('defaultResourceProperties').loadBalancingRule, parameters('loadBalancingRules')[copyIndex('loadBalancingRules')]).distributionMode]",
                                "probe": {
                                    "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('name'), parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].healthProbeName)]"
                                },
                                "protocol": "[toUpper(parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].protocol)]"
                            }
                        },
                        "name": "loadBalancingRules"
                    },
                    {
                        "count": "[length(parameters('outboundRules'))]",
                        "input": {
                            "name": "[parameters('outboundRules')[copyIndex('outboundRules')].name]",
                            "properties": {
                                "allocatedOutboundPorts": "[parameters('outboundRules')[copyIndex('outboundRules')].allocatedOuboundPortCount]",
                                "backendAddressPool": {
                                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('name'), parameters('outboundRules')[copyIndex('outboundRules')].backendAddressPoolName)]"
                                },
                                "enableTcpReset": "[if(equals(toUpper(parameters('outboundRules')[copyIndex('outboundRules')].protocol), 'TCP'), union(variables('defaultResourceProperties').outboundRule, parameters('outboundRules')[copyIndex('outboundRules')]).enableTcpReset, null())]",
                                "frontendIPConfigurations": "[createArray(createObject('id', resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('name'), parameters('outboundRules')[copyIndex('outboundRules')].frontendIpConfigurationName)))]",
                                "idleTimeoutInMinutes": "[if(equals(toUpper(parameters('outboundRules')[copyIndex('outboundRules')].protocol), 'TCP'), union(variables('defaultResourceProperties').outboundRule, parameters('outboundRules')[copyIndex('outboundRules')]).idleTimeoutInMinutes, null())]",
                                "protocol": "[toUpper(parameters('outboundRules')[copyIndex('outboundRules')].protocol)]"
                            }
                        },
                        "name": "outboundRules"
                    },
                    {
                        "count": "[length(parameters('healthProbes'))]",
                        "input": {
                            "name": "[parameters('healthProbes')[copyIndex('probes')].name]",
                            "properties": {
                                "intervalInSeconds": "[union(variables('defaultResourceProperties').healthProbe, parameters('healthProbes')[copyIndex('probes')]).intervalInSeconds]",
                                "numberOfProbes": "[union(variables('defaultResourceProperties').healthProbe, parameters('healthProbes')[copyIndex('probes')]).numberOfProbes]",
                                "port": "[parameters('healthProbes')[copyIndex('probes')].port]",
                                "protocol": "[toUpper(parameters('healthProbes')[copyIndex('probes')].protocol)]",
                                "requestPath": "[if(startsWith(toLower(parameters('healthProbes')[copyIndex('probes')].protocol), 'http'), union(createObject('requestPath', '/'), parameters('healthProbes')[copyIndex('probes')]).requestPath, null())]"
                            }
                        },
                        "name": "probes"
                    }
                ]
            },
            "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuTier')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/loadBalancers"
        }
    ]
}
