{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "accessTier": {
            "allowedValues": [
                "Cool",
                "Hot"
            ],
            "defaultValue": "Hot",
            "metadata": {
                "description": "Specifies the access tier of the Azure Storage Account."
            },
            "type": "string"
        },
        "audit": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the audit settings that will be applied to the Azure Storage Account."
            },
            "type": "object"
        },
        "blobServices": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the blob services settings that will be applied to the Azure Storage Account."
            },
            "type": "object"
        },
        "customerManagedEncryption": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the customer-managed encryption settings that will be applied to the Azure Storage Account."
            },
            "type": "object"
        },
        "dataLake": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the data lake settings that will be applied to the Azure Storage Account."
            },
            "type": "object"
        },
        "encryptionScopes": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of encryption scopes rules that will be created within the Azure Storage Account."
            },
            "type": "array"
        },
        "fileServices": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the file services settings that will be applied to the Azure Storage Account."
            },
            "type": "object"
        },
        "firewallRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of firewall rules that will be assigned to the Azure Storage Account."
            },
            "type": "array"
        },
        "isAdvancedThreatProtectionEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the advanced threat detection feature is enabled on the Azure Storage Account."
            },
            "type": "bool"
        },
        "isAllowTrustedMicrosoftServicesEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether trusted Microsoft services are allowed to access the Azure Storage Account."
            },
            "type": "bool"
        },
        "isPublicNetworkAccessEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the Azure Storage Account is accessible from the internet."
            },
            "type": "bool"
        },
        "isSharedKeyAccessEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether shared keys are able to be used to access the Azure Storage Account."
            },
            "type": "bool"
        },
        "kind": {
            "allowedValues": [
                "BlobStorage",
                "BlockBlobStorage",
                "FileStorage",
                "Storage",
                "StorageV2"
            ],
            "defaultValue": "StorageV2",
            "metadata": {
                "description": "Specifies the kind of the Azure Storage Account."
            },
            "type": "string"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Storage resource(s) will be deployed."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 24,
            "metadata": {
                "description": "Specifies the name of the Azure Storage Account."
            },
            "minLength": 3,
            "type": "string"
        },
        "queueServices": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the queue services settings that will be applied to the Azure Storage Account."
            },
            "type": "object"
        },
        "skuName": {
            "allowedValues": [
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GRS",
                "Standard_GZRS",
                "Standard_LRS",
                "Standard_RAGRS",
                "Standard_RAGZRS",
                "Standard_ZRS"
            ],
            "defaultValue": "Standard_LRS",
            "metadata": {
                "description": "Specifies the SKU name of the Azure Storage Account."
            },
            "type": "string"
        },
        "tableServices": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the table services settings that will be applied to the Azure Storage Account."
            },
            "type": "object"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Storage Account."
            },
            "type": "object"
        },
        "virtualNetworkRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of virtual network rules that will be assigned to the Azure Storage Account."
            },
            "type": "array"
        }
    },
    "variables": {
        "apiVersions": {
            "advancedThreatProtectionSettings": "2019-01-01",
            "authorizationRoleAssignments": "2020-04-01-preview",
            "deployments": "2021-04-01",
            "diagnosticSettings": "2017-05-01-preview",
            "keyVaults": "2019-09-01",
            "privateEndpoints": "2020-07-01",
            "privateEndpointsPrivateDnsZoneGroups": "2020-07-01",
            "roleAssignments": "2020-04-01-preview",
            "storageAccounts": "2021-02-01",
            "storageAccountsBlobServices": "2021-02-01",
            "storageAccountsBlobServicesContainers": "2021-02-01",
            "storageAccountsEncryptionScopes": "2021-02-01",
            "storageAccountsFileServices": "2021-02-01",
            "storageAccountsFileServicesShares": "2021-02-01",
            "storageAccountsQueueServices": "2021-02-01",
            "storageAccountsQueueServicesQueues": "2021-02-01",
            "storageAccountsTableServices": "2021-02-01",
            "storageAccountsTableServicesTables": "2021-02-01"
        },
        "audit": "[union(variables('defaultResourceProperties').audit, parameters('audit'))]",
        "blobContainerCollection": "[union(variables('defaultResourceProperties').blobService, parameters('blobServices')).containers.collection]",
        "blobContainerCollectionCount": "[length(variables('blobContainerCollection'))]",
        "blobContainerCollectionIsNotEmpty": "[greater(variables('blobContainerCollectionCount'), 0)]",
        "blobServicesPrivateEndpoints": "[union(variables('defaultResourceProperties').blobService, parameters('blobServices')).privateEndpoints]",
        "blobServicesPrivateEndpointsCount": "[length(variables('blobServicesPrivateEndpoints'))]",
        "blobServicesPrivateEndpointsIsNotEmpty": "[greater(variables('blobServicesPrivateEndpointsCount'), 0)]",
        "copy": [
            {
                "count": "[variables('encryptionScopesCount')]",
                "input": {
                    "name": "[union(variables('defaultResourceProperties').encryptionScope, parameters('encryptionScopes')[copyIndex('encryptionScopesKeyVaults')]).keyVault.name]",
                    "resourceGroupName": "[union(variables('defaultResourceProperties').encryptionScope, parameters('encryptionScopes')[copyIndex('encryptionScopesKeyVaults')]).keyVault.resourceGroupName]",
                    "subscriptionId": "[union(variables('defaultResourceProperties').encryptionScope, parameters('encryptionScopes')[copyIndex('encryptionScopesKeyVaults')]).keyVault.subscriptionId]"
                },
                "name": "encryptionScopesKeyVaults"
            }
        ],
        "customerManagedEncryption": "[union(variables('defaultResourceProperties').customerManagedEncryption, parameters('customerManagedEncryption'))]",
        "dataLakePrivateEndpoints": "[union(variables('defaultResourceProperties').dataLake, parameters('dataLake')).privateEndpoints]",
        "dataLakePrivateEndpointsCount": "[length(variables('dataLakePrivateEndpoints'))]",
        "dataLakePrivateEndpointsIsNotEmpty": "[greater(variables('dataLakePrivateEndpointsCount'), 0)]",
        "defaultResourceProperties": {
            "audit": {
                "isEnabled": true,
                "logAnalyticsWorkspace": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "retentionPolicy": {
                    "days": 137,
                    "isEnabled": true
                }
            },
            "blobContainer": {
                "metadata": {},
                "publicAccessType": "None"
            },
            "blobService": {
                "containers": {
                    "collection": [],
                    "isSoftDeleteEnabled": true,
                    "softDeleteRetentionPeriodInDays": 14
                },
                "corsRules": [],
                "isAnonymousAccessEnabled": false,
                "isChangeFeedEnabled": false,
                "isPointInTimeRestoreEnabled": false,
                "isSoftDeleteEnabled": true,
                "isVersioningEnabled": false,
                "pointInTimeRestoreRetentionPeriodInDays": 13,
                "privateEndpoints": [],
                "softDeleteRetentionPeriodInDays": 14
            },
            "customerManagedEncryption": {
                "isDoubleEncryptionAtRestEnabled": true,
                "isEnabled": true,
                "keyName": "",
                "keyVault": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "keyVersion": ""
            },
            "dataLake": {
                "isHierarchicalNamespaceEnabled": false,
                "privateEndpoints": []
            },
            "encryptionScope": {
                "isDoubleEncryptionAtRestEnabled": true,
                "keyVault": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "keyVersion": ""
            },
            "fileService": {
                "corsRules": [],
                "privateEndpoints": [],
                "shares": {
                    "collection": [],
                    "isLargeSupportEnabled": false,
                    "isNetworkFileSystemV3Enabled": false,
                    "isSoftDeleteEnabled": true,
                    "softDeleteRetentionPeriodInDays": 14
                }
            },
            "fileShare": {
                "accessTier": "TransactionOptimized",
                "enabledProtocols": "SMB",
                "metadata": "[null()]",
                "quotaInGigabytes": 5,
                "rootSquash": "[null()]"
            },
            "privateEndpoint": {
                "dnsZone": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "location": "[parameters('location')]",
                "subnet": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "queue": {
                "metadata": {}
            },
            "queueService": {
                "corsRules": [],
                "privateEndpoints": [],
                "queues": {
                    "collection": []
                }
            },
            "tableService": {
                "corsRules": [],
                "privateEndpoints": [],
                "tables": {
                    "collection": []
                }
            },
            "virtualNetworkRule": {
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            }
        },
        "encryptionScopesCount": "[length(parameters('encryptionScopes'))]",
        "encryptionScopesIsNotEmpty": "[greater(variables('encryptionScopesCount'), 0)]",
        "fileServicesPrivateEndpoints": "[union(variables('defaultResourceProperties').fileService, parameters('fileServices')).privateEndpoints]",
        "fileServicesPrivateEndpointsCount": "[length(variables('fileServicesPrivateEndpoints'))]",
        "fileServicesPrivateEndpointsIsNotEmpty": "[greater(variables('fileServicesPrivateEndpointsCount'), 0)]",
        "fileShareCollection": "[union(variables('defaultResourceProperties').fileService, parameters('fileServices')).shares.collection]",
        "fileShareCollectionCount": "[length(variables('fileShareCollection'))]",
        "fileShareCollectionIsNotEmpty": "[greater(variables('fileShareCollectionCount'), 0)]",
        "firewallRulesCount": "[length(parameters('firewallRules'))]",
        "isAuditEnabled": "[variables('audit').isEnabled]",
        "isAuditLogAnalyticsWorkspaceNameNotEmpty": "[not(empty(variables('audit').logAnalyticsWorkspace.name))]",
        "isCustomerManagedEncryptionEnabled": "[variables('customerManagedEncryption').isEnabled]",
        "keyVaults": "[union(variables('encryptionScopesKeyVaults'), if(variables('isCustomerManagedEncryptionEnabled'), createArray(variables('customerManagedEncryption').keyVault), createArray()))]",
        "keyVaultsCount": "[length(variables('keyVaults'))]",
        "keyVaultsIsNotEmpty": "[greater(variables('keyVaultsCount'), 0)]",
        "queueCollection": "[union(variables('defaultResourceProperties').queueService, parameters('queueServices')).queues.collection]",
        "queueCollectionCount": "[length(variables('queueCollection'))]",
        "queueCollectionIsNotEmpty": "[greater(variables('queueCollectionCount'), 0)]",
        "queueServicesPrivateEndpoints": "[union(variables('defaultResourceProperties').queueService, parameters('queueServices')).privateEndpoints]",
        "queueServicesPrivateEndpointsCount": "[length(variables('queueServicesPrivateEndpoints'))]",
        "queueServicesPrivateEndpointsIsNotEmpty": "[greater(variables('queueServicesPrivateEndpointsCount'), 0)]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceIds": {
            "auditLogAnalyticsWorkspace": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.OperationalInsights/workspaces', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>'))]",
            "keyVaultCryptoServiceEncryptionUserRoleDefinition": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
            "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "storageAccountBlobServices": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]",
            "storageAccountFileServices": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('storageAccountName'), 'default')]",
            "storageAccountQueueServices": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', variables('storageAccountName'), 'default')]",
            "storageAccountTableServices": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', variables('storageAccountName'), 'default')]"
        },
        "storageAccountName": "[toLower(parameters('name'))]",
        "subscriptionId": "[subscription().subscriptionId]",
        "tableCollection": "[union(variables('defaultResourceProperties').tableService, parameters('tableServices')).tables.collection]",
        "tableCollectionCount": "[length(variables('tableCollection'))]",
        "tableCollectionIsNotEmpty": "[greater(variables('tableCollectionCount'), 0)]",
        "tableServicesPrivateEndpoints": "[union(variables('defaultResourceProperties').tableService, parameters('tableServices')).privateEndpoints]",
        "tableServicesPrivateEndpointsCount": "[length(variables('tableServicesPrivateEndpoints'))]",
        "tableServicesPrivateEndpointsIsNotEmpty": "[greater(variables('tableServicesPrivateEndpointsCount'), 0)]",
        "virtualNetworkRulesCount": "[length(parameters('virtualNetworkRules'))]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').storageAccounts]",
            "identity": {
                "type": "SystemAssigned"
            },
            "kind": "[parameters('kind')]",
            "location": "[parameters('location')]",
            "name": "[variables('storageAccountName')]",
            "properties": {
                "accessTier": "[parameters('accessTier')]",
                "allowBlobPublicAccess": "[union(variables('defaultResourceProperties').blobService, parameters('blobServices')).isAnonymousAccessEnabled]",
                "allowSharedKeyAccess": "[parameters('isSharedKeyAccessEnabled')]",
                "azureFilesIdentityBasedAuthentication": "[null()]",
                "customDomain": "[null()]",
                "encryption": {
                    "keySource": "Microsoft.Storage",
                    "requireInfrastructureEncryption": "[variables('customerManagedEncryption').isDoubleEncryptionAtRestEnabled]",
                    "services": {
                        "file": {
                            "enabled": true,
                            "keyType": "Account"
                        },
                        "blob": {
                            "enabled": true,
                            "keyType": "Account"
                        },
                        "queue": {
                            "enabled": true,
                            "keyType": "Account"
                        },
                        "table": {
                            "enabled": true,
                            "keyType": "Account"
                        }
                    }
                },
                "isHnsEnabled": "[union(variables('defaultResourceProperties').dataLake, parameters('dataLake')).isHierarchicalNamespaceEnabled]",
                "isNfsV3Enabled": "[union(variables('defaultResourceProperties').fileService, parameters('fileServices')).shares.isNetworkFileSystemV3Enabled]",
                "keyPolicy": "[null()]",
                "largeFileSharesState": "[if(union(variables('defaultResourceProperties').fileService, parameters('fileServices')).shares.isLargeSupportEnabled, 'Enabled', 'Disabled')]",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                    "bypass": "[if(parameters('isAllowTrustedMicrosoftServicesEnabled'), 'AzureServices', 'None')]",
                    "copy": [
                        {
                            "count": "[variables('firewallRulesCount')]",
                            "input": {
                                "action": "Allow",
                                "value": "[parameters('firewallRules')[copyIndex('ipRules')]]"
                            },
                            "name": "ipRules"
                        },
                        {
                            "count": "[variables('virtualNetworkRulesCount')]",
                            "input": {
                                "action": "Allow",
                                "id": "[resourceId(union(variables('defaultResourceProperties').virtualNetworkRule, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')]).subscriptionId, union(variables('defaultResourceProperties').virtualNetworkRule, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')]).resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].virtualNetworkName, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].subnetName)]"
                            },
                            "name": "virtualNetworkRules"
                        }
                    ],
                    "defaultAction": "[if(parameters('isPublicNetworkAccessEnabled'), 'Allow', 'Deny')]"
                },
                "routingPreference": "[null()]",
                "sasPolicy": "[null()]",
                "supportsHttpsTrafficOnly": true
            },
            "sku": {
                "name": "[parameters('skuName')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Storage/storageAccounts"
        },
        {
            "apiVersion": "[variables('apiVersions').deployments]",
            "condition": "[variables('keyVaultsIsNotEmpty')]",
            "copy": {
                "count": "[variables('keyVaultsCount')]",
                "mode": "Parallel",
                "name": "keyVaultsRbacCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').storageAccount]"
            ],
            "name": "[format('{0}-KvRbac_{1}', deployment().name, copyIndex())]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                    "keyVaultCryptoServiceEncryptionUserRoleDefinitionId": {
                        "value": "[variables('resourceIds').keyVaultCryptoServiceEncryptionUserRoleDefinition]"
                    },
                    "keyVaultId": {
                        "value": "[resourceId(variables('keyVaults')[copyIndex()].subscriptionId, variables('keyVaults')[copyIndex()].resourceGroupName, 'Microsoft.KeyVault/vaults', variables('keyVaults')[copyIndex()].name)]"
                    },
                    "keyVaultName": {
                        "value": "[variables('keyVaults')[copyIndex()].name]"
                    },
                    "roleAssignmentsApiVersion": {
                        "value": "[variables('apiVersions').roleAssignments]"
                    },
                    "storageAccountId": {
                        "value": "[variables('resourceIds').storageAccount]"
                    },
                    "storageAccountsApiVersion": {
                        "value": "[variables('apiVersions').storageAccounts]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "keyVaultCryptoServiceEncryptionUserRoleDefinitionId": {
                            "type": "string"
                        },
                        "keyVaultId": {
                            "type": "string"
                        },
                        "keyVaultName": {
                            "type": "string"
                        },
                        "roleAssignmentsApiVersion":{
                            "type": "string"
                        },
                        "storageAccountId": {
                            "type": "string"
                        },
                        "storageAccountsApiVersion": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "apiVersion": "[parameters('roleAssignmentsApiVersion')]",
                            "name": "[guid(parameters('storageAccountId'), parameters('keyVaultCryptoServiceEncryptionUserRoleDefinitionId'), parameters('keyVaultId'))]",
                            "properties": {
                                "principalId": "[reference(parameters('storageAccountId'), parameters('storageAccountsApiVersion'), 'Full').identity.principalId]",
                                "roleDefinitionId": "[parameters('keyVaultCryptoServiceEncryptionUserRoleDefinitionId')]"
                            },
                            "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                            "type": "Microsoft.Authorization/roleAssignments"
                        }
                    ]
                }
            },
            "resourceGroup": "[if(variables('keyVaultsIsNotEmpty'), variables('keyVaults')[copyIndex()].resourceGroupName, variables('resourceGroupName'))]",
            "subscriptionId": "[if(variables('keyVaultsIsNotEmpty'), variables('keyVaults')[copyIndex()].subscriptionId, variables('subscriptionId'))]",
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployments]",
            "condition": "[variables('isCustomerManagedEncryptionEnabled')]",
            "dependsOn": [
                "[variables('resourceIds').storageAccount]",
                "keyVaultsRbacCopy"
            ],
            "name": "[format('{0}-Cme', deployment().name)]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                    "customerManagedEncryption": {
                        "value": "[variables('customerManagedEncryption')]"
                    },
                    "keyVaultsApiVersion": {
                        "value": "[variables('apiVersions').keyVaults]"
                    },
                    "kind": {
                        "value": "[parameters('kind')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "name": {
                        "value": "[parameters('name')]"
                    },
                    "skuName": {
                        "value": "[parameters('skuName')]"
                    },
                    "storageAccountsApiVersion": {
                        "value": "[variables('apiVersions').storageAccounts]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "customerManagedEncryption": {
                            "type": "object"
                        },
                        "keyVaultsApiVersion": {
                            "type": "string"
                        },
                        "kind": {
                            "type": "string"
                        },
                        "location": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "skuName": {
                            "type": "string"
                        },
                        "storageAccountsApiVersion": {
                            "type": "string"
                        }
                    },
                    "variables": {
                        "keyVaultResourceId": "[resourceId(parameters('customerManagedEncryption').keyVault.subscriptionId, parameters('customerManagedEncryption').keyVault.resourceGroupName, 'Microsoft.KeyVault/vaults', parameters('customerManagedEncryption').keyVault.name)]"
                    },
                    "resources": [
                        {
                            "apiVersion": "[parameters('storageAccountsApiVersion')]",
                            "identity": {
                                "type": "SystemAssigned"
                            },
                            "kind": "[parameters('kind')]",
                            "location": "[parameters('location')]",
                            "name": "[parameters('name')]",
                            "properties": {
                                "encryption": {
                                    "keySource": "Microsoft.Keyvault",
                                    "keyvaultproperties": "[createObject('keyname', parameters('customerManagedEncryption').keyName, 'keyvaulturi', reference(variables('keyVaultResourceId'), parameters('keyVaultsApiVersion')).vaultUri, 'keyversion', parameters('customerManagedEncryption').keyVersion)]",
                                    "requireInfrastructureEncryption": "[parameters('customerManagedEncryption').isDoubleEncryptionAtRestEnabled]"
                                }
                            },
                            "sku": {
                                "name": "[parameters('skuName')]"
                            },
                            "type": "Microsoft.Storage/storageAccounts"
                        }
                    ]
                }
            },
            "type": "Microsoft.Resources/deployments"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "condition": "[or(variables('isAuditEnabled'), variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'))]",
            "dependsOn": [
                "[variables('resourceIds').storageAccount]"
            ],
            "name": "[format('{0}/Microsoft.Insights/audit', parameters('name'))]",
            "properties": {
                "metrics": [
                    {
                        "category": "Transaction",
                        "enabled": "[variables('isAuditEnabled')]",
                        "retentionPolicy": {
                            "days": "[variables('audit').retentionPolicy.days]",
                            "enabled": "[variables('audit').retentionPolicy.isEnabled]"
                        }
                    }
                ],
                "workspaceId": "[variables('resourceIds').auditLogAnalyticsWorkspace]"
            },
            "type": "Microsoft.Storage/storageAccounts/providers/diagnosticsettings"
        },
        {
            "apiVersion": "[variables('apiVersions').storageAccountsEncryptionScopes]",
            "condition": "[variables('encryptionScopesIsNotEmpty')]",
            "copy": {
                "count": "[variables('encryptionScopesCount')]",
                "mode": "Parallel",
                "name": "encryptionScopesCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').storageAccount]"
            ],
            "name": "[format('{0}/{1}', variables('storageAccountName'), if(variables('encryptionScopesIsNotEmpty'), parameters('encryptionScopes'), createArray(createObject('name', 'dummyEncryptionScope')))[copyIndex()].name)]",
            "properties": {
                "keyVaultProperties": {
                    "keyUri": "[if(variables('encryptionScopesIsNotEmpty'), format('{0}keys/{1}{2}', reference(resourceId(union(variables('defaultResourceProperties').encryptionScope, parameters('encryptionScopes')[copyIndex()]).keyVault.subscriptionId, union(variables('defaultResourceProperties').encryptionScope, parameters('encryptionScopes')[copyIndex()]).keyVault.resourceGroupName, 'Microsoft.KeyVault/vaults', parameters('encryptionScopes')[copyIndex()].keyVault.name), variables('apiVersions').keyVaults).vaultUri, parameters('encryptionScopes')[copyIndex()].keyName, if(empty(union(variables('defaultResourceProperties').encryptionScope, parameters('encryptionScopes')[copyIndex()]).keyVersion), '', format('/{0}', parameters('encryptionScopes')[copyIndex()].keyVersion))), null())]"
                },
                "requireInfrastructureEncryption": "[union(variables('defaultResourceProperties').encryptionScope, parameters('encryptionScopes')[copyIndex()]).isDoubleEncryptionAtRestEnabled]",
                "source": "Microsoft.KeyVault",
                "state": "Enabled"
            },
            "type": "Microsoft.Storage/storageAccounts/encryptionScopes"
        },
        {
            "apiVersion": "[variables('apiVersions').advancedThreatProtectionSettings]",
            "dependsOn": [
                "[variables('resourceIds').storageAccount]"
            ],
            "name": "[format('{0}/Microsoft.Security/current', variables('storageAccountName'))]",
            "properties": {
                "isEnabled": "[parameters('isAdvancedThreatProtectionEnabled')]"
            },
            "type": "Microsoft.Storage/storageAccounts/providers/advancedThreatProtectionSettings"
        },
        {
            "apiVersion": "[variables('apiVersions').storageAccountsBlobServices]",
            "dependsOn": [
                "[variables('resourceIds').storageAccount]"
            ],
            "name": "[format('{0}/default', variables('storageAccountName'))]",
            "properties": {
                "changeFeed": {
                    "enabled": "[union(variables('defaultResourceProperties').blobService, parameters('blobServices')).isChangeFeedEnabled]"
                },
                "containerDeleteRetentionPolicy": {
                    "days": "[union(variables('defaultResourceProperties').blobService, parameters('blobServices')).containers.softDeleteRetentionPeriodInDays]",
                    "enabled": "[union(variables('defaultResourceProperties').blobService, parameters('blobServices')).containers.isSoftDeleteEnabled]"
                },
                "cors": {
                    "corsRules": "[union(variables('defaultResourceProperties').blobService, parameters('blobServices')).corsRules]"
                },
                "deleteRetentionPolicy": {
                    "days": "[union(variables('defaultResourceProperties').blobService, parameters('blobServices')).softDeleteRetentionPeriodInDays]",
                    "enabled": "[union(variables('defaultResourceProperties').blobService, parameters('blobServices')).isSoftDeleteEnabled]"
                },
                "isVersioningEnabled": "[union(variables('defaultResourceProperties').blobService, parameters('blobServices')).isVersioningEnabled]",
                "lastAccessTimeTrackingPolicy": "[null()]",
                "restorePolicy": {
                    "days": "[union(variables('defaultResourceProperties').blobService, parameters('blobServices')).pointInTimeRestoreRetentionPeriodInDays]",
                    "enabled": "[union(variables('defaultResourceProperties').blobService, parameters('blobServices')).isPointInTimeRestoreEnabled]"
                }
            },
            "type": "Microsoft.Storage/storageAccounts/blobServices"
        },
        {
            "apiVersion": "[variables('apiVersions').storageAccountsBlobServicesContainers]",
            "condition": "[variables('blobContainerCollectionIsNotEmpty')]",
            "copy": {
                "count": "[variables('blobContainerCollectionCount')]",
                "mode": "Parallel",
                "name": "blobContainersCopy"
            },
            "dependsOn": [
                "encryptionScopesCopy",
                "[variables('resourceIds').storageAccountBlobServices]"
            ],
            "name": "[format('{0}/default/{1}', variables('storageAccountName'), if(variables('blobContainerCollectionIsNotEmpty'), variables('blobContainerCollection'), createArray(createObject('name', 'dummyContainer')))[copyIndex()].name)]",
            "properties": {
                "metadata": "[union(variables('defaultResourceProperties').blobContainer, variables('blobContainerCollection')[copyIndex()]).metadata]",
                "publicAccess": "[union(variables('defaultResourceProperties').blobContainer, variables('blobContainerCollection')[copyIndex()]).publicAccessType]"
            },
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "condition": "[or(variables('isAuditEnabled'), variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'))]",
            "dependsOn": [
                "[variables('resourceIds').storageAccountBlobServices]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/default/Microsoft.Insights/audit', parameters('name'))]",
            "properties": {
                "logs": [
                    {
                        "category": "StorageDelete",
                        "enabled": "[variables('isAuditEnabled')]",
                        "retentionPolicy": {
                            "days": "[variables('audit').retentionPolicy.days]",
                            "enabled": "[variables('audit').retentionPolicy.isEnabled]"
                        }
                    }
                ],
                "workspaceId": "[variables('resourceIds').auditLogAnalyticsWorkspace]"
            },
            "type": "Microsoft.Storage/storageAccounts/blobServices/providers/diagnosticsettings"
        },
        {
            "apiVersion": "[variables('apiVersions').storageAccountsFileServices]",
            "dependsOn": [
                "[variables('resourceIds').storageAccountBlobServices]"
            ],
            "name": "[format('{0}/default', variables('storageAccountName'))]",
            "properties": {
                "cors": {
                    "corsRules": "[union(variables('defaultResourceProperties').fileService, parameters('fileServices')).corsRules]"
                },
                "protocolSettings": "[null()]",
                "shareDeleteRetentionPolicy": {
                    "days": "[union(variables('defaultResourceProperties').fileService, parameters('fileServices')).shares.softDeleteRetentionPeriodInDays]",
                    "enabled": "[union(variables('defaultResourceProperties').fileService, parameters('fileServices')).shares.isSoftDeleteEnabled]"
                }
            },
            "type": "Microsoft.Storage/storageAccounts/fileServices"
        },
        {
            "apiVersion": "[variables('apiVersions').storageAccountsFileServicesShares]",
            "condition": "[variables('fileShareCollectionIsNotEmpty')]",
            "copy": {
                "count": "[variables('fileShareCollectionCount')]",
                "mode": "Parallel",
                "name": "fileSharesCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').storageAccountFileServices]"
            ],
            "name": "[format('{0}/default/{1}', variables('storageAccountName'), if(variables('fileShareCollectionIsNotEmpty'), variables('fileShareCollection'), createArray(createObject('name', 'dummyShare')))[copyIndex()].name)]",
            "properties": {
                "accessTier": "[union(variables('defaultResourceProperties').fileShare, variables('fileShareCollection')[copyIndex()]).accessTier]",
                "enabledProtocols": "[union(variables('defaultResourceProperties').fileShare, variables('fileShareCollection')[copyIndex()]).enabledProtocols]",
                "metadata": "[union(variables('defaultResourceProperties').fileShare, variables('fileShareCollection')[copyIndex()]).metadata]",
                "rootSquash": "[union(variables('defaultResourceProperties').fileShare, variables('fileShareCollection')[copyIndex()]).rootSquash]",
                "shareQuota": "[union(variables('defaultResourceProperties').fileShare, variables('fileShareCollection')[copyIndex()]).quotaInGigabytes]"
            },
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "condition": "[or(variables('isAuditEnabled'), variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'))]",
            "dependsOn": [
                "[variables('resourceIds').storageAccountFileServices]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/default/Microsoft.Insights/audit', parameters('name'))]",
            "properties": {
                "logs": [
                    {
                        "category": "StorageDelete",
                        "enabled": "[variables('isAuditEnabled')]",
                        "retentionPolicy": {
                            "days": "[variables('audit').retentionPolicy.days]",
                            "enabled": "[variables('audit').retentionPolicy.isEnabled]"
                        }
                    }
                ],
                "workspaceId": "[variables('resourceIds').auditLogAnalyticsWorkspace]"
            },
            "type": "Microsoft.Storage/storageAccounts/fileServices/providers/diagnosticsettings"
        },
        {
            "apiVersion": "[variables('apiVersions').storageAccountsQueueServices]",
            "dependsOn": [
                "[variables('resourceIds').storageAccountFileServices]"
            ],
            "name": "[format('{0}/default', variables('storageAccountName'))]",
            "properties": {
                "cors": {
                    "corsRules": "[union(variables('defaultResourceProperties').queueService, parameters('queueServices')).corsRules]"
                }
            },
            "type": "Microsoft.Storage/storageAccounts/queueServices"
        },
        {
            "apiVersion": "[variables('apiVersions').storageAccountsQueueServicesQueues]",
            "condition": "[variables('queueCollectionIsNotEmpty')]",
            "copy": {
                "count": "[variables('queueCollectionCount')]",
                "mode": "Parallel",
                "name": "queuesCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').storageAccountQueueServices]"
            ],
            "name": "[format('{0}/default/{1}', variables('storageAccountName'), if(variables('queueCollectionIsNotEmpty'), variables('queueCollection'), createArray(createObject('name', 'dummyQueue')))[copyIndex()].name)]",
            "properties": {
                "metadata": "[union(variables('defaultResourceProperties').queue, variables('queueCollection')[copyIndex()]).metadata]"
            },
            "type": "Microsoft.Storage/storageAccounts/queueServices/queues"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "condition": "[or(variables('isAuditEnabled'), variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'))]",
            "dependsOn": [
                "[variables('resourceIds').storageAccountQueueServices]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/default/Microsoft.Insights/audit', parameters('name'))]",
            "properties": {
                "logs": [
                    {
                        "category": "StorageDelete",
                        "enabled": "[variables('isAuditEnabled')]",
                        "retentionPolicy": {
                            "days": "[variables('audit').retentionPolicy.days]",
                            "enabled": "[variables('audit').retentionPolicy.isEnabled]"
                        }
                    }
                ],
                "workspaceId": "[variables('resourceIds').auditLogAnalyticsWorkspace]"
            },
            "type": "Microsoft.Storage/storageAccounts/queueServices/providers/diagnosticsettings"
        },
        {
            "apiVersion": "[variables('apiVersions').storageAccountsTableServices]",
            "dependsOn": [
                "[variables('resourceIds').storageAccountQueueServices]"
            ],
            "name": "[format('{0}/default', variables('storageAccountName'))]",
            "properties": {
                "cors": {
                    "corsRules": "[union(variables('defaultResourceProperties').tableService, parameters('tableServices')).corsRules]"
                }
            },
            "type": "Microsoft.Storage/storageAccounts/tableServices"
        },
        {
            "apiVersion": "[variables('apiVersions').storageAccountsTableServicesTables]",
            "condition": "[variables('tableCollectionIsNotEmpty')]",
            "copy": {
                "count": "[variables('tableCollectionCount')]",
                "mode": "Parallel",
                "name": "tablesCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').storageAccountTableServices]"
            ],
            "name": "[format('{0}/default/{1}', variables('storageAccountName'), if(variables('tableCollectionIsNotEmpty'), variables('tableCollection'), createArray(createObject('name', 'dummyTable')))[copyIndex()].name)]",
            "type": "Microsoft.Storage/storageAccounts/tableServices/tables"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "condition": "[or(variables('isAuditEnabled'), variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'))]",
            "dependsOn": [
                "[variables('resourceIds').storageAccountTableServices]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/default/Microsoft.Insights/audit', parameters('name'))]",
            "properties": {
                "logs": [
                    {
                        "category": "StorageDelete",
                        "enabled": "[variables('isAuditEnabled')]",
                        "retentionPolicy": {
                            "days": "[variables('audit').retentionPolicy.days]",
                            "enabled": "[variables('audit').retentionPolicy.isEnabled]"
                        }
                    }
                ],
                "workspaceId": "[variables('resourceIds').auditLogAnalyticsWorkspace]"
            },
            "type": "Microsoft.Storage/storageAccounts/tableServices/providers/diagnosticsettings"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpoints]",
            "condition": "[variables('blobServicesPrivateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('blobServicesPrivateEndpointsCount')]",
                "mode": "Parallel",
                "name": "blobServicesPrivateEndpointsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').storageAccountTableServices]"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, variables('blobServicesPrivateEndpoints')[copyIndex()]).location]",
            "name": "[if(variables('blobServicesPrivateEndpointsIsNotEmpty'), variables('blobServicesPrivateEndpoints'), createArray(createObject('name', 'dummyBlobServicesEndpoint')))[copyIndex()].name]",
            "properties": {
                "customDnsConfigs": [],
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('blobServicesPrivateEndpoints')[copyIndex()].name]",
                        "properties": {
                            "groupIds": [
                                "blob"
                            ],
                            "privateLinkServiceId": "[variables('resourceIds').storageAccount]"
                        }
                    }
                ],
                "subnet": {
                    "id": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint, variables('blobServicesPrivateEndpoints')[copyIndex()]).subnet.subscriptionId, union(variables('defaultResourceProperties').privateEndpoint, variables('blobServicesPrivateEndpoints')[copyIndex()]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', variables('blobServicesPrivateEndpoints')[copyIndex()].subnet.virtualNetworkName, variables('blobServicesPrivateEndpoints')[copyIndex()].subnet.name)]"
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/privateEndpoints"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpointsPrivateDnsZoneGroups]",
            "condition": "[variables('blobServicesPrivateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('blobServicesPrivateEndpointsCount')]",
                "mode": "Parallel",
                "name": "blobServicesPrivateDnsZoneGroupsCopy"
            },
            "dependsOn": [
                "blobServicesPrivateEndpointsCopy"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, variables('blobServicesPrivateEndpoints')[copyIndex()]).location]",
            "name": "[format('{0}/default', if(variables('blobServicesPrivateEndpointsIsNotEmpty'), variables('blobServicesPrivateEndpoints'), createArray(createObject('name', 'dummyBlobServicesPrivateDnsZoneGroup')))[copyIndex()].name)]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(union(variables('blobServicesPrivateEndpoints'), createArray(createObject('dnsZones', createArray())))[copyIndex()].dnsZones)]",
                        "input": {
                            "name": "[replace(variables('blobServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name, '.', '-')]",
                            "properties": {
                                "privateDnsZoneId": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('blobServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).subscriptionId, union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('blobServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).resourceGroupName, 'Microsoft.Network/privateDnsZones', variables('blobServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name)]"
                            }
                        },
                        "name": "privateDnsZoneConfigs"
                    }
                ]
            },
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpoints]",
            "condition": "[variables('fileServicesPrivateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('fileServicesPrivateEndpointsCount')]",
                "mode": "Parallel",
                "name": "fileServicesPrivateEndpointsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').storageAccountTableServices]"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, variables('fileServicesPrivateEndpoints')[copyIndex()]).location]",
            "name": "[if(variables('fileServicesPrivateEndpointsIsNotEmpty'), variables('fileServicesPrivateEndpoints'), createArray(createObject('name', 'dummyFileServicesEndpoint')))[copyIndex()].name]",
            "properties": {
                "customDnsConfigs": [],
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('fileServicesPrivateEndpoints')[copyIndex()].name]",
                        "properties": {
                            "groupIds": [
                                "file"
                            ],
                            "privateLinkServiceId": "[variables('resourceIds').storageAccount]"
                        }
                    }
                ],
                "subnet": {
                    "id": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint, variables('fileServicesPrivateEndpoints')[copyIndex()]).subnet.subscriptionId, union(variables('defaultResourceProperties').privateEndpoint, variables('fileServicesPrivateEndpoints')[copyIndex()]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', variables('fileServicesPrivateEndpoints')[copyIndex()].subnet.virtualNetworkName, variables('fileServicesPrivateEndpoints')[copyIndex()].subnet.name)]"
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/privateEndpoints"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpointsPrivateDnsZoneGroups]",
            "condition": "[variables('fileServicesPrivateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('fileServicesPrivateEndpointsCount')]",
                "mode": "Parallel",
                "name": "fileServicesPrivateDnsZoneGroupsCopy"
            },
            "dependsOn": [
                "fileServicesPrivateEndpointsCopy"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, variables('fileServicesPrivateEndpoints')[copyIndex()]).location]",
            "name": "[format('{0}/default', if(variables('fileServicesPrivateEndpointsIsNotEmpty'), variables('fileServicesPrivateEndpoints'), createArray(createObject('name', 'dummyFileServicesPrivateDnsZoneGroup')))[copyIndex()].name)]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(union(variables('fileServicesPrivateEndpoints'), createArray(createObject('dnsZones', createArray())))[copyIndex()].dnsZones)]",
                        "input": {
                            "name": "[replace(variables('fileServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name, '.', '-')]",
                            "properties": {
                                "privateDnsZoneId": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('fileServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).subscriptionId, union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('fileServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).resourceGroupName, 'Microsoft.Network/privateDnsZones', variables('fileServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name)]"
                            }
                        },
                        "name": "privateDnsZoneConfigs"
                    }
                ]
            },
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpoints]",
            "condition": "[variables('queueServicesPrivateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('queueServicesPrivateEndpointsCount')]",
                "mode": "Parallel",
                "name": "queueServicesPrivateEndpointsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').storageAccountTableServices]"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, variables('queueServicesPrivateEndpoints')[copyIndex()]).location]",
            "name": "[if(variables('queueServicesPrivateEndpointsIsNotEmpty'), variables('queueServicesPrivateEndpoints'), createArray(createObject('name', 'dummyQueueServicesEndpoint')))[copyIndex()].name]",
            "properties": {
                "customDnsConfigs": [],
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('queueServicesPrivateEndpoints')[copyIndex()].name]",
                        "properties": {
                            "groupIds": [
                                "queue"
                            ],
                            "privateLinkServiceId": "[variables('resourceIds').storageAccount]"
                        }
                    }
                ],
                "subnet": {
                    "id": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint, variables('queueServicesPrivateEndpoints')[copyIndex()]).subnet.subscriptionId, union(variables('defaultResourceProperties').privateEndpoint, variables('queueServicesPrivateEndpoints')[copyIndex()]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', variables('queueServicesPrivateEndpoints')[copyIndex()].subnet.virtualNetworkName, variables('queueServicesPrivateEndpoints')[copyIndex()].subnet.name)]"
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/privateEndpoints"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpointsPrivateDnsZoneGroups]",
            "condition": "[variables('queueServicesPrivateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('queueServicesPrivateEndpointsCount')]",
                "mode": "Parallel",
                "name": "queueServicesPrivateDnsZoneGroupsCopy"
            },
            "dependsOn": [
                "queueServicesPrivateEndpointsCopy"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, variables('queueServicesPrivateEndpoints')[copyIndex()]).location]",
            "name": "[format('{0}/default', if(variables('queueServicesPrivateEndpointsIsNotEmpty'), variables('queueServicesPrivateEndpoints'), createArray(createObject('name', 'dummyQueueServicesPrivateDnsZoneGroup')))[copyIndex()].name)]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(union(variables('queueServicesPrivateEndpoints'), createArray(createObject('dnsZones', createArray())))[copyIndex()].dnsZones)]",
                        "input": {
                            "name": "[replace(variables('queueServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name, '.', '-')]",
                            "properties": {
                                "privateDnsZoneId": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('queueServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).subscriptionId, union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('queueServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).resourceGroupName, 'Microsoft.Network/privateDnsZones', variables('queueServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name)]"
                            }
                        },
                        "name": "privateDnsZoneConfigs"
                    }
                ]
            },
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpoints]",
            "condition": "[variables('tableServicesPrivateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('tableServicesPrivateEndpointsCount')]",
                "mode": "Parallel",
                "name": "tableServicesPrivateEndpointsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').storageAccountTableServices]"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, variables('tableServicesPrivateEndpoints')[copyIndex()]).location]",
            "name": "[if(variables('tableServicesPrivateEndpointsIsNotEmpty'), variables('tableServicesPrivateEndpoints'), createArray(createObject('name', 'dummyTableServicesEndpoint')))[copyIndex()].name]",
            "properties": {
                "customDnsConfigs": [],
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('tableServicesPrivateEndpoints')[copyIndex()].name]",
                        "properties": {
                            "groupIds": [
                                "table"
                            ],
                            "privateLinkServiceId": "[variables('resourceIds').storageAccount]"
                        }
                    }
                ],
                "subnet": {
                    "id": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint, variables('tableServicesPrivateEndpoints')[copyIndex()]).subnet.subscriptionId, union(variables('defaultResourceProperties').privateEndpoint, variables('tableServicesPrivateEndpoints')[copyIndex()]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', variables('tableServicesPrivateEndpoints')[copyIndex()].subnet.virtualNetworkName, variables('tableServicesPrivateEndpoints')[copyIndex()].subnet.name)]"
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/privateEndpoints"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpointsPrivateDnsZoneGroups]",
            "condition": "[variables('tableServicesPrivateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('tableServicesPrivateEndpointsCount')]",
                "mode": "Parallel",
                "name": "tableServicesPrivateDnsZoneGroupsCopy"
            },
            "dependsOn": [
                "tableServicesPrivateEndpointsCopy"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, variables('tableServicesPrivateEndpoints')[copyIndex()]).location]",
            "name": "[format('{0}/default', if(variables('tableServicesPrivateEndpointsIsNotEmpty'), variables('tableServicesPrivateEndpoints'), createArray(createObject('name', 'dummyTableServicesPrivateDnsZoneGroup')))[copyIndex()].name)]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(union(variables('tableServicesPrivateEndpoints'), createArray(createObject('dnsZones', createArray())))[copyIndex()].dnsZones)]",
                        "input": {
                            "name": "[replace(variables('tableServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name, '.', '-')]",
                            "properties": {
                                "privateDnsZoneId": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('tableServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).subscriptionId, union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('tableServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).resourceGroupName, 'Microsoft.Network/privateDnsZones', variables('tableServicesPrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name)]"
                            }
                        },
                        "name": "privateDnsZoneConfigs"
                    }
                ]
            },
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpoints]",
            "condition": "[variables('dataLakePrivateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('dataLakePrivateEndpointsCount')]",
                "mode": "Parallel",
                "name": "dataLakePrivateEndpointsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').storageAccountTableServices]"
            ],
            "location": "[parameters('location')]",
            "name": "[if(variables('dataLakePrivateEndpointsIsNotEmpty'), variables('dataLakePrivateEndpoints'), createArray(createObject('name', 'dummyDataLakeEndpoint')))[copyIndex()].name]",
            "properties": {
                "customDnsConfigs": [],
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('dataLakePrivateEndpoints')[copyIndex()].name]",
                        "properties": {
                            "groupIds": [
                                "dfs"
                            ],
                            "privateLinkServiceId": "[variables('resourceIds').storageAccount]"
                        }
                    }
                ],
                "subnet": {
                    "id": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint, variables('dataLakePrivateEndpoints')[copyIndex()]).subnet.subscriptionId, union(variables('defaultResourceProperties').privateEndpoint, variables('dataLakePrivateEndpoints')[copyIndex()]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', variables('dataLakePrivateEndpoints')[copyIndex()].subnet.virtualNetworkName, variables('dataLakePrivateEndpoints')[copyIndex()].subnet.name)]"
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/privateEndpoints"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpointsPrivateDnsZoneGroups]",
            "condition": "[variables('dataLakePrivateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('dataLakePrivateEndpointsCount')]",
                "mode": "Parallel",
                "name": "dataLakePrivateDnsZoneGroupsCopy"
            },
            "dependsOn": [
                "dataLakePrivateEndpointsCopy"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/default', if(variables('dataLakePrivateEndpointsIsNotEmpty'), variables('dataLakePrivateEndpoints'), createArray(createObject('name', 'dummyDataLakePrivateDnsZoneGroup')))[copyIndex()].name)]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(union(variables('dataLakePrivateEndpoints'), createArray(createObject('dnsZones', createArray())))[copyIndex()].dnsZones)]",
                        "input": {
                            "name": "[replace(variables('dataLakePrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name, '.', '-')]",
                            "properties": {
                                "privateDnsZoneId": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('dataLakePrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).subscriptionId, union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('dataLakePrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).resourceGroupName, 'Microsoft.Network/privateDnsZones', variables('dataLakePrivateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name)]"
                            }
                        },
                        "name": "privateDnsZoneConfigs"
                    }
                ]
            },
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
        }
    ]
}
