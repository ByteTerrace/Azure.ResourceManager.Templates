{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "audit": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the audit settings that will be applied to the Azure Redis Cache."
            },
            "type": "object"
        },
        "availabilityZones": {
            "defaultValue": [
                1,
                2,
                3
            ],
            "metadata": {
                "description": "Specifies an array of availability zones that the Azure Redis Cache will be deployed within."
            },
            "type": "array"
        },
        "firewallRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of firewall rules that will be assigned to the Azure Redis Cache."
            },
            "type": "array"
        },
        "isPublicNetworkAccessEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the Azure Redis Cache is accessible from the internet."
            },
            "type": "bool"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Redis Cache resource(s) should be deployed."
            },
            "type": "string"
        },
        "minimumSupportedTlsVersion": {
            "allowedValues": [
                "1.2"
            ],
            "defaultValue": "1.2",
            "metadata": {
                "description": "Specifies the minimum version of the TLS protocol that will be supported within the Azure Redis Cache."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 63,
            "metadata": {
                "description": "Specifies the name of the Azure Redis Cache."
            },
            "minLength": 1,
            "type": "string"
        },
        "numberOfCapacityUnits": {
            "defaultValue": 1,
            "maxValue": 6,
            "metadata": {
                "description": "Specifies the number of capacity units that will be dedicated to the Azure Redis Cache."
            },
            "minValue": 0,
            "type": "int"
        },
        "numberOfShards": {
            "defaultValue": 0,
            "maxValue": 10,
            "metadata": {
                "description": "Specifies the number of cluster shards that will be dedicated to the Azure Redis Cache."
            },
            "minValue": 0,
            "type": "int"
        },
        "privateEndpoints": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of private endpoints that will be linked with the Azure Redis Cache."
            },
            "type": "array"
        },
        "skuName": {
            "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
            ],
            "defaultValue": "Premium",
            "metadata": {
                "description": "Specifies the SKU name of the Azure Redis Cache."
            },
            "type": "string"
        },
        "subnet": {
            "defaultValue": {},
            "metadata": {
                "description": ""
            },
            "type": "object"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Redis Cache."
            },
            "type": "object"
        },
        "version": {
            "allowedValues": [
                "4",
                "6"
            ],
            "defaultValue": "6",
            "metadata": {
                "description": "Specifies the version of the Azure Redis Cache."
            },
            "type": "string"
        }
    },
    "variables": {
        "apiVersions": {
            "diagnosticSettings": "2017-05-01-preview",
            "privateEndpoints": "2020-07-01",
            "privateEndpointsPrivateDnsZoneGroups": "2020-07-01",
            "redis": "2020-12-01",
            "redisFirewallRules": "2020-12-01"
        },
        "audit": "[union(variables('defaultResourceProperties').audit, parameters('audit'))]",
        "defaultResourceProperties": {
            "audit": {
                "isEnabled": true,
                "logAnalyticsWorkspace": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "logNames": [],
                "retentionPolicy": {
                    "days": 137,
                    "isEnabled": true
                }
            },
            "privateEndpoint": {
                "dnsZone": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "location": "[parameters('location')]",
                "subnet": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "subnet": {
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            }
        },
        "isAuditEnabled": "[variables('audit').isEnabled]",
        "isAuditLogAnalyticsWorkspaceNameNotEmpty": "[not(empty(variables('audit').logAnalyticsWorkspace.name))]",
        "isClusteringEnabled": "[greater(parameters('numberOfShards'), 0)]",
        "privateEndpointsCount": "[length(parameters('privateEndpoints'))]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceIds": {
            "auditLogAnalyticsWorkspace": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.OperationalInsights/workspaces', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>'))]",
            "redis": "[resourceId('Microsoft.Cache/Redis', parameters('name'))]"
        },
        "subscriptionId": "[subscription().subscriptionId]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').redis]",
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": {
                "enableNonSslPort": false,
                "minimumTlsVersion": "[parameters('minimumSupportedTlsVersion')]",
                "publicNetworkAccess": "[if(parameters('isPublicNetworkAccessEnabled'), 'Enabled', 'Disabled')]",
                "redisVersion": "[parameters('version')]",
                "shardCount": "[if(variables('isClusteringEnabled'), parameters('numberOfShards'), null())]",
                "sku": {
                    "capacity": "[parameters('numberOfCapacityUnits')]",
                    "family": "[if(startsWith(parameters('skuName'), 'P'), 'P', 'C')]",
                    "name": "[parameters('skuName')]"
                },
                "staticIP": "[null()]",
                "subnetId": "[if(empty(parameters('subnet')), null(), resourceId(union(variables('defaultResourceProperties').subnet, parameters('subnet')).subscriptionId, union(variables('defaultResourceProperties').subnet, parameters('subnet')).resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('subnet').virtualNetworkName, parameters('subnet').name))]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Cache/Redis",
            "zones": "[if(empty(parameters('availabilityZones')), null(), parameters('availabilityZones'))]"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpoints]",
            "copy": {
                "count": "[variables('privateEndpointsCount')]",
                "mode": "Parallel",
                "name": "privateEndpointsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').redis]"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, parameters('privateEndpoints')[copyIndex()]).location]",
            "name": "[parameters('privateEndpoints')[copyIndex()].name]",
            "properties": {
                "customDnsConfigs": [],
                "privateLinkServiceConnections": [
                    {
                        "name": "[parameters('privateEndpoints')[copyIndex()].name]",
                        "properties": {
                            "groupIds": [
                                "redisCache"
                            ],
                            "privateLinkServiceId": "[variables('resourceIds').redis]"
                        }
                    }
                ],
                "subnet": {
                    "id": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint, parameters('privateEndpoints')[copyIndex()]).subnet.subscriptionId, union(variables('defaultResourceProperties').privateEndpoint, parameters('privateEndpoints')[copyIndex()]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('privateEndpoints')[copyIndex()].subnet.virtualNetworkName, parameters('privateEndpoints')[copyIndex()].subnet.name)]"
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/privateEndpoints"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpointsPrivateDnsZoneGroups]",
            "copy": {
                "count": "[variables('privateEndpointsCount')]",
                "mode": "Parallel",
                "name": "privateDnsZoneGroupsCopy"
            },
            "dependsOn": [
                "privateEndpointsCopy"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, parameters('privateEndpoints')[copyIndex()]).location]",
            "name": "[format('{0}/default', parameters('privateEndpoints')[copyIndex()].name)]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(parameters('privateEndpoints')[copyIndex()].dnsZones)]",
                        "input": {
                            "name": "[replace(parameters('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name, '.', '-')]",
                            "properties": {
                                "privateDnsZoneId": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint.dnsZone, parameters('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).subscriptionId, union(variables('defaultResourceProperties').privateEndpoint.dnsZone, parameters('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).resourceGroupName, 'Microsoft.Network/privateDnsZones', parameters('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name)]"
                            }
                        },
                        "name": "privateDnsZoneConfigs"
                    }
                ]
            },
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
        },
        {
            "apiVersion": "[variables('apiVersions').redisFirewallRules]",
            "copy": {
                "count": "[length(parameters('firewallRules'))]",
                "mode": "Parallel",
                "name": "firewallRulesCopy"
            },
            "dependsOn": [
                "privateDnsZoneGroupsCopy",
                "[variables('resourceIds').redis]"
            ],
            "name": "[format('{0}/{1}', parameters('name'), parameters('firewallRules')[copyIndex()].name)]",
            "properties": {
                "endIp": "[parameters('firewallRules')[copyIndex()].endIpAddress]",
                "startIp": "[parameters('firewallRules')[copyIndex()].startIpAddress]"
            },
            "type": "Microsoft.Cache/Redis/firewallRules"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "condition": "[or(variables('isAuditEnabled'), variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'))]",
            "dependsOn": [
                "[variables('resourceIds').redis]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/Microsoft.Insights/audit', parameters('name'))]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(variables('audit').logNames)]",
                        "input": {
                            "category": "[variables('audit').logNames[copyIndex('logs')]]",
                            "enabled": "[variables('isAuditEnabled')]",
                            "retentionPolicy": {
                                "days": "[variables('audit').retentionPolicy.days]",
                                "enabled": "[variables('audit').retentionPolicy.isEnabled]"
                            }
                        },
                        "name": "logs"
                    }
                ],
                "workspaceId": "[variables('resourceIds').auditLogAnalyticsWorkspace]"
            },
            "type": "Microsoft.Cache/Redis/providers/diagnosticsettings"
        }
    ]
}
