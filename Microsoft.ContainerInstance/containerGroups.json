{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "containers": {
            "metadata": {
                "description": "An array of containers that will be deployed within the Azure Container Group."
            },
            "type": "array"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Container Group resource(s) should be deployed."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 63,
            "metadata": {
                "description": "Specifies the name of the Azure Container Group."
            },
            "minLength": 1,
            "type": "string"
        },
        "operatingSystemName": {
            "allowedValues": [
                "Linux",
                "Windows"
            ],
            "defaultValue": "Linux",
            "metadata": {
                "description": "Specifies the name of operating system that the Azure Container Group will run within."
            },
            "type": "string"
        },
        "ports": {
            "defaultValue": [
                {
                    "port": 80,
                    "protocol": "tcp"
                }
            ],
            "metadata": {
                "description": "An array of ports that will be opened to the Azure Container Group."
            },
            "type": "array"
        },
        "restartPolicy": {
            "allowedValues": [
                "Always",
                "Never",
                "OnFailure"
            ],
            "defaultValue": "Always",
            "metadata": {
                "description": "Specifies restart policy of the Azure Container Group."
            },
            "type": "string"
        },
        "skuName": {
            "allowedValues": [
                "Dedicated",
                "Standard"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "Specifies the SKU name of the Azure Container Group."
            },
            "type": "string"
        },
        "subnetName": {
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the subnet name within the virtual network that the Azure Container Group will be associated with."
            },
            "type": "string"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Container Group."
            },
            "type": "object"
        },
        "virtualNetworkName": {
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the name of the virtual network that the Azure Container Group will be associated with."
            },
            "type": "string"
        },
        "virtualNetworkResourceGroupName": {
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Specifies the resource group name of the virtual network that the Azure Container Group will be associated with."
            },
            "type": "string"
        },
        "virtualNetworkSubscriptionId": {
            "defaultValue": "[subscription().subscriptionId]",
            "metadata": {
                "description": "Specifies the subscription id of the virtual network that the Azure Container Group will be associated with."
            },
            "type": "string"
        }
    },
    "variables": {
        "defaultResourceProperties": {
            "container": {
                "command": "[json('null')]",
                "environmentVariables": [],
                "image": "mcr.microsoft.com/azuredocs/aci-helloworld",
                "ports": "[parameters('ports')]",
                "resources": {
                    "limits": {
                        "cpuCoreCount": "[json('null')]",
                        "gpuProperties": "[json('null')]",
                        "memorySizeInGigabytes": "[json('null')]"
                    },
                    "requests": {
                        "cpuCoreCount": 1.0,
                        "gpuProperties": "[json('null')]",
                        "memorySizeInGigabytes": 1.5
                    }
                }
            }
        },
        "isAttachedToNetworkProfile": "[or(variables('subnetNameIsNotEmpty'), variables('virtualNetworkNameIsNotEmpty'))]",
        "networkProfileName": "[format('{0}-containernic', parameters('name'))]",
        "resourceIds": {
            "networkProfile": "[resourceId('Microsoft.Network/networkProfiles', variables('networkProfileName'))]"
        },
        "subnetNameIsNotEmpty": "[not(empty(parameters('subnetName')))]",
        "virtualNetworkNameIsNotEmpty": "[not(empty(parameters('virtualNetworkName')))]"
    },
    "resources": [
        {
            "apiVersion": "2020-07-01",
            "condition": "[variables('isAttachedToNetworkProfile')]",
            "location": "[parameters('location')]",
            "name": "[variables('networkProfileName')]",
            "properties": {
                "containerNetworkInterfaceConfigurations": [
                    {
                        "name": "default",
                        "properties": {
                            "ipConfigurations": [
                                {
                                    "name": "default",
                                    "properties": {
                                        "subnet": {
                                            "id": "[resourceId(parameters('virtualNetworkSubscriptionId'), parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "type": "Microsoft.Network/networkProfiles"
        },
        {
            "apiVersion": "2019-12-01",
            "dependsOn": [
                "[variables('resourceIds').networkProfile]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(parameters('containers'))]",
                        "input": {
                            "name": "[parameters('containers')[copyIndex('containers')].name]",
                            "properties": {
                                "command": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).command]",
                                "environmentVariables": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).environmentVariables]",
                                "image": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).image]",
                                "ports": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).ports]",
                                "resources": {
                                    "limits": {
                                        "cpu": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).resources.limits.cpuCoreCount]",
                                        "gpu": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).resources.limits.gpuProperties]",
                                        "memoryInGB": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).resources.limits.memorySizeInGigabytes]"
                                    },
                                    "requests": {
                                        "cpu": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).resources.requests.cpuCoreCount]",
                                        "gpu": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).resources.requests.gpuProperties]",
                                        "memoryInGB": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).resources.requests.memorySizeInGigabytes]"
                                    }
                                }
                            }
                        },
                        "name": "containers"
                    }
                ],
                "ipAddress": {
                    "ports": "[parameters('ports')]",
                    "type": "[if(variables('isAttachedToNetworkProfile'), 'Private', 'Public')]"
                },
                "networkProfile": "[if(variables('isAttachedToNetworkProfile'), createObject('id', variables('resourceIds').networkProfile), json('null'))]",
                "osType": "[parameters('operatingSystemName')]",
                "restartPolicy": "[parameters('restartPolicy')]",
                "sku": "[parameters('skuName')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.ContainerInstance/containerGroups"
        }
    ]
}
