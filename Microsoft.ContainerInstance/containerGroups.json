{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "examples": [
            {
                "description": "Deploys a container instance with the recommended set of properties for a development environment.",
                "name": "Development",
                "value": {
                    "audit": {
                        "isEnabled": false
                    },
                    "containers": [
                        {
                            "name": "HelloAci"
                        }
                    ],
                    "name": "MyContainerInstance",
                    "operatingSystemName": "Linux",
                    "ports": [
                        {
                            "port": 443,
                            "protocol": "tcp"
                        }
                    ]
                }
            },
            {
                "description": "Deploys a container instance with the recommended set of properties for a production environment.",
                "name": "Production",
                "value": {
                    "audit": {
                        "logAnalyticsWorkspace": {
                            "name": "MyLogAnalyticsWorkspace"
                        }
                    },
                    "containers": [
                        {
                            "name": "HelloAci"
                        }
                    ],
                    "name": "MyContainerInstance",
                    "operatingSystemName": "Linux",
                    "ports": [
                        {
                            "port": 443,
                            "protocol": "tcp"
                        }
                    ],
                    "subnet": {
                        "name":"MySubnet",
                        "virtualNetworkName": "MyVirtualNetwork"
                    }
                }
            }
        ]
    },
    "parameters": {
        "audit": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the audit settings that will be applied to the Azure Container Group."
            },
            "type": "object"
        },
        "customerManagedEncryption": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the customer-managed encryption settings that will be applied to the Azure Container Group."
            },
            "type": "object"
        },
        "containers": {
            "metadata": {
                "description": "An array of containers that will be deployed within the Azure Container Group."
            },
            "type": "array"
        },
        "dnsPrefix": {
            "defaultValue": "[parameters('name')]",
            "metadata": {
                "description": "Specifies the DNS prefix to that will be assigned to the Azure Container Group."
            },
            "type": "string"
        },
        "identity": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the properties of the identity that will be assigned to the Azure Container Group."
            },
            "type": "object"
        },
        "imageRegistryCredentials": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the array of image registry credentials that will be stored within the Azure Container Group."
            },
            "type": "secureObject"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Container Group resource(s) should be deployed."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 63,
            "metadata": {
                "description": "Specifies the name of the Azure Container Group."
            },
            "minLength": 1,
            "type": "string"
        },
        "operatingSystemName": {
            "allowedValues": [
                "Linux",
                "Windows"
            ],
            "defaultValue": "Linux",
            "metadata": {
                "description": "Specifies the name of operating system that the Azure Container Group will run within."
            },
            "type": "string"
        },
        "ports": {
            "defaultValue": [
                {
                    "port": 443,
                    "protocol": "tcp"
                }
            ],
            "metadata": {
                "description": "An array of ports that will be opened to the Azure Container Group."
            },
            "type": "array"
        },
        "restartPolicy": {
            "allowedValues": [
                "Always",
                "Never",
                "OnFailure"
            ],
            "defaultValue": "Always",
            "metadata": {
                "description": "Specifies restart policy of the Azure Container Group."
            },
            "type": "string"
        },
        "skuName": {
            "allowedValues": [
                "Dedicated",
                "Standard"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "Specifies the SKU name of the Azure Container Group."
            },
            "type": "string"
        },
        "subnet": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the properties of the subnet that the Azure Container Group will be integrated with."
            },
            "type": "object"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Container Group."
            },
            "type": "object"
        },
        "volumes": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of volumes that will be attached to the containers within the Azure Container Group."
            },
            "type": "array"
        }
    },
    "variables": {
        "apiVersions": {
            "containerGroups": "2021-03-01",
            "deployments": "2021-04-01",
            "keyVaults": "2019-09-01",
            "keyVaultsKeys": "2019-09-01",
            "logAnalyticsWorkspaces": "2020-08-01",
            "networkProfiles": "2021-02-01",
            "storageAccounts": "2021-02-01"
        },
        "audit": "[union(variables('defaultResourceProperties').audit, parameters('audit'))]",
        "customerManagedEncryption": "[union(variables('defaultResourceProperties').customerManagedEncryption, parameters('customerManagedEncryption'))]",
        "defaultResourceProperties": {
            "audit": {
                "isEnabled": true,
                "logAnalyticsWorkspace": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "retentionPolicy": {
                    "days": 137,
                    "isEnabled": true
                }
            },
            "container": {
                "command": "[null()]",
                "environmentVariables": [],
                "image": "mcr.microsoft.com/azuredocs/aci-helloworld",
                "ports": "[parameters('ports')]",
                "resources": {
                    "limits": {
                        "cpuCoreCount": "[null()]",
                        "gpuProperties": "[null()]",
                        "memorySizeInGigabytes": "[null()]"
                    },
                    "requests": {
                        "cpuCoreCount": 1.0,
                        "gpuProperties": "[null()]",
                        "memorySizeInGigabytes": 1.5
                    }
                }
            },
            "customerManagedEncryption": {
                "isEnabled": false,
                "keyName": "",
                "keyVault": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "keyVersion": ""
            },
            "identity": {
                "isEnabled": true,
                "type": "[if(greater(variables('userAssignedIdentitiesCount'), 0), 'UserAssigned', 'SystemAssigned')]",
                "userAssignedIdentities": []
            },
            "subnet": {
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "userAssignedIdentity": {
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "volume": {
                "isEphemeral": false,
                "gitRepository": {
                    "directory": ".",
                    "url": "",
                    "revision": "HEAD"
                },
                "storageAccount": {
                    "fileShareName": "",
                    "isReadOnly": true,
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "secrets": {}
            }
        },
        "identity": "[union(variables('defaultResourceProperties').identity, parameters('identity'))]",
        "isAuditEnabled": "[variables('audit').isEnabled]",
        "isAuditLogAnalyticsWorkspaceNameNotEmpty": "[not(empty(variables('audit').logAnalyticsWorkspace.name))]",
        "isCustomerManagedEncryptionEnabled": "[variables('customerManagedEncryption').isEnabled]",
        "networkProfileName": "[format('{0}-containernic', parameters('name'))]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceIds": {
            "auditLogAnalyticsWorkspace": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.OperationalInsights/workspaces', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>'))]",
            "containerGroups": "[resourceId('Microsoft.ContainerInstance/containerGroups', parameters('name'))]",
            "containerGroupsCustomerManagedEncryptionKeyVault": "[resourceId(variables('customerManagedEncryption').keyVault.subscriptionId, variables('customerManagedEncryption').keyVault.resourceGroupName, 'Microsoft.KeyVault/vaults', if(variables('isCustomerManagedEncryptionEnabled'), variables('customerManagedEncryption').keyVault.name, '<NULL>'))]",
            "keyVaultCryptoServiceEncryptionUserRoleDefinition": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
            "networkProfile": "[resourceId('Microsoft.Network/networkProfiles', variables('networkProfileName'))]"
        },
        "subnet": "[union(variables('defaultResourceProperties').subnet, parameters('subnet'))]",
        "subnetIsNotEmpty": "[not(empty(parameters('subnet')))]",
        "subscriptionId": "[subscription().subscriptionId]",
        "userAssignedIdentitiesCount": "[length(union(createObject('userAssignedIdentities', createArray()), parameters('identity')).userAssignedIdentities)]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').networkProfiles]",
            "condition": "[variables('subnetIsNotEmpty')]",
            "location": "[parameters('location')]",
            "name": "[variables('networkProfileName')]",
            "properties": {
                "containerNetworkInterfaceConfigurations": [
                    {
                        "name": "default",
                        "properties": {
                            "ipConfigurations": [
                                {
                                    "name": "default",
                                    "properties": {
                                        "subnet": {
                                            "id": "[resourceId(variables('subnet').subscriptionId, variables('subnet').resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', variables('subnet').virtualNetworkName, variables('subnet').name)]"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "type": "Microsoft.Network/networkProfiles"
        },
        {
            "apiVersion": "[variables('apiVersions').containerGroups]",
            "dependsOn": [
                "[variables('resourceIds').networkProfile]"
            ],
            "identity": "[if(variables('identity').isEnabled, union(createObject('type', union(variables('defaultResourceProperties').identity, parameters('identity')).type), if(contains(variables('identity').type, 'UserAssigned'), createObject('userAssignedIdentities', createObject(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', first(variables('identity').userAssignedIdentities).name), createObject())), createObject())), null())]",
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(parameters('containers'))]",
                        "input": {
                            "name": "[parameters('containers')[copyIndex('containers')].name]",
                            "properties": {
                                "command": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).command]",
                                "environmentVariables": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).environmentVariables]",
                                "image": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).image]",
                                "ports": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).ports]",
                                "resources": {
                                    "limits": {
                                        "cpu": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).resources.limits.cpuCoreCount]",
                                        "gpu": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).resources.limits.gpuProperties]",
                                        "memoryInGB": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).resources.limits.memorySizeInGigabytes]"
                                    },
                                    "requests": {
                                        "cpu": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).resources.requests.cpuCoreCount]",
                                        "gpu": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).resources.requests.gpuProperties]",
                                        "memoryInGB": "[union(variables('defaultResourceProperties').container, parameters('containers')[copyIndex('containers')]).resources.requests.memorySizeInGigabytes]"
                                    }
                                }
                            }
                        },
                        "name": "containers"
                    },
                    {
                        "count": "[length(union(createObject('collection', createArray()), parameters('imageRegistryCredentials')).collection)]",
                        "input": {
                            "password": "[parameters('imageRegistryCredentials').collection[copyIndex('imageRegistryCredentials')].password]",
                            "server": "[parameters('imageRegistryCredentials').collection[copyIndex('imageRegistryCredentials')].server]",
                            "username": "[parameters('imageRegistryCredentials').collection[copyIndex('imageRegistryCredentials')].userName]"
                        },
                        "name": "imageRegistryCredentials"
                    },
                    {
                        "count": "[length(parameters('volumes'))]",
                        "input": {
                            "azureFile": "[if(empty(union(variables('defaultResourceProperties').volume, parameters('volumes')[copyIndex('volumes')]).storageAccount.name), null(), createObject('readOnly', union(variables('defaultResourceProperties').volume, parameters('volumes')[copyIndex('volumes')]).storageAccount.isReadOnly, 'shareName', union(variables('defaultResourceProperties').volume, parameters('volumes')[copyIndex('volumes')]).storageAccount.fileShareName, 'storageAccountKey', listKeys(resourceId(union(variables('defaultResourceProperties').volume, parameters('volumes')[copyIndex('volumes')]).storageAccount.subscriptionId, union(variables('defaultResourceProperties').volume, parameters('volumes')[copyIndex('volumes')]).storageAccount.resourceGroupName, 'Microsoft.Storage/storageAccounts', union(variables('defaultResourceProperties').volume, parameters('volumes')[copyIndex('volumes')]).storageAccount.name), variables('apiVersions').storageAccounts).keys[1].value, 'storageAccountName', union(variables('defaultResourceProperties').volume, parameters('volumes')[copyIndex('volumes')]).storageAccount.name))]",
                            "emptyDir": "[if(union(variables('defaultResourceProperties').volume, parameters('volumes')[copyIndex('volumes')]).isEphemeral, createObject(), null())]",
                            "gitRepo": "[if(empty(union(variables('defaultResourceProperties').volume, parameters('volumes')[copyIndex('volumes')]).gitRepository.url), null(), createObject('directory', union(variables('defaultResourceProperties').volume, parameters('volumes')[copyIndex('volumes')]).gitRepository.directory, 'repository', union(variables('defaultResourceProperties').volume, parameters('volumes')[copyIndex('volumes')]).gitRepository.url, 'revision', union(variables('defaultResourceProperties').volume, parameters('volumes')[copyIndex('volumes')]).gitRepository.revision))]",
                            "name": "[parameters('volumes')[copyIndex('volumes')].name]",
                            "secret": "[if(empty(union(variables('defaultResourceProperties').volume, parameters('volumes')[copyIndex('volumes')]).secrets), null(), union(variables('defaultResourceProperties').volume, parameters('volumes')[copyIndex('volumes')]).secrets)]"
                        },
                        "name": "volumes"
                    }
                ],
                "diagnostics": {
                    "logAnalytics": "[if(variables('isAuditEnabled'), createObject('logType', 'ContainerInstance', 'workspaceId', reference(variables('resourceIds').auditLogAnalyticsWorkspace, variables('apiVersions').logAnalyticsWorkspaces).customerId, 'workspaceKey', listKeys(variables('resourceIds').auditLogAnalyticsWorkspace, variables('apiVersions').logAnalyticsWorkspaces).primarySharedKey), null())]"
                },
                "dnsConfig": "[null()]",
                "encryptionProperties": "[if(variables('isCustomerManagedEncryptionEnabled'), createObject('keyName', variables('customerManagedEncryption').keyName, 'keyVersion', last(split(reference(format('{0}/keys/{1}{2}', variables('resourceIds').containerGroupsCustomerManagedEncryptionKeyVault, variables('customerManagedEncryption').keyName, if(empty(variables('customerManagedEncryption').keyVersion), '', format('/versions/{0}', variables('customerManagedEncryption').keyVersion))), variables('apiVersions').keyVaultsKeys).keyUriWithVersion, '/')), 'vaultBaseUrl', reference(variables('resourceIds').containerGroupsCustomerManagedEncryptionKeyVault, variables('apiVersions').keyVaults).vaultUri), null())]",
                "ipAddress": {
                    "dnsNameLabel": "[if(variables('subnetIsNotEmpty'), null(), toLower(parameters('dnsPrefix')))]",
                    "ports": "[parameters('ports')]",
                    "type": "[if(variables('subnetIsNotEmpty'), 'Private', 'Public')]"
                },
                "networkProfile": "[if(variables('subnetIsNotEmpty'), createObject('id', variables('resourceIds').networkProfile), null())]",
                "osType": "[parameters('operatingSystemName')]",
                "restartPolicy": "[parameters('restartPolicy')]",
                "sku": "[parameters('skuName')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.ContainerInstance/containerGroups"
        }
    ]
}
