{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "administratorUserName": {
            "defaultValue": "[uniqueString(parameters('name'))]",
            "metadata": {
                "description": "Specifies the user name of the administrator account to the virtual machines that are deployed within the Azure Virtual Machine Scale Set."
            },
            "type": "securestring"
        },
        "administratorUserPassword": {
            "defaultValue": "[base64(replace(format('{0}{1}', newGuid(), newGuid()), '-', ''))]",
            "metadata": {
                "description": "Specifies the password of the administrator account to the virtual machines that are deployed within the Azure Virtual Machine Scale Set."
            },
            "type": "securestring"
        },
        "audit": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the audit settings that will be applied to the Azure Virtual Machine Scale Set."
            },
            "type": "object"
        },
        "autoscale": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the autoscale settings that will be applied to the Azure Virtual Machine Scale Set."
            },
            "type": "object"
        },
        "availabilityZones": {
            "defaultValue": [
                1,
                2,
                3
            ],
            "metadata": {
                "description": "Specifies an array of availability zones that the Azure Virtual Machine Scale Set will be deployed within."
            },
            "type": "array"
        },
        "computerNamePrefix": {
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the prefix of the computer name that will be assigned to virtual machines that are deployed within the Azure Virtual Machine Scale Set."
            },
            "type": "string"
        },
        "diskEncryptionSet": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the properties of the Azure Disk Encryption Set that the Azure Virtual Machine Scale Set will be assigned to."
            },
            "type": "object"
        },
        "extensions": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the properties of the extensions that will be applied to the virtual machines that are deployed within the Azure Virtual Machine Scale Set."
            },
            "type": "secureObject"
        },
        "host": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the properties of the Azure Dedicated Host that the Azure Virtual Machine Scale Set will be assigned to."
            },
            "type": "object"
        },
        "identity": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the properties of the identity that will be assigned to the Azure Virtual Machine Scale Set."
            },
            "type": "object"
        },
        "imageReference": {
            "metadata": {
                "description": "Specifies the properties of the image that will be used to provision the virtual machines that are deployed within the Azure Virtual Machine Scale Set."
            },
            "type": "object"
        },
        "isOverprovisioningEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the Azure Virtual Machine Scale Set will overprovision resources to improve provisioning success rates and reduce deployment time."
            },
            "type": "bool"
        },
        "isUltraSsdSupportEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether support for attaching ultra SSDs is enabled on the Azure Virtual Machine Scale Set."
            },
            "type": "bool"
        },
        "licenseType": {
            "defaultValue": "None",
            "metadata": {
                "description": "Specifies the type of license that will be applied to the virtual machines that are deployed within the Azure Virtual Machine Scale Set."
            },
            "type": "string"
        },
        "linuxConfiguration": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the Linux configuration that will be applied to the Azure Virtual Machine Scale Set."
            },
            "type": "secureObject"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Virtual Machine Scale Set resource(s) should be deployed."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 61,
            "minLength": 3,
            "metadata": {
                "description": "Specifies the name of the Azure Virtual Machine Scale Set."
            },
            "type": "string"
        },
        "networkInterfaceConfigurations": {
            "metadata": {
                "description": "An array of network interface configurations that will be applied to the Azure Virtual Machine Scale Set."
            },
            "type": "array"
        },
        "numberOfFaultDomains": {
            "defaultValue": 1,
            "maxValue": 5,
            "minValue": 1,
            "metadata": {
                "description": "Specifies the number of fault domains that the Azure Virtual Machine Scale Set will be deployed within."
            },
            "type": "int"
        },
        "numberOfVirtualMachines": {
            "defaultValue": 0,
            "metadata": {
                "description": "Specifies the number of virtual machines that will be deployed within the Azure Virtual Machine Scale Set."
            },
            "type": "int"
        },
        "orchestrationMode": {
            "allowedValues": [
                "Flexible",
                "Uniform"
            ],
            "defaultValue": "Uniform",
            "metadata": {
                "description": "Specifies the orchestration mode of the Azure Virtual Machine Scale Set."
            },
            "type": "string"
        },
        "osDisk": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the properties of the operating system disk that will be provisioned and assigned to the virtual machines that are deployed within the Azure Virtual Machine Scale Set."
            },
            "type": "object"
        },
        "priority": {
            "allowedValues": [
                "Low",
                "Regular",
                "Spot"
            ],
            "defaultValue": "Regular",
            "metadata": {
                "description": "Specifies the priority of the virtual machines that are deployed within the Azure Virtual Machine Scale Set."
            },
            "type": "string"
        },
        "proximityPlacementGroup": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the properties of the Azure Proximity Placement Group that the Azure Virtual Machine Scale Set will be assigned to."
            },
            "type": "object"
        },
        "skuName": {
            "defaultValue": "Standard_D2s_v4",
            "metadata": {
                "description": "Specifies the SKU name of the virtual machines that are deployed within the Azure Virtual Machine Scale Set."
            },
            "type": "string"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Virtual Machine Scale Set."
            },
            "type": "object"
        },
        "windowsConfiguration": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the Windows configuration that will be applied to the Azure Virtual Machine Scale Set."
            },
            "type": "secureObject"
        }
    },
    "variables": {
        "apiVersions": {
            "autoscaleSettings": "2015-04-01",
            "diagnosticSettings": "2017-05-01-preview",
            "logAnalyticsWorkspaces": "2020-08-01",
            "virtualMachineScaleSets": "2021-04-01"
        },
        "audit": "[union(variables('defaultResourceProperties').audit, parameters('audit'))]",
        "autoscale": "[union(variables('defaultResourceProperties').autoscale, parameters('autoscale'))]",
        "defaultResourceProperties": {
            "audit": {
                "isEnabled": true,
                "logAnalyticsWorkspace": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "logNames": [
                    "AutoscaleEvaluations",
                    "AutoscaleScaleActions"
                ],
                "retentionPolicy": {
                    "days": 137,
                    "isEnabled": true
                }
            },
            "autoscale": {
                "isEnabled": false,
                "name": "[format('VMSS_{0}', parameters('name'))]",
                "notifications": [],
                "profiles": [
                    {
                        "capacity": {
                            "default": 1,
                            "maximum": 13,
                            "minimum": 1
                        },
                        "name": "Default",
                        "rules": [
                            {
                                "metricTrigger": {
                                    "Dimensions": [],
                                    "dividePerInstance": false,
                                    "metricName": "Percentage CPU",
                                    "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('name'))]",
                                    "operator": "GreaterThan",
                                    "statistic": "Average",
                                    "threshold": 61,
                                    "timeAggregation": "Average",
                                    "timeGrain": "PT1M",
                                    "timeWindow": "PT5M"
                                },
                                "scaleAction": {
                                    "cooldown": "PT5M",
                                    "direction": "Increase",
                                    "type": "ChangeCount",
                                    "value": 1
                                }
                            },
                            {
                                "metricTrigger": {
                                    "Dimensions": [],
                                    "dividePerInstance": false,
                                    "metricName": "Percentage CPU",
                                    "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('name'))]",
                                    "operator": "LessThan",
                                    "statistic": "Average",
                                    "threshold": 31,
                                    "timeAggregation": "Average",
                                    "timeGrain": "PT1M",
                                    "timeWindow": "PT5M"
                                },
                                "scaleAction": {
                                    "cooldown": "PT5M",
                                    "direction": "Decrease",
                                    "type": "ChangeCount",
                                    "value": "1"
                                }
                            }
                        ]
                    }
                ]
            },
            "diskEncryptionSet": {
                "name": "",
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "extensions": {
                "azureActiveDirectoryDomainJoin": {
                    "isEnabled": false,
                    "isRestartAfterJoinEnabled": false,
                    "numberOfRetries": 3,
                    "options": 1,
                    "retryIntervalInSeconds": 17,
                    "version": "1.3"
                },
                "azureAntimalwareAgent": {
                    "isEnabled": true,
                    "exclusions": {
                        "extensions": ".ldf;.log",
                        "paths": "[null()]",
                        "processes": "mssence.svc"
                    },
                    "isAntimalwareEnabled": true,
                    "isRealtimeProtectionEnabled": true,
                    "scheduledScanSettings": {
                        "day": 0,
                        "isEnabled": true,
                        "time": 1290,
                        "type": "Quick"
                    },
                    "version": "1.5"
                },
                "azureCustomScript": {
                    "isEnabled": false,
                    "isDos2UnixTransformEnabled": true,
                    "fileUris": "[null()]",
                    "script": "[null()]",
                    "timestamp": "[null()]",
                    "version": "[if(variables('isLinuxVirtualMachineScaleSet'), '2.1', if(variables('isWindowsVirtualMachineScaleSet'), '1.10', null()))]"
                },
                "azureDependencyAgent": {
                    "isEnabled": true,
                    "version": "[if(variables('isLinuxVirtualMachineScaleSet'), '9.9', if(variables('isWindowsVirtualMachineScaleSet'), '9.9', null()))]"
                },
                "azureGuestAttestationAgent": {
                    "isEnabled": false,
                    "version": "[if(variables('isLinuxVirtualMachineScaleSet'), '1.0', if(variables('isWindowsVirtualMachineScaleSet'), '1.0', null()))]"
                },
                "azureGuestConfigurationAgent": {
                    "isEnabled": true,
                    "version": "[if(variables('isLinuxVirtualMachineScaleSet'), '1.9', if(variables('isWindowsVirtualMachineScaleSet'), '1.9', null()))]"
                },
                "azureGuestHealthAgent": {
                    "isEnabled": true,
                    "version": "[if(variables('isLinuxVirtualMachineScaleSet'), '1.0', if(variables('isWindowsVirtualMachineScaleSet'), '1.0', null()))]"
                },
                "azureKeyVaultAgent": {
                    "isEnabled": false,
                    "isInitialSyncRequired": true,
                    "version": "[if(variables('isLinuxVirtualMachineScaleSet'), '2.0', if(variables('isWindowsVirtualMachineScaleSet'), '1.0', null()))]"
                },
                "azureLogAnalyticsAgent": {
                    "isEnabled": false,
                    "version": "[if(variables('isLinuxVirtualMachineScaleSet'), '1.13', if(variables('isWindowsVirtualMachineScaleSet'), '1.0', null()))]"
                },
                "azureMonitorAgent": {
                    "isEnabled": true,
                    "version": "[if(variables('isLinuxVirtualMachineScaleSet'), '1.9', if(variables('isWindowsVirtualMachineScaleSet'), '1.0', null()))]"
                },
                "azureNetworkWatcherAgent": {
                    "isEnabled": true,
                    "version": "[if(variables('isLinuxVirtualMachineScaleSet'), '1.4', if(variables('isWindowsVirtualMachineScaleSet'), '1.4', null()))]"
                }
            },
            "host": {
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "identity": {
                "isEnabled": true,
                "type": "[if(greater(variables('userAssignedIdentitiesCount'), 0), 'UserAssigned', 'SystemAssigned')]",
                "userAssignedIdentities": []
            },
            "linuxConfiguration": {
                "administratorUserPublicSshKey": "",
                "isPasswordAuthenticationEnabled": true,
                "isVmAgentEnabled": true,
                "patchSettings": {
                    "mode": "ImageDefault"
                }
            },
            "networkConfiguration": {
                "dnsSettings": "[null()]",
                "isAcceleratedNetworkingEnabled": false,
                "isFpgaEnabled": false,
                "isIpForwardingEnabled": false,
                "networkSecurityGroup": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "osDisk": {
                "cachingMode": "ReadWrite",
                "createOption": "FromImage",
                "isEphemeral": false,
                "isWriteAcceleratorEnabled": false,
                "storageAccountType": "Premium_LRS"
            },
            "proximityPlacementGroup": {
                "name": "",
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "windowsConfiguration": {
                "isVmAgentEnabled": true,
                "patchSettings": {
                    "isHotPatchingEnabled": false,
                    "mode": "AutomaticByOS"
                },
                "timeZone": "UTC"
            }
        },
        "diskEncryptionSet": "[union(variables('defaultResourceProperties').diskEncryptionSet, parameters('diskEncryptionSet'))]",
        "extensions": "[union(variables('defaultResourceProperties').extensions, parameters('extensions'))]",
        "extensionsArrays": {
            "azureActiveDirectoryDomainJoin": "[if(variables('extensions').azureActiveDirectoryDomainJoin.isEnabled, createArray(variables('extensionsProfiles').azureActiveDirectoryDomainJoin), createArray())]",
            "azureAntimalwareAgent": "[if(and(variables('isWindowsVirtualMachineScaleSet'), variables('extensions').azureAntimalwareAgent.isEnabled), createArray(variables('extensionsProfiles').azureAntimalwareAgent), createArray())]",
            "azureDependencyAgent": "[if(variables('extensions').azureDependencyAgent.isEnabled, createArray(variables('extensionsProfiles').azureDependencyAgent), createArray())]",
            "azureCustomScript": "[if(variables('extensions').azureCustomScript.isEnabled, createArray(variables('extensionsProfiles').azureCustomScript), createArray())]",
            "azureGuestConfigurationAgent": "[if(variables('extensions').azureGuestConfigurationAgent.isEnabled, createArray(variables('extensionsProfiles').azureGuestConfigurationAgent), createArray())]",
            "azureGuestHealthAgent": "[if(variables('extensions').azureGuestHealthAgent.isEnabled, createArray(variables('extensionsProfiles').azureGuestHealthAgent), createArray())]",
            "azureKeyVaultAgent": "[if(variables('extensions').azureKeyVaultAgent.isEnabled, createArray(variables('extensionsProfiles').azureKeyVaultAgent), createArray())]",
            "azureLogAnalyticsAgent": "[if(and(variables('isAuditEnabled'), variables('extensions').azureLogAnalyticsAgent.isEnabled), createArray(variables('extensionsProfiles').azureLogAnalyticsAgent), createArray())]",
            "azureMonitorAgent": "[if(variables('extensions').azureMonitorAgent.isEnabled, createArray(variables('extensionsProfiles').azureMonitorAgent), createArray())]",
            "azureNetworkWatcherAgent": "[if(variables('extensions').azureNetworkWatcherAgent.isEnabled, createArray(variables('extensionsProfiles').azureNetworkWatcherAgent), createArray())]"
        },
        "extensionsProfiles": {
            "azureActiveDirectoryDomainJoin": {
                "name": "AzureActiveDirectoryDomainJoin",
                "properties": {
                    "autoUpgradeMinorVersion": true,
                    "publisher": "Microsoft.Compute",
                    "protectedSettings": {
                        "Password": "[if(variables('extensions').azureActiveDirectoryDomainJoin.isEnabled, variables('extensions').azureActiveDirectoryDomainJoin.userPassword, null())]"
                    },
                    "provisionAfterExtensions": [
                        "AzureAntimalwareAgent",
                        "AzureDependencyAgent",
                        "AzureGuestConfigurationAgent",
                        "AzureGuestHealthAgent",
                        "AzureKeyVaultAgent",
                        "AzureLogAnalyticsAgent",
                        "AzureMonitorAgent",
                        "AzureNetworkWatcherAgent"
                    ],
                    "settings": {
                        "Name": "[if(variables('extensions').azureActiveDirectoryDomainJoin.isEnabled, variables('extensions').azureActiveDirectoryDomainJoin.domainName, null())]",
                        "NumberOfRetries": "[variables('extensions').azureActiveDirectoryDomainJoin.numberOfRetries]",
                        "Options": "[variables('extensions').azureActiveDirectoryDomainJoin.options]",
                        "UnjoinDomainUser": "[null()]",
                        "OUPath": "[if(variables('extensions').azureActiveDirectoryDomainJoin.isEnabled, variables('extensions').azureActiveDirectoryDomainJoin.ouPath, null())]",
                        "Restart": "[variables('extensions').azureActiveDirectoryDomainJoin.isRestartAfterJoinEnabled]",
                        "RetryIntervalInMilliseconds": "[mul(variables('extensions').azureActiveDirectoryDomainJoin.retryIntervalInSeconds, 1000)]",
                        "User": "[if(variables('extensions').azureActiveDirectoryDomainJoin.isEnabled, variables('extensions').azureActiveDirectoryDomainJoin.userName, null())]"
                    },
                    "type": "JsonADDomainExtension",
                    "typeHandlerVersion": "[variables('extensions').azureActiveDirectoryDomainJoin.version]"
                }
            },
            "azureAntimalwareAgent": {
                "name": "AzureAntimalwareAgent",
                "properties": {
                    "autoUpgradeMinorVersion": true,
                    "enableAutomaticUpgrade": false,
                    "protectedSettings": "[null()]",
                    "publisher": "Microsoft.Azure.Security",
                    "settings": {
                        "AntimalwareEnabled": "[variables('extensions').azureAntimalwareAgent.isAntimalwareEnabled]",
                        "Exclusions": {
                            "Extensions": "[variables('extensions').azureAntimalwareAgent.exclusions.extensions]",
                            "Paths": "[variables('extensions').azureAntimalwareAgent.exclusions.paths]",
                            "Processes": "[variables('extensions').azureAntimalwareAgent.exclusions.processes]"
                        },
                        "RealtimeProtectionEnabled": "[variables('extensions').azureAntimalwareAgent.isRealtimeProtectionEnabled]",
                        "ScheduledScanSettings": {
                            "day": "[variables('extensions').azureAntimalwareAgent.scheduledScanSettings.day]",
                            "isEnabled": "[variables('extensions').azureAntimalwareAgent.scheduledScanSettings.isEnabled]",
                            "scanType": "[variables('extensions').azureAntimalwareAgent.scheduledScanSettings.type]",
                            "time": "[variables('extensions').azureAntimalwareAgent.scheduledScanSettings.time]"
                        }
                    },
                    "type": "IaaSAntimalware",
                    "typeHandlerVersion": "[variables('extensions').azureAntimalwareAgent.version]"
                }
            },
            "azureCustomScript": {
                "name": "AzureCustomScript",
                "properties": {
                    "autoUpgradeMinorVersion": true,
                    "enableAutomaticUpgrade": false,
                    "protectedSettings": {
                        "commandToExecute": "[if(variables('extensions').azureCustomScript.isEnabled, variables('extensions').azureCustomScript.commandToExecute, null())]",
                        "fileUris": "[variables('extensions').azureCustomScript.fileUris]",
                        "managedIdentity": {},
                        "script": "[if(variables('isLinuxVirtualMachineScaleSet'), variables('extensions').azureCustomScript.script, null())]"
                    },
                    "provisionAfterExtensions": [
                        "AzureActiveDirectoryDomainJoin",
                        "AzureAntimalwareAgent",
                        "AzureDependencyAgent",
                        "AzureGuestConfigurationAgent",
                        "AzureGuestHealthAgent",
                        "AzureKeyVaultAgent",
                        "AzureLogAnalyticsAgent",
                        "AzureMonitorAgent",
                        "AzureNetworkWatcherAgent"
                    ],
                    "publisher": "[if(variables('isLinuxVirtualMachineScaleSet'), 'Microsoft.Azure.Extensions', if(variables('isWindowsVirtualMachineScaleSet'), 'Microsoft.Compute', null()))]",
                    "settings": {
                        "skipDos2Unix": "[if(variables('isLinuxVirtualMachineScaleSet'), not(variables('extensions').azureCustomScript.isDos2UnixTransformEnabled), null())]",
                        "timestamp": "[variables('extensions').azureCustomScript.timestamp]"
                    },
                    "type": "[if(variables('isLinuxVirtualMachineScaleSet'), 'CustomScript', if(variables('isWindowsVirtualMachineScaleSet'), 'CustomScriptExtension', null()))]",
                    "typeHandlerVersion": "[variables('extensions').azureCustomScript.version]"
                }
            },
            "azureDependencyAgent": {
                "name": "AzureDependencyAgent",
                "properties": {
                    "autoUpgradeMinorVersion": true,
                    "enableAutomaticUpgrade": true,
                    "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                    "type": "[format('DependencyAgent{0}', variables('osType'))]",
                    "typeHandlerVersion": "[variables('extensions').azureDependencyAgent.version]"
                }
            },
            "azureGuestConfigurationAgent": {
                "name": "AzureGuestConfigurationAgent",
                "properties": {
                    "autoUpgradeMinorVersion": true,
                    "enableAutomaticUpgrade": true,
                    "publisher": "Microsoft.GuestConfiguration",
                    "type": "[format('Configurationfor{0}', variables('osType'))]",
                    "typeHandlerVersion": "[variables('extensions').azureGuestConfigurationAgent.version]"
                }
            },
            "azureGuestHealthAgent": {
                "name": "AzureGuestHealthAgent",
                "properties": {
                    "autoUpgradeMinorVersion": true,
                    "enableAutomaticUpgrade": false,
                    "provisionAfterExtensions": [
                        "AzureMonitorAgent"
                    ],
                    "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
                    "type": "[format('GuestHealth{0}Agent', variables('osType'))]",
                    "typeHandlerVersion": "[variables('extensions').azureGuestHealthAgent.version]"
                }
            },
            "azureKeyVaultAgent": {
                "name": "AzureKeyVaultAgent",
                "properties": {
                    "autoUpgradeMinorVersion": true,
                    "enableAutomaticUpgrade": true,
                    "publisher": "Microsoft.Azure.KeyVault",
                    "settings": {
                        "secretsManagementSettings": {
                            "certificateStoreLocation": "[if(variables('isLinuxVirtualMachineScaleSet'), '/var/lib/waagent/Microsoft.Azure.KeyVault', if(variables('isWindowsVirtualMachineScaleSet'), 'LocalMachine', null()))]",
                            "certificateStoreName": "[if(variables('isLinuxVirtualMachineScaleSet'), null(), if(variables('isWindowsVirtualMachineScaleSet'), 'MY', null()))]",
                            "linkOnRenewal": "[if(variables('isLinuxVirtualMachineScaleSet'), null(), if(variables('isWindowsVirtualMachineScaleSet'), false(), null()))]",
                            "observedCertificates": "[if(variables('extensions').azureKeyVaultAgent.isEnabled, variables('extensions').azureKeyVaultAgent.observedCertificates, null())]",
                            "requireInitialSync": "[variables('extensions').azureKeyVaultAgent.isInitialSyncRequired]"
                        }
                    },
                    "type": "[format('KeyVaultFor{0}', variables('osType'))]",
                    "typeHandlerVersion": "[variables('extensions').azureKeyVaultAgent.version]"
                }
            },
            "azureLogAnalyticsAgent": {
                "name": "AzureLogAnalyticsAgent",
                "properties": {
                    "autoUpgradeMinorVersion": true,
                    "enableAutomaticUpgrade": false,
                    "protectedSettings": {
                        "workspaceKey": "[if(and(variables('isAuditEnabled'), variables('extensions').azureLogAnalyticsAgent.isEnabled), variables('extensions').azureLogAnalyticsAgent.workspaceKey, null())]"
                    },
                    "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                    "settings": {
                        "workspaceId": "[if(and(variables('isAuditEnabled'), variables('extensions').azureLogAnalyticsAgent.isEnabled), variables('extensions').azureLogAnalyticsAgent.workspaceId, null())]"
                    },
                    "type": "[if(variables('isLinuxVirtualMachineScaleSet'), 'OmsAgentForLinux', if(variables('isWindowsVirtualMachineScaleSet'), 'MicrosoftMonitoringAgent', null()))]",
                    "typeHandlerVersion": "[variables('extensions').azureLogAnalyticsAgent.version]"
                }
            },
            "azureMonitorAgent": {
                "name": "AzureMonitorAgent",
                "properties": {
                    "autoUpgradeMinorVersion": true,
                    "enableAutomaticUpgrade": false,
                    "publisher": "Microsoft.Azure.Monitor",
                    "type": "[format('AzureMonitor{0}Agent', variables('osType'))]",
                    "typeHandlerVersion": "[variables('extensions').azureMonitorAgent.version]"
                }
            },
            "azureNetworkWatcherAgent": {
                "name": "AzureNetworkWatcherAgent",
                "properties": {
                    "autoUpgradeMinorVersion": true,
                    "enableAutomaticUpgrade": false,
                    "publisher": "Microsoft.Azure.NetworkWatcher",
                    "type": "[format('NetworkWatcherAgent{0}', variables('osType'))]",
                    "typeHandlerVersion": "[variables('extensions').azureNetworkWatcherAgent.version]"
                }
            }
        },
        "flexibleProperties": {
            "hostGroup": "[if(empty(parameters('host')), null(), createObject('id', resourceId(variables('host').subscriptionId, variables('host').resourceGroupName, 'Microsoft.Compute/hostGroups', variables('host').hostGroupName)))]",
            "platformFaultDomainCount": "[parameters('numberOfFaultDomains')]",
            "proximityPlacementGroup": "[if(empty(parameters('proximityPlacementGroup')), null(), createObject('id', resourceId(variables('proximityPlacementGroup').subscriptionId, variables('proximityPlacementGroup').resourceGroupName, 'Microsoft.Compute/proximityPlacementGroups', variables('proximityPlacementGroup').name)))]",
            "singlePlacementGroup": false
        },
        "host": "[union(variables('defaultResourceProperties').host, parameters('host'))]",
        "identity": "[union(variables('defaultResourceProperties').identity, parameters('identity'))]",
        "isAuditEnabled": "[variables('audit').isEnabled]",
        "isAuditLogAnalyticsWorkspaceNameNotEmpty": "[not(empty(variables('audit').logAnalyticsWorkspace.name))]",
        "isFlexibleVirtualMachineScaleSet": "[equals(toLower(parameters('orchestrationMode')), 'flexible')]",
        "isLinuxVirtualMachineScaleSet": "[or(not(empty(parameters('linuxConfiguration'))), equals(parameters('licenseType'), 'RHEL_BYOS'), equals(parameters('licenseType'), 'SLES_BYOS'), contains(union(createObject('id', ''), parameters('imageReference')).id, 'Linux'), contains(union(createObject('offer', ''), parameters('imageReference')).offer, 'Linux'))]",
        "isSpotVirtualMachineScaleSet": "[equals(toLower(parameters('priority')), 'spot')]",
        "isWindowsVirtualMachineScaleSet": "[or(not(empty(parameters('windowsConfiguration'))), equals(parameters('licenseType'), 'Windows_Client'), equals(parameters('licenseType'), 'Windows_Server'), contains(union(createObject('id', ''), parameters('imageReference')).id, 'Windows'), contains(union(createObject('offer', ''), parameters('imageReference')).offer, 'Windows'))]",
        "linuxConfiguration": {
            "disablePasswordAuthentication": "[not(variables('linuxConfigurationFriendly').isPasswordAuthenticationEnabled)]",
            "ssh": "[if(empty(variables('linuxConfigurationFriendly').administratorUserPublicSshKey), null(), createObject('publicKeys', createArray(createObject('keyData', variables('linuxConfigurationFriendly').administratorUserPublicSshKey, 'path', format('/home/{0}/.ssh/authorized_keys', parameters('administratorUserName'))))))]",
            "provisionVMAgent": "[variables('linuxConfigurationFriendly').isVmAgentEnabled]"
        },
        "linuxConfigurationFriendly": "[union(variables('defaultResourceProperties').linuxConfiguration, parameters('linuxConfiguration'))]",
        "networkInterfaceConfigurationsCount": "[length(parameters('networkInterfaceConfigurations'))]",
        "osType": "[if(variables('isLinuxVirtualMachineScaleSet'), 'Linux', if(variables('isWindowsVirtualMachineScaleSet'), 'Windows', 'Unknown'))]",
        "proximityPlacementGroup": "[union(variables('defaultResourceProperties').proximityPlacementGroup, parameters('proximityPlacementGroup'))]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceIds": {
            "auditLogAnalyticsWorkspace": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.OperationalInsights/workspaces', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>'))]",
            "autoscaleSettings": "[resourceId('Microsoft.Insights/autoscaleSettings', variables('autoscale').name)]",
            "virtualMachineScaleSet": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('name'))]"
        },
        "sku": {
            "capacity": "[parameters('numberOfVirtualMachines')]",
            "name": "[parameters('skuName')]"
        },
        "subscriptionId": "[subscription().subscriptionId]",
        "uniformProperties": {
            "additionalCapabilities": {
                "ultraSSDEnabled": "[parameters('isUltraSsdSupportEnabled')]"
            },
            "automaticRepairsPolicy": {
                "enabled": false,
                "gracePeriod": "PT10M"
            },
            "hostGroup": "[if(empty(parameters('host')), null(), createObject('id', resourceId(variables('host').subscriptionId, variables('host').resourceGroupName, 'Microsoft.Compute/hostGroups', variables('host').hostGroupName)))]",
            "orchestrationMode": "[parameters('orchestrationMode')]",
            "overprovision": "[parameters('isOverprovisioningEnabled')]",
            "platformFaultDomainCount": "[parameters('numberOfFaultDomains')]",
            "proximityPlacementGroup": "[if(empty(parameters('proximityPlacementGroup')), null(), createObject('id', resourceId(variables('proximityPlacementGroup').subscriptionId, variables('proximityPlacementGroup').resourceGroupName, 'Microsoft.Compute/proximityPlacementGroups', variables('proximityPlacementGroup').name)))]",
            "scaleInPolicy": {
                "rules": [
                    "Default"
                ]
            },
            "singlePlacementGroup": false,
            "upgradePolicy": {
                "mode": "Manual"
            },
            "virtualMachineProfile": {
                "billingProfile": {
                    "maxPrice": "[if(variables('isSpotVirtualMachineScaleSet'), -1, null())]"
                },
                "extensionProfile": {
                    "extensions": "[union(variables('extensionsArrays').azureActiveDirectoryDomainJoin, variables('extensionsArrays').azureAntimalwareAgent, variables('extensionsArrays').azureCustomScript, variables('extensionsArrays').azureDependencyAgent, variables('extensionsArrays').azureGuestConfigurationAgent, variables('extensionsArrays').azureGuestHealthAgent, variables('extensionsArrays').azureKeyVaultAgent, variables('extensionsArrays').azureLogAnalyticsAgent, variables('extensionsArrays').azureMonitorAgent, variables('extensionsArrays').azureNetworkWatcherAgent)]"
                },
                "evictionPolicy": "[if(variables('isSpotVirtualMachineScaleSet'), 'Deallocate', null())]",
                "licenseType": "[parameters('licenseType')]",
                "networkProfile": {
                    "copy": [
                        {
                            "count": "[variables('networkInterfaceConfigurationsCount')]",
                            "input": {
                                "name": "[parameters('networkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].name]",
                                "properties": {
                                    "dnsSettings": "[union(variables('defaultResourceProperties').networkConfiguration, parameters('networkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')]).dnsSettings]",
                                    "enableAcceleratedNetworking": "[union(variables('defaultResourceProperties').networkConfiguration, parameters('networkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')]).isAcceleratedNetworkingEnabled]",
                                    "enableFpga": "[union(variables('defaultResourceProperties').networkConfiguration, parameters('networkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')]).isFpgaEnabled]",
                                    "enableIPForwarding": "[union(variables('defaultResourceProperties').networkConfiguration, parameters('networkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')]).isIpForwardingEnabled]",
                                    "ipConfigurations": "[parameters('networkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].ipConfigurations]",
                                    "networkSecurityGroup": "[if(empty(union(variables('defaultResourceProperties').networkConfiguration, parameters('networkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')]).networkSecurityGroup.name), null(), createObject('id', resourceId(union(variables('defaultResourceProperties').networkConfiguration, parameters('networkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')]).networkSecurityGroup.subscriptionId, union(variables('defaultResourceProperties').networkConfiguration, parameters('networkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')]).networkSecurityGroup.resourceGroupName, 'Microsoft.Network/networkSecurityGroups', union(variables('defaultResourceProperties').networkConfiguration, parameters('networkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')]).networkSecurityGroup.name)))]",
                                    "primary": "[union(createObject('isPrimary', equals(variables('networkInterfaceConfigurationsCount'), 1)), variables('defaultResourceProperties').networkConfiguration, parameters('networkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')]).isPrimary]"
                                }
                            },
                            "name": "networkInterfaceConfigurations"
                        }
                    ]
                },
                "osProfile": {
                    "adminUsername": "[parameters('administratorUserName')]",
                    "adminPassword": "[parameters('administratorUserPassword')]",
                    "computerNamePrefix": "[if(empty(parameters('computerNamePrefix')), if(variables('isWindowsVirtualMachineScaleSet'), toUpper(take(uniqueString(concat(variables('resourceGroupName'), parameters('name'))), 9)), parameters('name')), parameters('computerNamePrefix'))]",
                    "linuxConfiguration": "[if(variables('isLinuxVirtualMachineScaleSet'), variables('linuxConfiguration'), null())]",
                    "windowsConfiguration": "[if(variables('isWindowsVirtualMachineScaleSet'), variables('windowsConfiguration'), null())]"
                },
                "priority": "[parameters('priority')]",
                "scheduledEventsProfile": {
                    "terminateNotificationProfile": {
                        "enable": true,
                        "notBeforeTimeout": "PT7M"
                    }
                },
                "storageProfile": {
                    "imageReference": "[parameters('imageReference')]",
                    "osDisk": {
                        "caching": "[union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).cachingMode]",
                        "createOption": "[union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).createOption]",
                        "diffDiskSettings": "[if(union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).isEphemeral, createObject('option', 'Local'), null())]",
                        "managedDisk": {
                            "diskEncryptionSet": "[if(empty(parameters('diskEncryptionSet')), null(), createObject('id', resourceId(variables('diskEncryptionSet').subscriptionId, variables('diskEncryptionSet').resourceGroupName, 'Microsoft.Compute/diskEncryptionSets', variables('diskEncryptionSet').name)))]",
                            "storageAccountType": "[union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).storageAccountType]"
                        },
                        "writeAcceleratorEnabled": "[union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).isWriteAcceleratorEnabled]"
                    }
                }
            }
        },
        "windowsConfiguration": {
            "additionalUnattendContent": "[null()]",
            "enableAutomaticUpdates": "[not(equals(toLower(variables('windowsConfigurationFriendly').patchSettings.mode), 'manual'))]",
            "provisionVMAgent": "[variables('windowsConfigurationFriendly').isVmAgentEnabled]",
            "timeZone": "[variables('windowsConfigurationFriendly').timeZone]",
            "winRM": "[null()]"
        },
        "windowsConfigurationFriendly": "[union(variables('defaultResourceProperties').windowsConfiguration, parameters('windowsConfiguration'))]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').virtualMachineScaleSets]",
            "identity": "[if(variables('identity').isEnabled, union(createObject('type', union(variables('defaultResourceProperties').identity, parameters('identity')).type), if(contains(variables('identity').type, 'UserAssigned'), createObject('userAssignedIdentities', createObject(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', first(variables('identity').userAssignedIdentities).name), createObject())), createObject())), null())]",
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": "[if(variables('isFlexibleVirtualMachineScaleSet'), variables('flexibleProperties'), variables('uniformProperties'))]",
            "sku": "[if(variables('isFlexibleVirtualMachineScaleSet'), null(), variables('sku'))]",
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "zones": "[parameters('availabilityZones')]"
        },
        {
            "apiVersion": "[variables('apiVersions').autoscaleSettings]",
            "condition": "[not(variables('isFlexibleVirtualMachineScaleSet'))]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachineScaleSet]"
            ],
            "location": "[parameters('location')]",
            "name": "[variables('autoscale').name]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(variables('autoscale').notifications)]",
                        "input": {},
                        "name": "notifications"
                    },
                    {
                        "count": "[length(variables('autoscale').profiles)]",
                        "input": {
                            "capacity": "[variables('autoscale').profiles[copyIndex('profiles')].capacity]",
                            "name": "[variables('autoscale').profiles[copyIndex('profiles')].name]",
                            "rules": "[variables('autoscale').profiles[copyIndex('profiles')].rules]"
                        },
                        "name": "profiles"
                    }
                ],
                "enabled": "[variables('autoscale').isEnabled]",
                "predictiveAutoscalePolicy": {
                    "scaleLookAheadTime": "[null()]",
                    "scaleMode": "Disabled"
                },
                "targetResourceUri": "[variables('resourceIds').virtualMachineScaleSet]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Insights/autoscaleSettings"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "condition": "[and(not(variables('isFlexibleVirtualMachineScaleSet')), or(variables('isAuditEnabled'), variables('isAuditLogAnalyticsWorkspaceNameNotEmpty')))]",
            "dependsOn": [
                "[variables('resourceIds').autoscaleSettings]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/Microsoft.Insights/audit', variables('autoscale').name)]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(variables('audit').logNames)]",
                        "input": {
                            "category": "[variables('audit').logNames[copyIndex('logs')]]",
                            "enabled": "[variables('isAuditEnabled')]",
                            "retentionPolicy": {
                                "days": "[variables('audit').retentionPolicy.days]",
                                "enabled": "[variables('audit').retentionPolicy.isEnabled]"
                            }
                        },
                        "name": "logs"
                    }
                ],
                "workspaceId": "[variables('resourceIds').auditLogAnalyticsWorkspace]"
            },
            "type": "Microsoft.Insights/autoscaleSettings/providers/diagnosticsettings"
        }
    ]
}
