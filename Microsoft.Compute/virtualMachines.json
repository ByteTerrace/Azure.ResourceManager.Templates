{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "examples": [
            {
                "description": "Deploys a virtual machine with the recommended set of properties for a development environment.",
                "name": "Development",
                "value": {
                    "audit": {
                        "isEnabled": false
                    },
                    "dataDisks": [],
                    "imageReference": {
                        "id": "MyImageReference"
                    },
                    "licenseType": "Windows_Server",
                    "name": "MyVirtualMachine",
                    "osDisk": {},
                    "skuName": "Standard_D2s_v4",
                    "windowsConfiguration": {}
                }
            },
            {
                "description": "Deploys a virtual machine with the recommended set of properties for a production environment.",
                "name": "Production",
                "value": {
                    "audit": {
                        "logAnalyticsWorkspace": {
                            "name": "MyLogAnalyticsWorkspace"
                        }
                    },
                    "availabilitySet": {
                        "name": "MyAvailabilitySet"
                    },
                    "backup": {
                        "policyName": "MyBackupPolicy",
                        "recoveryServicesVault": {
                            "name": "MyRecoveryServicesVault"
                        }
                    },
                    "dataDisks": [],
                    "diskEncryptionSet": {
                        "name": "MyDiskEncryptionSet"
                    },
                    "imageReference": {
                        "id": "MyImageReference"
                    },
                    "licenseType": "Windows_Server",
                    "name": "MyVirtualMachine",
                    "networkInterfaceCards": [
                        {
                            "ipConfigurations": [
                                {
                                    "addressVersion": "IPv4",
                                    "allocationMethod": "Dynamic",
                                    "applicationSecurityGroup": {
                                        "name": "MyApplicationSecurityGroup"
                                    },
                                    "name": "default",
                                    "subnet": {
                                        "name": "MySubnet",
                                        "virtualNetworkName": "MyVirtualNetwork"
                                    }
                                }
                            ]
                        }
                    ],
                    "osDisk": {},
                    "skuName": "Standard_D4s_v4",
                    "windowsConfiguration": {}
                }
            }
        ]
    },
    "parameters": {
        "administratorUserName": {
            "defaultValue": "[uniqueString(parameters('name'))]",
            "metadata": {
                "description": "Specifies the user name of the Azure Virtual Machine administrator account."
            },
            "type": "securestring"
        },
        "administratorUserPassword": {
            "defaultValue": "[base64(replace(format('{0}{1}', newGuid(), newGuid()), '-', ''))]",
            "metadata": {
                "description": "Specifies the password of the Azure Virtual Machine administrator account."
            },
            "type": "securestring"
        },
        "audit": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the audit settings that will be applied to the Azure Virtual Machine."
            },
            "type": "object"
        },
        "availabilitySet": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the properties of the Azure Availability Set that the Azure Virtual Machine will be deployed within."
            },
            "type": "object"
        },
        "backup": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the backup settings that will be applied to the Azure Virtual Machine."
            },
            "type": "object"
        },
        "dataDisks": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of data disks that will be assigned to the Azure Virtual Machine."
            },
            "type": "array"
        },
        "diskEncryptionSet": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the properties of the Azure Disk Encryption Set that the Azure Virtual Machine will be deployed within."
            },
            "type": "object"
        },
        "extensions": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the properties of the extensions that will be applied to the Azure Virtual Machine."
            },
            "type": "secureObject"
        },
        "host": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the properties of the Azure Dedicated Host that the Azure Virtual Machine will be assigned to."
            },
            "type": "object"
        },
        "identity": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the properties of the identity that will be assigned to the Azure Virtual Machine."
            },
            "type": "object"
        },
        "imageReference": {
            "metadata": {
                "description": "Specifies the properties of the image that will be used to provision the Azure Virtual Machine."
            },
            "type": "object"
        },
        "isEncryptionAtHostEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the end-to-end encryption feature is enabled on the Azure Virtual Machine."
            },
            "type": "bool"
        },
        "isSecureBootEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the secure boot feature is enabled on the Azure Virtual Machine."
            },
            "type": "bool"
        },
        "isUltraSsdSupportEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether support for attaching ultra SSDs is enabled on the Azure Virtual Machine."
            },
            "type": "bool"
        },
        "isVirtualTrustedPlatformModuleEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the virtual trusted platform module freature is enabled on the Azure Virtual Machine."
            },
            "type": "bool"
        },
        "isVulnerabilityAssessmentEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the vulnerability assessment feature is enabled on the Azure Virtual Machine."
            },
            "type": "bool"
        },
        "justInTimeAccess": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the just-in-time access settings that will be applied to the Azure Virtual Machine."
            },
            "type": "object"
        },
        "licenseType": {
            "defaultValue": "None",
            "metadata": {
                "description": "Specifies the type of license that will be applied to the Azure Virtual Machine."
            },
            "type": "string"
        },
        "linuxConfiguration": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the Linux configuration that will be applied to the Azure Virtual Machine."
            },
            "type": "secureObject"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Virtual Machine resource(s) should be deployed."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 64,
            "metadata": {
                "description": "Specifies the name of the Azure Virtual Machine."
            },
            "minLength": 1,
            "type": "string"
        },
        "networkInterfaceCards": {
            "metadata": {
                "description": "An array of network interface cards that will be assigned to the Azure Virtual Machine."
            },
            "type": "array"
        },
        "osDisk": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the properties of the operating system disk that will be provisioned and assigned to the Azure Virtual Machine."
            },
            "type": "object"
        },
        "priority": {
            "allowedValues": [
                "Low",
                "Regular",
                "Spot"
            ],
            "defaultValue": "Regular",
            "metadata": {
                "description": "Specifies the priority of the Azure Virtual Machine."
            },
            "type": "string"
        },
        "skuName": {
            "defaultValue": "Standard_D2s_v4",
            "metadata": {
                "description": "Specifies the SKU name of the Azure Virtual Machine."
            },
            "type": "string"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Virtual Machine."
            },
            "type": "object"
        },
        "windowsConfiguration": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the Windows configuration that will be applied to the Azure Virtual Machine."
            },
            "type": "secureObject"
        }
    },
    "variables": {
        "apiVersions": {
            "deployments": "2021-04-01",
            "disks": "2020-12-01",
            "insightsDataCollectionRuleAssociations": "2019-11-01-preview",
            "jitNetworkAccessPolicies": "2020-01-01",
            "logAnalyticsWorkspaces": "2020-08-01",
            "networkInterfaces": "2020-07-01",
            "recoveryServicesVaultsProtectedItems": "2019-06-15",
            "serverVulnerabilityAssessments": "2020-01-01",
            "virtualMachines": "2020-12-01",
            "virtualMachinesExtensions": "2020-12-01"
        },
        "audit": "[union(variables('defaultResourceProperties').audit, parameters('audit'))]",
        "availabilitySet": "[union(variables('defaultResourceProperties').availabilitySet, parameters('availabilitySet'))]",
        "backup": "[union(variables('defaultResourceProperties').backup, parameters('backup'))]",
        "copy": [
            {
                "count": "[variables('dataDisksCount')]",
                "input": {
                    "caching": "[union(variables('defaultResourceProperties').dataDisk, parameters('dataDisks')[copyIndex('dataDisksByResourceId')]).cachingMode]",
                    "createOption": "Attach",
                    "lun": "[union(createObject('lun', copyIndex('dataDisksByResourceId')), parameters('dataDisks')[copyIndex('dataDisksByResourceId')]).lun]",
                    "managedDisk": {
                        "id": "[resourceId('Microsoft.Compute/disks', union(createObject('name', format('{0}-vmdatadisk-{1}', parameters('name'), copyIndex('dataDisksByResourceId'))), parameters('dataDisks')[copyIndex('dataDisksByResourceId')]).name)]"
                    }
                },
                "name": "dataDisksByResourceId"
            },
            {
                "count": "[variables('networkInterfaceCardsCount')]",
                "input": {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', union(createObject('name', format('{0}-vmnic-{1}', parameters('name'), copyIndex('networkInterfacesByResourceId'))), parameters('networkInterfaceCards')[copyIndex('networkInterfacesByResourceId')]).name)]"
                },
                "name": "networkInterfacesByResourceId"
            }
        ],
        "dataDisks": "[if(variables('dataDisksIsNotEmpty'), parameters('dataDisks'), createArray(createObject('name', '<NULL>')))]",
        "dataDisksCount": "[length(parameters('dataDisks'))]",
        "dataDisksIsNotEmpty": "[greater(variables('dataDisksCount'), 0)]",
        "defaultResourceProperties": {
            "audit": {
                "isEnabled": true,
                "logAnalyticsWorkspace": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "availabilitySet": {
                "name": "",
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "backup": {
                "policyName": "",
                "recoveryServicesVault": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "dataDisk": {
                "cachingMode": "ReadOnly",
                "createOption": "Empty",
                "name": "",
                "networkAccessPolicy": "AllowAll",
                "skuName": "Premium_LRS"
            },
            "diskEncryptionSet": {
                "name": "",
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "extensions": {
                "azureActiveDirectoryDomainJoin": {
                    "isRestartAfterJoinEnabled": false,
                    "numberOfRetries": 3,
                    "options": 1,
                    "retryIntervalInSeconds": 17,
                    "version": "1.3"
                },
                "azureAntimalwareAgent": {
                    "exclusions": {
                        "extensions": ".ldf;.log",
                        "paths": "[null()]",
                        "processes": "mssence.svc"
                    },
                    "isAntimalwareEnabled": true,
                    "isRealtimeProtectionEnabled": true,
                    "scheduledScanSettings": {
                        "day": 0,
                        "isEnabled": true,
                        "time": 1290,
                        "type": "Quick"
                    },
                    "version": "1.5"
                },
                "azureCustomScript": {
                    "isDos2UnixTransformEnabled": true,
                    "fileUris": "[null()]",
                    "script": "[null()]",
                    "timestamp": "[null()]",
                    "version": "[if(variables('isLinuxVirtualMachine'), '2.1', if(variables('isWindowsVirtualMachine'), '1.10', null()))]"
                },
                "azureDependencyAgent": {
                    "version": "[if(variables('isLinuxVirtualMachine'), '9.9', if(variables('isWindowsVirtualMachine'), '9.9', null()))]"
                },
                "azureGuestAttestationAgent": {
                    "version": "[if(variables('isLinuxVirtualMachine'), '1.0', if(variables('isWindowsVirtualMachine'), '1.0', null()))]"
                },
                "azureGuestConfigurationAgent": {
                    "version": "[if(variables('isLinuxVirtualMachine'), '1.9', if(variables('isWindowsVirtualMachine'), '1.9', null()))]"
                },
                "azureGuestHealthAgent": {
                    "version": "[if(variables('isLinuxVirtualMachine'), '1.0', if(variables('isWindowsVirtualMachine'), '1.0', null()))]"
                },
                "azureKeyVaultAgent": {
                    "isInitialSyncRequired": true,
                    "version": "[if(variables('isLinuxVirtualMachine'), '2.0', if(variables('isWindowsVirtualMachine'), '1.0', null()))]"
                },
                "azureLogAnalyticsAgent": {
                    "version": "[if(variables('isLinuxVirtualMachine'), '1.13', if(variables('isWindowsVirtualMachine'), '1.0', null()))]"
                },
                "azureMonitorAgent": {
                    "version": "[if(variables('isLinuxVirtualMachine'), '1.9', if(variables('isWindowsVirtualMachine'), '1.0', null()))]"
                },
                "azureNetworkWatcherAgent": {
                    "version": "[if(variables('isLinuxVirtualMachine'), '1.4', if(variables('isWindowsVirtualMachine'), '1.4', null()))]"
                }
            },
            "justInTimeAccess": {
                "isEnabled": false,
                "ports": [
                    {
                        "number": 22
                    },
                    {
                        "number": 3389
                    },
                    {
                        "number": 5985
                    },
                    {
                        "number": 5986
                    }
                ]
            },
            "host": {
                "name": "",
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "identity": {
                "isEnabled": true,
                "type": "[if(greater(variables('userAssignedIdentitiesCount'), 0), 'UserAssigned', 'SystemAssigned')]",
                "userAssignedIdentities": []
            },
            "linuxConfiguration": {
                "administratorUserPublicSshKey": "",
                "isPasswordAuthenticationEnabled": true,
                "isVmAgentEnabled": true,
                "patchSettings": {
                    "mode": "ImageDefault"
                }
            },
            "networkInterfaceCard": {
                "dnsServers": [],
                "ipConfiguration": {
                    "addressVersion": "IPv4 ",
                    "allocationMethod": "Dynamic",
                    "applicationSecurityGroup": {
                        "name": "",
                        "resourceGroupName": "[variables('resourceGroupName')]"
                    },
                    "loadBalancer": {
                        "backendAddressPoolName": "",
                        "inboundNatRuleName": "",
                        "name": "",
                        "resourceGroupName": "[variables('resourceGroupName')]"
                    },
                    "publicIpAddress": {
                        "name": "",
                        "resourceGroupName": "[variables('resourceGroupName')]"
                    },
                    "subnet": {
                        "resourceGroupName": "[variables('resourceGroupName')]"
                    }
                },
                "isAcceleratedNetworkingEnabled": false,
                "isIpForwardingEnabled": false,
                "networkSecurityGroup": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]"
                }
            },
            "osDisk": {
                "cachingMode": "ReadWrite",
                "createOption": "FromImage",
                "isEphemeral": false,
                "isWriteAcceleratorEnabled": false,
                "name": "",
                "storageAccountType": "Premium_LRS"
            },
            "windowsConfiguration": {
                "isVmAgentEnabled": true,
                "patchSettings": {
                    "isHotPatchingEnabled": false,
                    "mode": "AutomaticByOS"
                },
                "timeZone": "UTC"
            }
        },
        "diskEncryptionSet": "[union(variables('defaultResourceProperties').diskEncryptionSet, parameters('diskEncryptionSet'))]",
        "extensions": "[union(variables('defaultResourceProperties').extensions, parameters('extensions'))]",
        "host": "[union(variables('defaultResourceProperties').host, parameters('host'))]",
        "identity": "[union(variables('defaultResourceProperties').identity, parameters('identity'))]",
        "isAuditEnabled": "[variables('audit').isEnabled]",
        "isAuditLogAnalyticsWorkspaceNameNotEmpty": "[not(empty(variables('audit').logAnalyticsWorkspace.name))]",
        "isBackupEnabled": "[not(empty(variables('backup').policyName))]",
        "isDiskEncryptionSetEnabled": "[not(empty(parameters('diskEncryptionSet')))]",
        "isLinuxVirtualMachine": "[or(not(empty(parameters('linuxConfiguration'))), equals(parameters('licenseType'), 'RHEL_BYOS'), equals(parameters('licenseType'), 'SLES_BYOS'), contains(union(createObject('id', ''), parameters('imageReference')).id, 'Linux'), contains(union(createObject('offer', ''), parameters('imageReference')).offer, 'Linux'))]",
        "isSpotVirtualMachine": "[equals(toLower(parameters('priority')), 'spot')]",
        "isTrustedLaunchEnabled": "[or(parameters('isSecureBootEnabled'), parameters('isVirtualTrustedPlatformModuleEnabled'))]",
        "isWindowsVirtualMachine": "[or(not(empty(parameters('windowsConfiguration'))), equals(parameters('licenseType'), 'Windows_Client'), equals(parameters('licenseType'), 'Windows_Server'), contains(union(createObject('id', ''), parameters('imageReference')).id, 'Windows'), contains(union(createObject('offer', ''), parameters('imageReference')).offer, 'Windows'))]",
        "justInTimeAccess": "[union(variables('defaultResourceProperties').justInTimeAccess, parameters('justInTimeAccess'))]",
        "licenseTypeIsNotEmpty": "[not(empty(parameters('licenseType')))]",
        "linuxConfiguration": {
            "disablePasswordAuthentication": "[not(variables('linuxConfigurationFriendly').isPasswordAuthenticationEnabled)]",
            "ssh": "[if(empty(variables('linuxConfigurationFriendly').administratorUserPublicSshKey), null(), createObject('publicKeys', createArray(createObject('keyData', variables('linuxConfigurationFriendly').administratorUserPublicSshKey, 'path', format('/home/{0}/.ssh/authorized_keys', parameters('administratorUserName'))))))]",
            "patchSettings": {
                "patchMode": "[variables('linuxConfigurationFriendly').patchSettings.mode]"
            },
            "provisionVMAgent": "[variables('linuxConfigurationFriendly').isVmAgentEnabled]"
        },
        "linuxConfigurationFriendly": "[union(variables('defaultResourceProperties').linuxConfiguration, parameters('linuxConfiguration'))]",
        "networkInterfaceCardsCount": "[length(parameters('networkInterfaceCards'))]",
        "osType": "[if(variables('isLinuxVirtualMachine'), 'Linux', if(variables('isWindowsVirtualMachine'), 'Windows', 'Unknown'))]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceIds": {
            "auditLogAnalyticsWorkspace": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.OperationalInsights/workspaces', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>'))]",
            "insightsDataCollectionRule": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.Insights/dataCollectionRules', format('Microsoft-VMInsights-Health-LAW_{0}', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>')))]",
            "recoveryServicesVaultBackupPolicy": "[resourceId(variables('backup').recoveryServicesVault.subscriptionId, variables('backup').recoveryServicesVault.resourceGroupName, 'Microsoft.RecoveryServices/vaults/backupPolicies', if(variables('isBackupEnabled'), variables('backup').recoveryServicesVault.name, '<NULL>'), if(variables('isBackupEnabled'), variables('backup').policyName, '<NULL>'))]",
            "virtualMachine": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
            "virtualMachineAzureActiveDirectoryDomainJoin": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), variables('virtualMachineAzureActiveDirectoryDomainJoinName'))]",
            "virtualMachineAzureAntimalwareAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), variables('virtualMachineAzureAntimalwareAgentName'))]",
            "virtualMachineAzureCustomScript": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), variables('virtualMachineAzureCustomScriptName'))]",
            "virtualMachineAzureDependencyAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), variables('virtualMachineAzureDependencyAgentName'))]",
            "virtualMachineAzureGuestAttestationAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), variables('virtualMachineAzureGuestAttestationAgentName'))]",
            "virtualMachineAzureGuestConfigurationAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), variables('virtualMachineAzureGuestConfigurationAgentName'))]",
            "virtualMachineAzureGuestHealthAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), variables('virtualMachineAzureGuestHealthAgentName'))]",
            "virtualMachineAzureLogAnalyticsAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), variables('virtualMachineAzureLogAnalyticsAgentName'))]",
            "virtualMachineAzureKeyVaultAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), variables('virtualMachineAzureKeyVaultAgentName'))]",
            "virtualMachineAzureMonitorAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), variables('virtualMachineAzureMonitorAgentName'))]",
            "virtualMachineAzureNetworkWatcherAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), variables('virtualMachineAzureNetworkWatcherAgentName'))]",
            "virtualMachineDiskEncryptionSet": "[resourceId(variables('diskEncryptionSet').subscriptionId, variables('diskEncryptionSet').resourceGroupName, 'Microsoft.Compute/diskEncryptionSets', if(variables('isDiskEncryptionSetEnabled'), variables('diskEncryptionSet').name, '<NULL>'))]"
        },
        "subscriptionId": "[subscription().subscriptionId]",
        "userAssignedIdentitiesCount": "[length(union(createObject('userAssignedIdentities', createArray()), parameters('identity')).userAssignedIdentities)]",
        "virtualMachineAzureActiveDirectoryDomainJoinName": "AzureActiveDirectoryDomainJoin",
        "virtualMachineAzureAntimalwareAgentName": "AzureAntimalwareAgent",
        "virtualMachineAzureCustomScriptName": "AzureCustomScript",
        "virtualMachineAzureDependencyAgentName": "AzureDependencyAgent",
        "virtualMachineAzureGuestAttestationAgentName": "AzureGuestAttestationAgent",
        "virtualMachineAzureGuestConfigurationAgentName": "AzureGuestConfigurationAgent",
        "virtualMachineAzureGuestHealthAgentName": "AzureGuestHealthAgent",
        "virtualMachineAzureKeyVaultAgentName": "AzureKeyVaultAgent",
        "virtualMachineAzureLogAnalyticsAgentName": "AzureLogAnalyticsAgent",
        "virtualMachineAzureMonitorAgentName": "AzureMonitorAgent",
        "virtualMachineAzureNetworkWatcherAgentName": "AzureNetworkWatcherAgent",
        "securityProfile": {
            "encryptionAtHost": "[parameters('isEncryptionAtHostEnabled')]",
            "securityType": "[if(variables('isTrustedLaunchEnabled'), 'TrustedLaunch', null())]",
            "uefiSettings": "[if(variables('isTrustedLaunchEnabled'), createObject('secureBootEnabled', parameters('isSecureBootEnabled'), 'vTpmEnabled', parameters('isVirtualTrustedPlatformModuleEnabled')), null())]"
        },
        "windowsConfiguration": {
            "additionalUnattendContent": "[null()]",
            "enableAutomaticUpdates": "[not(equals(toLower(variables('windowsConfigurationFriendly').patchSettings.mode), 'manual'))]",
            "patchSettings": {
                "enableHotpatching": "[variables('windowsConfigurationFriendly').patchSettings.isHotPatchingEnabled]",
                "patchMode": "[variables('windowsConfigurationFriendly').patchSettings.mode]"
            },
            "provisionVMAgent": "[variables('windowsConfigurationFriendly').isVmAgentEnabled]",
            "timeZone": "[variables('windowsConfigurationFriendly').timeZone]",
            "winRM": "[null()]"
        },
        "windowsConfigurationFriendly": "[union(variables('defaultResourceProperties').windowsConfiguration, parameters('windowsConfiguration'))]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').networkInterfaces]",
            "copy": {
                "count": "[variables('networkInterfaceCardsCount')]",
                "mode": "Parallel",
                "name": "networkInterfaceCardsCopy"
            },
            "location": "[parameters('location')]",
            "name": "[format('{0}-vmnic-{1}', parameters('name'), copyIndex())]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(parameters('networkInterfaceCards')[copyIndex()].ipConfigurations)]",
                        "input": {
                            "name": "[parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')].name]",
                            "properties": {
                                "applicationSecurityGroups": "[if(empty(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).applicationSecurityGroup.name), null(), createArray(createObject('id', resourceId(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).applicationSecurityGroup.resourceGroupName, 'Microsoft.Network/applicationSecurityGroups', union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).applicationSecurityGroup.name))))]",
                                "loadBalancerBackendAddressPools": "[if(empty(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.backendAddressPoolName), null(), createArray(createObject('id', resourceId(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.resourceGroupName, 'Microsoft.Network/loadBalancers/backendAddressPools', union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.name, union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.backendAddressPoolName))))]",
                                "loadBalancerInboundNatRules": "[if(empty(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.inboundNatRuleName), null(), createArray(createObject('id', resourceId(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.resourceGroupName, 'Microsoft.Network/loadBalancers/backendAddressPools', union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.name, union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.inboundNatRuleName))))]",
                                "primary": "[if(equals(length(parameters('networkInterfaceCards')[copyIndex()].ipConfigurations), 1), true(), parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')].isPrimary)]",
                                "privateIPAddressVersion": "[union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).addressVersion]",
                                "privateIPAllocationMethod": "[union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).allocationMethod]",
                                "publicIPAddress": "[if(empty(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).publicIpAddress.name), null(), createObject('id', resourceId(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).publicIpAddress.resourceGroupName, 'Microsoft.Network/publicIPAddresses', union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).publicIpAddress.name)))]",
                                "subnet": {
                                    "id": "[resourceId(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')].subnet.virtualNetworkName, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')].subnet.name)]"
                                }
                            }
                        },
                        "name": "ipConfigurations"
                    }
                ],
                "dnsSettings": {
                    "dnsServers": "[union(variables('defaultResourceProperties').networkInterfaceCard, parameters('networkInterfaceCards')[copyIndex()]).dnsServers]",
                    "internalDnsNameLabel": "[null()]"
                },
                "enableAcceleratedNetworking": "[union(variables('defaultResourceProperties').networkInterfaceCard, parameters('networkInterfaceCards')[copyIndex()]).isAcceleratedNetworkingEnabled]",
                "enableIPForwarding": "[union(variables('defaultResourceProperties').networkInterfaceCard, parameters('networkInterfaceCards')[copyIndex()]).isIpForwardingEnabled]",
                "networkSecurityGroup": "[if(empty(union(variables('defaultResourceProperties').networkInterfaceCard, parameters('networkInterfaceCards')[copyIndex()]).networkSecurityGroup.name), null(), createObject('id', resourceId(union(variables('defaultResourceProperties').networkInterfaceCard, parameters('networkInterfaceCards')[copyIndex()]).networkSecurityGroup.resourceGroupName, 'Microsoft.Network/networkSecurityGroups', union(variables('defaultResourceProperties').networkInterfaceCard, parameters('networkInterfaceCards')[copyIndex()]).networkSecurityGroup.name)))]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('apiVersions').disks]",
            "copy": {
                "count": "[variables('dataDisksCount')]",
                "mode": "Parallel",
                "name": "dataDisksCopy"
            },
            "location": "[parameters('location')]",
            "name": "[if(empty(union(variables('defaultResourceProperties').dataDisk, variables('dataDisks')[copyIndex()]).name), format('{0}-vmdatadisk-{1}', parameters('name'), copyIndex()), variables('dataDisks')[copyIndex()].name)]",
            "properties": {
                "creationData": {
                    "createOption": "[union(variables('defaultResourceProperties').dataDisk, variables('dataDisks')[copyIndex()]).createOption]"
                },
                "diskSizeGB": "[variables('dataDisks')[copyIndex()].sizeInGigabytes]",
                "encryption": "[if(variables('isDiskEncryptionSetEnabled'), createObject('diskEncryptionSetId', variables('resourceIds').virtualMachineDiskEncryptionSet), null())]",
                "encryptionSettingsCollection": "[null()]",
                "networkAccessPolicy": "[union(variables('defaultResourceProperties').dataDisk, variables('dataDisks')[copyIndex()]).networkAccessPolicy]",
                "securityProfile": "[null()]"
            },
            "sku": {
                "name": "[union(variables('defaultResourceProperties').dataDisk, variables('dataDisks')[copyIndex()]).skuName]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/disks"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachines]",
            "dependsOn": [
                "dataDisksCopy",
                "networkInterfaceCardsCopy"
            ],
            "identity": "[if(variables('identity').isEnabled, union(createObject('type', union(variables('defaultResourceProperties').identity, parameters('identity')).type), if(contains(variables('identity').type, 'UserAssigned'), createObject('userAssignedIdentities', createObject(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', first(variables('identity').userAssignedIdentities).name), createObject())), createObject())), null())]",
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": {
                "additionalCapabilities": {
                    "ultraSSDEnabled": "[parameters('isUltraSsdSupportEnabled')]"
                },
                "availabilitySet": "[if(empty(parameters('availabilitySet')), null(), createObject('id', resourceId(variables('availabilitySet').subscriptionId, variables('availabilitySet').resourceGroupName, 'Microsoft.Compute/availabilitySets', variables('availabilitySet').name)))]",
                "billingProfile": {
                    "maxPrice": "[if(variables('isSpotVirtualMachine'), -1, null())]"
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": false,
                        "storageUri": "[null()]"
                    }
                },
                "extensionsTimeBudget": "PT15M",
                "evictionPolicy": "[if(variables('isSpotVirtualMachine'), 'Deallocate', null())]",
                "hardwareProfile": {
                    "vmSize": "[parameters('skuName')]"
                },
                "host": "[if(empty(variables('host').name), null(), createObject('id', resourceId(variables('host').subscriptionId, variables('host').resourceGroupName, 'Microsoft.Compute/hostGroups/hosts', variables('host').hostGroupName, variables('host').name)))]",
                "hostGroup": "[if(empty(parameters('host')), null(), createObject('id', resourceId(variables('host').subscriptionId, variables('host').resourceGroupName, 'Microsoft.Compute/hostGroups', variables('host').hostGroupName)))]",
                "licenseType": "[if(variables('licenseTypeIsNotEmpty'), parameters('licenseType'), null())]",
                "networkProfile": {
                    "networkInterfaces": "[variables('networkInterfacesByResourceId')]"
                },
                "osProfile": {
                    "adminUsername": "[parameters('administratorUserName')]",
                    "adminPassword": "[parameters('administratorUserPassword')]",
                    "allowExtensionOperations": true,
                    "computerName": "[parameters('name')]",
                    "customData": "[null()]",
                    "linuxConfiguration": "[if(variables('isLinuxVirtualMachine'), variables('linuxConfiguration'), null())]",
                    "secrets": [],
                    "windowsConfiguration": "[if(variables('isWindowsVirtualMachine'), variables('windowsConfiguration'), null())]"
                },
                "priority": "[parameters('priority')]",
                "securityProfile": "[if(or(parameters('isEncryptionAtHostEnabled'), variables('isTrustedLaunchEnabled')), variables('securityProfile'), null())]",
                "storageProfile": {
                    "dataDisks": "[variables('dataDisksByResourceId')]",
                    "imageReference": "[if(empty(parameters('imageReference')), null(), parameters('imageReference'))]",
                    "osDisk": {
                        "caching": "[union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).cachingMode]",
                        "createOption": "[union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).createOption]",
                        "diffDiskSettings": "[if(union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).isEphemeral, createObject('option', 'Local'), null())]",
                        "managedDisk": {
                            "diskEncryptionSet": "[if(variables('isDiskEncryptionSetEnabled'), createObject('id', variables('resourceIds').virtualMachineDiskEncryptionSet), null())]",
                            "storageAccountType": "[union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).storageAccountType]"
                        },
                        "name": "[if(empty(union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).name), format('{0}-vmosdisk', parameters('name')), parameters('osDisk').name)]",
                        "writeAcceleratorEnabled": "[union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).isWriteAcceleratorEnabled]"
                    }
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "apiVersion": "[variables('apiVersions').jitNetworkAccessPolicies]",
            "condition": "[variables('justInTimeAccess').isEnabled]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "kind": "Basic",
            "name": "[format('{0}/RG_{1}-VM_{2}', parameters('location'), resourceGroup().name, parameters('name'), parameters('location'))]",
            "properties": {
                "virtualMachines": [
                    {
                        "copy": [
                            {
                                "count": "[length(variables('justInTimeAccess').ports)]",
                                "input": {
                                    "allowedSourceAddressPrefix": "[if(less(length(union(createObject('allowedSourceAddressPrefixes', createArray()), variables('justInTimeAccess').ports[copyIndex('ports')]).allowedSourceAddressPrefixes), 2), if(empty(union(createObject('allowedSourceAddressPrefixes', createArray()), variables('justInTimeAccess').ports[copyIndex('ports')]).allowedSourceAddressPrefixes), '*', variables('justInTimeAccess').ports[copyIndex('ports')].allowedSourceAddressPrefixes[0]), null())]",
                                    "allowedSourceAddressPrefixes": "[if(greater(length(union(createObject('allowedSourceAddressPrefixes', createArray()), variables('justInTimeAccess').ports[copyIndex('ports')]).allowedSourceAddressPrefixes), 1), variables('justInTimeAccess').ports[copyIndex('ports')].allowedSourceAddressPrefixes, null())]",
                                    "maxRequestAccessDuration": "[union(createObject('maximumAccessDuration', 'PT3H'), variables('justInTimeAccess').ports[copyIndex('ports')]).maximumAccessDuration]",
                                    "number": "[variables('justInTimeAccess').ports[copyIndex('ports')].number]",
                                    "protocol": "[union(createObject('protocol', '*'), variables('justInTimeAccess').ports[copyIndex('ports')]).protocol]"
                                },
                                "name": "ports"
                            }
                        ],
                        "id": "[variables('resourceIds').virtualMachine]"
                    }
                ]
            },
            "type": "Microsoft.Security/locations/jitNetworkAccessPolicies"
        },
        {
            "apiVersion": "[variables('apiVersions').insightsDataCollectionRuleAssociations]",
            "condition": "[variables('isAuditEnabled')]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "name": "[format('{0}/Microsoft.Insights/VMInsights-Health-DcrAssociation', parameters('name'))]",
            "properties": {
                "description": "Association of data collection rule for VM Insights Health.",
                "dataCollectionRuleId": "[variables('resourceIds').insightsDataCollectionRule]"
            },
            "type": "Microsoft.Compute/virtualMachines/providers/dataCollectionRuleAssociations"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "condition": "[and(variables('isWindowsVirtualMachine'), union(createObject('isEnabled', true()), variables('extensions').azureAntimalwareAgent).isEnabled)]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/{1}', parameters('name'), variables('virtualMachineAzureAntimalwareAgentName'))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": false,
                "protectedSettings": "[null()]",
                "publisher": "Microsoft.Azure.Security",
                "settings": {
                    "AntimalwareEnabled": "[variables('extensions').azureAntimalwareAgent.isAntimalwareEnabled]",
                    "Exclusions": {
                        "Extensions": "[variables('extensions').azureAntimalwareAgent.exclusions.extensions]",
                        "Paths": "[variables('extensions').azureAntimalwareAgent.exclusions.paths]",
                        "Processes": "[variables('extensions').azureAntimalwareAgent.exclusions.processes]"
                    },
                    "RealtimeProtectionEnabled": "[variables('extensions').azureAntimalwareAgent.isRealtimeProtectionEnabled]",
                    "ScheduledScanSettings": {
                        "day": "[variables('extensions').azureAntimalwareAgent.scheduledScanSettings.day]",
                        "isEnabled": "[variables('extensions').azureAntimalwareAgent.scheduledScanSettings.isEnabled]",
                        "scanType": "[variables('extensions').azureAntimalwareAgent.scheduledScanSettings.type]",
                        "time": "[variables('extensions').azureAntimalwareAgent.scheduledScanSettings.time]"
                    }
                },
                "type": "IaaSAntimalware",
                "typeHandlerVersion": "[variables('extensions').azureAntimalwareAgent.version]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "condition": "[and(not(equals(variables('osType'), 'Unknown')), union(createObject('isEnabled', true()), variables('extensions').azureDependencyAgent).isEnabled)]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/{1}', parameters('name'), variables('virtualMachineAzureDependencyAgentName'))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "[format('DependencyAgent{0}', variables('osType'))]",
                "typeHandlerVersion": "[variables('extensions').azureDependencyAgent.version]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "condition": "[and(not(equals(variables('osType'), 'Unknown')), parameters('isVirtualTrustedPlatformModuleEnabled'), union(createObject('isEnabled', true()), variables('extensions').azureGuestAttestationAgent).isEnabled)]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/{1}', parameters('name'), variables('virtualMachineAzureGuestAttestationAgentName'))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": false,
                "publisher": "[format('Microsoft.Azure.Security.{0}Attestation', variables('osType'))]",
                "settings": {
                    "AttestationConfig": {
                        "AscSettings": {
                            "ascReportingEndpoint": "https://eus2.service.attest.azure.net/",
                            "ascReportingFrequency": ""
                        },
                        "disableAlerts": false,
                        "MaaSettings": {
                            "maaEndpoint": "https://sharedeus2.eus2.attest.azure.net/",
                            "maaTenantName": "GuestAttestation"
                        },
                        "useCustomToken": false
                    }
                },
                "type": "GuestAttestation",
                "typeHandlerVersion": "[variables('extensions').azureGuestAttestationAgent.version]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "condition": "[and(not(equals(variables('osType'), 'Unknown')), union(createObject('isEnabled', true()), variables('extensions').azureGuestConfigurationAgent).isEnabled)]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/{1}', parameters('name'), variables('virtualMachineAzureGuestConfigurationAgentName'))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "publisher": "Microsoft.GuestConfiguration",
                "type": "[format('Configurationfor{0}', variables('osType'))]",
                "typeHandlerVersion": "[variables('extensions').azureGuestConfigurationAgent.version]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "condition": "[and(not(equals(variables('osType'), 'Unknown')), union(createObject('isEnabled', true()), variables('extensions').azureGuestHealthAgent).isEnabled)]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]",
                "[variables('resourceIds').virtualMachineAzureMonitorAgent]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/{1}', parameters('name'), variables('virtualMachineAzureGuestHealthAgentName'))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": false,
                "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
                "type": "[format('GuestHealth{0}Agent', variables('osType'))]",
                "typeHandlerVersion": "[variables('extensions').azureGuestHealthAgent.version]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "condition": "[and(not(equals(variables('osType'), 'Unknown')), union(createObject('isEnabled', false()), variables('extensions').azureKeyVaultAgent).isEnabled)]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/{1}', parameters('name'), variables('virtualMachineAzureKeyVaultAgentName'))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "publisher": "Microsoft.Azure.KeyVault",
                "settings": {
                    "secretsManagementSettings": {
                        "certificateStoreLocation": "[if(variables('isLinuxVirtualMachine'), '/var/lib/waagent/Microsoft.Azure.KeyVault', if(variables('isWindowsVirtualMachine'), 'LocalMachine', null()))]",
                        "certificateStoreName": "[if(variables('isLinuxVirtualMachine'), null(), if(variables('isWindowsVirtualMachine'), 'MY', null()))]",
                        "linkOnRenewal": "[if(variables('isLinuxVirtualMachine'), null(), if(variables('isWindowsVirtualMachine'), false(), null()))]",
                        "observedCertificates": "[variables('extensions').azureKeyVaultAgent.observedCertificates]",
                        "requireInitialSync": "[variables('extensions').azureKeyVaultAgent.isInitialSyncRequired]"
                    }
                },
                "type": "[format('KeyVaultFor{0}', variables('osType'))]",
                "typeHandlerVersion": "[variables('extensions').azureKeyVaultAgent.version]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "condition": "[and(not(equals(variables('osType'), 'Unknown')), variables('isAuditEnabled'), union(createObject('isEnabled', false()), variables('extensions').azureLogAnalyticsAgent).isEnabled)]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/{1}', parameters('name'), variables('virtualMachineAzureLogAnalyticsAgentName'))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": false,
                "protectedSettings": {
                    "workspaceKey": "[if(variables('isAuditEnabled'), listKeys(variables('resourceIds').auditLogAnalyticsWorkspace, variables('apiVersions').logAnalyticsWorkspaces).primarySharedKey, null())]"
                },
                "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                "settings": {
                    "workspaceId": "[if(variables('isAuditEnabled'), reference(variables('resourceIds').auditLogAnalyticsWorkspace, variables('apiVersions').logAnalyticsWorkspaces).customerId, null())]"
                },
                "type": "[if(variables('isLinuxVirtualMachine'), 'OmsAgentForLinux', if(variables('isWindowsVirtualMachine'), 'MicrosoftMonitoringAgent', null()))]",
                "typeHandlerVersion": "[variables('extensions').azureLogAnalyticsAgent.version]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "condition": "[and(not(equals(variables('osType'), 'Unknown')), union(createObject('isEnabled', true()), variables('extensions').azureMonitorAgent).isEnabled)]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/{1}', parameters('name'), variables('virtualMachineAzureMonitorAgentName'))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": false,
                "publisher": "Microsoft.Azure.Monitor",
                "type": "[format('AzureMonitor{0}Agent', variables('osType'))]",
                "typeHandlerVersion": "[variables('extensions').azureMonitorAgent.version]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "condition": "[and(not(equals(variables('osType'), 'Unknown')), union(createObject('isEnabled', true()), variables('extensions').azureNetworkWatcherAgent).isEnabled)]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/{1}', parameters('name'), variables('virtualMachineAzureNetworkWatcherAgentName'))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": false,
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "[format('NetworkWatcherAgent{0}', variables('osType'))]",
                "typeHandlerVersion": "[variables('extensions').azureNetworkWatcherAgent.version]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "condition": "[union(createObject('isEnabled', false()), variables('extensions').azureActiveDirectoryDomainJoin).isEnabled]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]",
                "[variables('resourceIds').virtualMachineAzureAntimalwareAgent]",
                "[variables('resourceIds').virtualMachineAzureDependencyAgent]",
                "[variables('resourceIds').virtualMachineAzureGuestAttestationAgent]",
                "[variables('resourceIds').virtualMachineAzureGuestConfigurationAgent]",
                "[variables('resourceIds').virtualMachineAzureGuestHealthAgent]",
                "[variables('resourceIds').virtualMachineAzureKeyVaultAgent]",
                "[variables('resourceIds').virtualMachineAzureLogAnalyticsAgent]",
                "[variables('resourceIds').virtualMachineAzureMonitorAgent]",
                "[variables('resourceIds').virtualMachineAzureNetworkWatcherAgent]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/{1}', parameters('name'), variables('virtualMachineAzureActiveDirectoryDomainJoinName'))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "publisher": "Microsoft.Compute",
                "protectedSettings": {
                    "Password": "[variables('extensions').azureActiveDirectoryDomainJoin.userPassword]"
                },
                "settings": {
                    "Name": "[variables('extensions').azureActiveDirectoryDomainJoin.domainName]",
                    "NumberOfRetries": "[variables('extensions').azureActiveDirectoryDomainJoin.numberOfRetries]",
                    "Options": "[variables('extensions').azureActiveDirectoryDomainJoin.options]",
                    "UnjoinDomainUser": "[null()]",
                    "OUPath": "[variables('extensions').azureActiveDirectoryDomainJoin.ouPath]",
                    "Restart": "[variables('extensions').azureActiveDirectoryDomainJoin.isRestartAfterJoinEnabled]",
                    "RetryIntervalInMilliseconds": "[mul(variables('extensions').azureActiveDirectoryDomainJoin.retryIntervalInSeconds, 1000)]",
                    "User": "[variables('extensions').azureActiveDirectoryDomainJoin.userName]"
                },
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "[variables('extensions').azureActiveDirectoryDomainJoin.version]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "condition": "[and(not(equals(variables('osType'), 'Unknown')), union(createObject('isEnabled', false()), variables('extensions').azureCustomScript).isEnabled)]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]",
                "[variables('resourceIds').virtualMachineAzureActiveDirectoryDomainJoin]",
                "[variables('resourceIds').virtualMachineAzureAntimalwareAgent]",
                "[variables('resourceIds').virtualMachineAzureDependencyAgent]",
                "[variables('resourceIds').virtualMachineAzureGuestAttestationAgent]",
                "[variables('resourceIds').virtualMachineAzureGuestConfigurationAgent]",
                "[variables('resourceIds').virtualMachineAzureGuestHealthAgent]",
                "[variables('resourceIds').virtualMachineAzureKeyVaultAgent]",
                "[variables('resourceIds').virtualMachineAzureLogAnalyticsAgent]",
                "[variables('resourceIds').virtualMachineAzureMonitorAgent]",
                "[variables('resourceIds').virtualMachineAzureNetworkWatcherAgent]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/{1}', parameters('name'), variables('virtualMachineAzureCustomScriptName'))]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": false,
                "protectedSettings": {
                    "commandToExecute": "[variables('extensions').azureCustomScript.commandToExecute]",
                    "fileUris": "[variables('extensions').azureCustomScript.fileUris]",
                    "managedIdentity": {},
                    "script": "[if(variables('isLinuxVirtualMachine'), variables('extensions').azureCustomScript.script, null())]"
                },
                "publisher": "[if(variables('isLinuxVirtualMachine'), 'Microsoft.Azure.Extensions', if(variables('isWindowsVirtualMachine'), 'Microsoft.Compute', null()))]",
                "settings": {
                    "skipDos2Unix": "[if(variables('isLinuxVirtualMachine'), not(variables('extensions').azureCustomScript.isDos2UnixTransformEnabled), null())]",
                    "timestamp": "[variables('extensions').azureCustomScript.timestamp]"
                },
                "type": "[if(variables('isLinuxVirtualMachine'), 'CustomScript', if(variables('isWindowsVirtualMachine'), 'CustomScriptExtension', null()))]",
                "typeHandlerVersion": "[variables('extensions').azureCustomScript.version]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').serverVulnerabilityAssessments]",
            "condition": "[parameters('isVulnerabilityAssessmentEnabled')]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]",
                "[variables('resourceIds').virtualMachineAzureActiveDirectoryDomainJoin]",
                "[variables('resourceIds').virtualMachineAzureAntimalwareAgent]",
                "[variables('resourceIds').virtualMachineAzureCustomScript]",
                "[variables('resourceIds').virtualMachineAzureDependencyAgent]",
                "[variables('resourceIds').virtualMachineAzureGuestAttestationAgent]",
                "[variables('resourceIds').virtualMachineAzureGuestConfigurationAgent]",
                "[variables('resourceIds').virtualMachineAzureGuestHealthAgent]",
                "[variables('resourceIds').virtualMachineAzureKeyVaultAgent]",
                "[variables('resourceIds').virtualMachineAzureLogAnalyticsAgent]",
                "[variables('resourceIds').virtualMachineAzureMonitorAgent]",
                "[variables('resourceIds').virtualMachineAzureNetworkWatcherAgent]"
            ],
            "name": "[format('{0}/Microsoft.Security/default', parameters('name'))]",
            "type": "Microsoft.Compute/virtualMachines/providers/serverVulnerabilityAssessments"
        },
        {
            "apiVersion": "[variables('apiVersions').deployments]",
            "condition": "[variables('isBackupEnabled')]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]",
                "[variables('resourceIds').virtualMachineAzureActiveDirectoryDomainJoin]",
                "[variables('resourceIds').virtualMachineAzureAntimalwareAgent]",
                "[variables('resourceIds').virtualMachineAzureCustomScript]",
                "[variables('resourceIds').virtualMachineAzureDependencyAgent]",
                "[variables('resourceIds').virtualMachineAzureGuestAttestationAgent]",
                "[variables('resourceIds').virtualMachineAzureGuestConfigurationAgent]",
                "[variables('resourceIds').virtualMachineAzureGuestHealthAgent]",
                "[variables('resourceIds').virtualMachineAzureKeyVaultAgent]",
                "[variables('resourceIds').virtualMachineAzureLogAnalyticsAgent]",
                "[variables('resourceIds').virtualMachineAzureMonitorAgent]",
                "[variables('resourceIds').virtualMachineAzureNetworkWatcherAgent]"
            ],
            "name": "[format('{0}-Backup', deployment().name)]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                    "recoveryServicesVaultName": {
                        "value": "[variables('backup').recoveryServicesVault.name]"
                    },
                    "recoveryServicesVaultBackupPolicyId": {
                        "value": "[variables('resourceIds').recoveryServicesVaultBackupPolicy]"
                    },
                    "recoveryServicesVaultsProtectedItemsApiVersion": {
                        "value": "[variables('apiVersions').recoveryServicesVaultsProtectedItems]"
                    },
                    "virtualMachineId": {
                        "value": "[variables('resourceIds').virtualMachine]"
                    },
                    "virtualMachineName": {
                        "value": "[parameters('name')]"
                    },
                    "virtualMachineResourceGroupName": {
                        "value": "[resourceGroup().name]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "recoveryServicesVaultName": {
                            "type": "string"
                        },
                        "recoveryServicesVaultBackupPolicyId": {
                            "type": "string"
                        },
                        "recoveryServicesVaultsProtectedItemsApiVersion": {
                            "type": "string"
                        },
                        "virtualMachineId": {
                            "type": "string"
                        },
                        "virtualMachineName": {
                            "type": "string"
                        },
                        "virtualMachineResourceGroupName": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "apiVersion": "[parameters('recoveryServicesVaultsProtectedItemsApiVersion')]",
                            "name": "[format('{0}/Azure/iaasvmcontainer;iaasvmcontainerv2;{1};{2}/vm;iaasvmcontainerv2;{1};{2}', parameters('recoveryServicesVaultName'), parameters('virtualMachineResourceGroupName'), parameters('virtualMachineName'), guid(parameters('virtualMachineResourceGroupName'), parameters('virtualMachineName')))]",
                            "properties": {
                                "backupManagementType": "AzureIaasVM",
                                "extendedProperties": "[null()]",
                                "policyId": "[parameters('recoveryServicesVaultBackupPolicyId')]",
                                "protectedItemType": "Microsoft.Compute/virtualMachines",
                                "sourceResourceId": "[parameters('virtualMachineId')]"
                            },
                            "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems"
                        }
                    ]
                }
            },
            "resourceGroup": "[variables('backup').recoveryServicesVault.resourceGroupName]",
            "subscriptionId": "[variables('backup').recoveryServicesVault.subscriptionId]",
            "type": "Microsoft.Resources/deployments"
        }
    ]
}
