{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "administratorUserName": {
            "defaultValue": "[uniqueString(parameters('name'))]",
            "metadata": {
                "description": "Specifies the user name of the Azure Virtual Machine administrator account."
            },
            "type": "securestring"
        },
        "administratorUserPassword": {
            "defaultValue": "[base64(replace(format('{0}{1}', newGuid(), newGuid()), '-', ''))]",
            "metadata": {
                "description": "Specifies the password of the Azure Virtual Machine administrator account."
            },
            "type": "securestring"
        },
        "audit": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the audit settings that will be applied to the Azure Virtual Machine."
            },
            "type": "object"
        },
        "availabilitySetName": {
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the name of the Azure Availability Set that the Azure Virtual Machine will be deployed within."
            },
            "type": "string"
        },
        "availabilitySetResourceGroupName": {
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Specifies the name of the Azure Availability Set that the Azure Virtual Machine will be deployed within."
            },
            "type": "string"
        },
        "backup": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the backup settings that will be applied to the Azure Virtual Machine."
            },
            "type": "object"
        },
        "dataDisks": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of data disks that will be assigned to the Azure Virtual Machine."
            },
            "type": "array"
        },
        "diskEncryptionSetName": {
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the name of the Azure Disk Encryption Set that the Azure Virtual Machine will be deployed within."
            },
            "type": "string"
        },
        "diskEncryptionSetResourceGroupName": {
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Specifies the name of the Azure Disk Encryption Set that the Azure Virtual Machine will be deployed within."
            },
            "type": "string"
        },
        "imageReference": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the properties of the image that will be used to provision the Azure Virtual Machine."
            },
            "type": "object"
        },
        "isEncryptionAtHostEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the end-to-end encryption feature is enabled on the Azure Virtual Machine."
            },
            "type": "bool"
        },
        "licenseType": {
            "defaultValue": "Windows_Client",
            "metadata": {
                "description": "Specifies the type of license that will be applied to the Azure Virtual Machine."
            },
            "type": "string"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Virtual Machine resource(s) should be deployed."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 64,
            "metadata": {
                "description": "Specifies the name of the Azure Virtual Machine."
            },
            "minLength": 1,
            "type": "string"
        },
        "networkInterfaceCards": {
            "metadata": {
                "description": "An array of network interface cards that will be assigned to the Azure Virtual Machine."
            },
            "type": "array"
        },
        "osDisk": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the properties of the operating system disk that will be provisioned and assigned to the Azure Virtual Machine."
            },
            "type": "object"
        },
        "priority": {
            "allowedValues": [
                "Low",
                "Regular",
                "Spot"
            ],
            "defaultValue": "Regular",
            "metadata": {
                "description": "Specifies the priority of the Azure Virtual Machine."
            },
            "type": "string"
        },
        "size": {
            "defaultValue": "Standard_D4s_v4",
            "metadata": {
                "description": "Specifies the size of the Azure Virtual Machine."
            },
            "type": "string"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Virtual Machine."
            },
            "type": "object"
        }
    },
    "variables": {
        "apiVersions": {
            "deployments": "2021-04-01",
            "disks": "2020-12-01",
            "insightsDataCollectionRuleAssociations": "2019-11-01-preview",
            "logAnalyticsWorkspaces": "2020-08-01",
            "networkInterfaces": "2020-07-01",
            "recoveryServicesVaultsProtectedItems": "2019-06-15",
            "serverVulnerabilityAssessments": "2020-01-01",
            "virtualMachines": "2020-12-01",
            "virtualMachinesExtensions": "2020-12-01"
        },
        "audit": "[union(variables('defaultResourceProperties').audit, parameters('audit'))]",
        "backup": "[union(variables('defaultResourceProperties').backup, parameters('backup'))]",
        "copy": [
            {
                "count": "[variables('dataDisksCount')]",
                "input": {
                    "caching": "[union(variables('defaultResourceProperties').dataDisk, parameters('dataDisks')[copyIndex('dataDisksByResourceId')]).cachingMode]",
                    "createOption": "Attach",
                    "lun": "[union(createObject('lun', copyIndex('dataDisksByResourceId')), parameters('dataDisks')[copyIndex('dataDisksByResourceId')]).lun]",
                    "managedDisk": {
                        "id": "[resourceId('Microsoft.Compute/disks', union(createObject('name', format('{0}-vmdatadisk-{1}', parameters('name'), copyIndex('dataDisksByResourceId'))), parameters('dataDisks')[copyIndex('dataDisksByResourceId')]).name)]"
                    }
                },
                "name": "dataDisksByResourceId"
            },
            {
                "count": "[variables('networkInterfaceCardsCount')]",
                "input": {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', union(createObject('name', format('{0}-vmnic-{1}', parameters('name'), copyIndex('networkInterfacesByResourceId'))), parameters('networkInterfaceCards')[copyIndex('networkInterfacesByResourceId')]).name)]"
                },
                "name": "networkInterfacesByResourceId"
            }
        ],
        "dataDisks": "[if(variables('dataDisksIsNotEmpty'), parameters('dataDisks'), createArray(createObject('name', 'dummyDataDisk')))]",
        "dataDisksCount": "[length(parameters('dataDisks'))]",
        "dataDisksIsNotEmpty": "[greater(variables('dataDisksCount'), 0)]",
        "defaultResourceProperties": {
            "audit": {
                "isEnabled": true,
                "logAnalyticsWorkspace": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "backup": {
                "policyName": "",
                "recoveryServicesVault": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "dataDisk": {
                "cachingMode": "ReadOnly",
                "createOption": "Empty",
                "networkAccessPolicy": "AllowAll",
                "skuName": "Premium_LRS"
            },
            "networkInterfaceCard": {
                "dnsServers": [],
                "ipConfiguration": {
                    "addressVersion": "IPv4 ",
                    "allocationMethod": "Dynamic",
                    "applicationSecurityGroup": {
                        "resourceGroupName": "[variables('resourceGroupName')]"
                    },
                    "loadBalancer": {
                        "backendAddressPoolName": "",
                        "inboundNatRuleName": "",
                        "name": "",
                        "resourceGroupName": "[variables('resourceGroupName')]"
                    },
                    "subnet": {
                        "resourceGroupName": "[variables('resourceGroupName')]"
                    }
                },
                "isAcceleratedNetworkingEnabled": false,
                "isIpForwardingEnabled": false,
                "networkSecurityGroup": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]"
                }
            },
            "osDisk": {
                "cachingMode": "ReadWrite",
                "createOption": "FromImage",
                "isWriteAcceleratorEnabled": false,
                "storageAccountType": "Premium_LRS"
            }
        },
        "isAuditEnabled": "[variables('audit').isEnabled]",
        "isAuditLogAnalyticsWorkspaceNameNotEmpty": "[not(empty(variables('audit').logAnalyticsWorkspace.name))]",
        "isBackupEnabled": "[not(empty(variables('backup').policyName))]",
        "isSpotVirtualMachine": "[equals(toLower(parameters('priority')), 'spot')]",
        "licenseTypeIsNotEmpty": "[not(empty(parameters('licenseType')))]",
        "networkInterfaceCardsCount": "[length(parameters('networkInterfaceCards'))]",
        "osType": "[if(or(and(variables('licenseTypeIsNotEmpty'), startsWith(parameters('licenseType'), 'Windows')), contains(union(createObject('offer', ''), parameters('imageReference')).offer, 'Windows'), contains(union(createObject('id', ''), parameters('imageReference')).id, 'Windows')), 'Windows', 'Linux')]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceIds": {
            "auditLogAnalyticsWorkspace": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.OperationalInsights/workspaces', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>'))]",
            "insightsDataCollectionRule": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.Insights/dataCollectionRules', format('Microsoft-VMInsights-Health-{0}', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>')))]",
            "recoveryServicesVaultBackupPolicy": "[resourceId(variables('backup').recoveryServicesVault.subscriptionId, variables('backup').recoveryServicesVault.resourceGroupName, 'Microsoft.RecoveryServices/vaults/backupPolicies', if(variables('isBackupEnabled'), variables('backup').recoveryServicesVault.name, '<NULL>'), if(variables('isBackupEnabled'), variables('backup').policyName, '<NULL>'))]",
            "virtualMachine": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
            "virtualMachineAntimalwareAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), split(variables('virtualMachineAntimalwareAgentName'), '/')[1])]",
            "virtualMachineDependencyAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), split(variables('virtualMachineDependencyAgentName'), '/')[1])]",
            "virtualMachineGuestConfigurationAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), split(variables('virtualMachineGuestConfigurationAgentName'), '/')[1])]",
            "virtualMachineGuestHealthAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), split(variables('virtualMachineGuestHealthAgentName'), '/')[1])]",
            "virtualMachineLogAnalyticsAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), split(variables('virtualMachineLogAnalyticsAgentName'), '/')[1])]",
            "virtualMachineMonitorAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), split(variables('virtualMachineMonitorAgentName'), '/')[1])]",
            "virtualMachineNetworkWatcherAgent": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), split(variables('virtualMachineNetworkWatcherAgentName'), '/')[1])]"
        },
        "subscriptionId": "[subscription().subscriptionId]",
        "virtualMachineAntimalwareAgentName": "[format('{0}/AzureAntimalwareAgent', parameters('name'))]",
        "virtualMachineDependencyAgentName": "[format('{0}/AzureDependencyAgent', parameters('name'))]",
        "virtualMachineGuestConfigurationAgentName": "[format('{0}/AzureGuestConfigurationAgent', parameters('name'))]",
        "virtualMachineGuestHealthAgentName": "[format('{0}/AzureGuestHealthAgent', parameters('name'))]",
        "virtualMachineLogAnalyticsAgentName": "[format('{0}/AzureLogAnalyticsAgent', parameters('name'))]",
        "virtualMachineMonitorAgentName": "[format('{0}/AzureMonitorAgent', parameters('name'))]",
        "virtualMachineNetworkWatcherAgentName": "[format('{0}/AzureNetworkWatcherAgent', parameters('name'))]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').networkInterfaces]",
            "copy": {
                "count": "[variables('networkInterfaceCardsCount')]",
                "mode": "Parallel",
                "name": "networkInterfaceCardsCopy"
            },
            "location": "[parameters('location')]",
            "name": "[format('{0}-vmnic-{1}', parameters('name'), copyIndex())]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(parameters('networkInterfaceCards')[copyIndex()].ipConfigurations)]",
                        "input": {
                            "name": "[parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')].name]",
                            "properties": {
                                "applicationSecurityGroups": "[if(empty(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).applicationSecurityGroup.name), null(), createArray(createObject('id', resourceId(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).applicationSecurityGroup.resourceGroupName, 'Microsoft.Network/applicationSecurityGroups', union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).applicationSecurityGroup.name))))]",
                                "loadBalancerBackendAddressPools": "[if(empty(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.backendAddressPoolName), null(), createArray(createObject('id', resourceId(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.resourceGroupName, 'Microsoft.Network/loadBalancers/backendAddressPools', union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.name, union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.backendAddressPoolName))))]",
                                "loadBalancerInboundNatRules": "[if(empty(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.inboundNatRuleName), null(), createArray(createObject('id', resourceId(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.resourceGroupName, 'Microsoft.Network/loadBalancers/backendAddressPools', union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.name, union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).loadBalancer.inboundNatRuleName))))]",
                                "primary": "[if(equals(length(parameters('networkInterfaceCards')[copyIndex()].ipConfigurations), 1), json('true'), parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')].isPrimary)]",
                                "privateIPAddressVersion": "[union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).addressVersion]",
                                "privateIPAllocationMethod": "[union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).allocationMethod]",
                                "subnet": {
                                    "id": "[resourceId(union(variables('defaultResourceProperties').networkInterfaceCard.ipConfiguration, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')].subnet.virtualNetworkName, parameters('networkInterfaceCards')[copyIndex()].ipConfigurations[copyIndex('ipConfigurations')].subnet.name)]"
                                }
                            }
                        },
                        "name": "ipConfigurations"
                    }
                ],
                "dnsSettings": {
                    "dnsServers": "[union(variables('defaultResourceProperties').networkInterfaceCard, parameters('networkInterfaceCards')[copyIndex()]).dnsServers]",
                    "internalDnsNameLabel": "[null()]"
                },
                "enableAcceleratedNetworking": "[union(variables('defaultResourceProperties').networkInterfaceCard, parameters('networkInterfaceCards')[copyIndex()]).isAcceleratedNetworkingEnabled]",
                "enableIPForwarding": "[union(variables('defaultResourceProperties').networkInterfaceCard, parameters('networkInterfaceCards')[copyIndex()]).isIpForwardingEnabled]",
                "networkSecurityGroup": "[if(empty(union(variables('defaultResourceProperties').networkInterfaceCard, parameters('networkInterfaceCards')[copyIndex()]).networkSecurityGroup.name), null(), createObject('id', resourceId(union(variables('defaultResourceProperties').networkInterfaceCard, parameters('networkInterfaceCards')[copyIndex()]).networkSecurityGroup.resourceGroupName, 'Microsoft.Network/networkSecurityGroups', union(variables('defaultResourceProperties').networkInterfaceCard, parameters('networkInterfaceCards')[copyIndex()]).networkSecurityGroup.name)))]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('apiVersions').disks]",
            "copy": {
                "count": "[variables('dataDisksCount')]",
                "mode": "Parallel",
                "name": "dataDisksCopy"
            },
            "location": "[parameters('location')]",
            "name": "[format('{0}-vmdatadisk-{1}', parameters('name'), copyIndex())]",
            "properties": {
                "creationData": {
                    "createOption": "[union(variables('defaultResourceProperties').dataDisk, variables('dataDisks')[copyIndex()]).createOption]"
                },
                "diskSizeGB": "[variables('dataDisks')[copyIndex()].sizeInGigabytes]",
                "encryption": "[if(empty(parameters('diskEncryptionSetName')), null(), createObject('diskEncryptionSetId', resourceId(parameters('diskEncryptionSetResourceGroupName'), 'Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))))]",
                "encryptionSettingsCollection": "[null()]",
                "networkAccessPolicy": "[union(variables('defaultResourceProperties').dataDisk, variables('dataDisks')[copyIndex()]).networkAccessPolicy]",
                "securityProfile": "[null()]"
            },
            "sku": {
                "name": "[union(variables('defaultResourceProperties').dataDisk, variables('dataDisks')[copyIndex()]).skuName]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/disks"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachines]",
            "dependsOn": [
                "dataDisksCopy",
                "networkInterfaceCardsCopy"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": {
                "additionalCapabilities": {
                    "ultraSSDEnabled": false
                },
                "availabilitySet": "[if(empty(parameters('availabilitySetName')), null(), createObject('id', resourceId(parameters('availabilitySetResourceGroupName'), 'Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))))]",
                "billingProfile": {
                    "maxPrice": "[if(variables('isSpotVirtualMachine'), -1, null())]"
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": false,
                        "storageUri": "[null()]"
                    }
                },
                "extensionsTimeBudget": "PT15M",
                "evictionPolicy": "[if(variables('isSpotVirtualMachine'), 'Deallocate', null())]",
                "hardwareProfile": {
                    "vmSize": "[parameters('size')]"
                },
                "licenseType": "[if(variables('licenseTypeIsNotEmpty'), parameters('licenseType'), null())]",
                "networkProfile": {
                    "networkInterfaces": "[variables('networkInterfacesByResourceId')]"
                },
                "osProfile": {
                    "adminUsername": "[parameters('administratorUserName')]",
                    "adminPassword": "[parameters('administratorUserPassword')]",
                    "allowExtensionOperations": true,
                    "computerName": "[parameters('name')]",
                    "customData": "[null()]",
                    "linuxConfiguration": "[null()]",
                    "secrets": [],
                    "windowsConfiguration": {
                        "additionalUnattendContent": "[null()]",
                        "enableAutomaticUpdates": true,
                        "patchSettings": {
                            "enableHotpatching": false,
                            "patchMode": "AutomaticByOS"
                        },
                        "provisionVmAgent": true,
                        "timeZone": "UTC",
                        "winRM": "[null()]"
                    }
                },
                "priority": "[parameters('priority')]",
                "securityProfile": {
                    "encryptionAtHost": "[parameters('isEncryptionAtHostEnabled')]",
                    "securityType": "[null()]",
                    "uefiSettings": "[null()]"
                },
                "storageProfile": {
                    "dataDisks": "[variables('dataDisksByResourceId')]",
                    "imageReference": "[if(empty(parameters('imageReference')), null(), parameters('imageReference'))]",
                    "osDisk": {
                        "caching": "[union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).cachingMode]",
                        "createOption": "[union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).createOption]",
                        "managedDisk": {
                            "diskEncryptionSet": "[if(empty(parameters('diskEncryptionSetName')), null(), createObject('id', resourceId(parameters('diskEncryptionSetResourceGroupName'), 'Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))))]",
                            "storageAccountType": "[union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).storageAccountType]"
                        },
                        "name": "[format('{0}-vmosdisk', parameters('name'))]",
                        "writeAcceleratorEnabled": "[union(variables('defaultResourceProperties').osDisk, parameters('osDisk')).isWriteAcceleratorEnabled]"
                    }
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[variables('virtualMachineAntimalwareAgentName')]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "protectedSettings": "[null()]",
                "publisher": "Microsoft.Azure.Security",
                "settings": {
                    "AntimalwareEnabled": true,
                    "Exclusions": {
                        "Extensions": ".ldf;.log",
                        "Paths": "D:\\DatabaseLogs;D:\\IISlogs",
                        "Processes": "mssence.svc"
                    },
                    "RealtimeProtectionEnabled": true,
                    "ScheduledScanSettings": {
                        "day": "7",
                        "isEnabled": true,
                        "scanType": "Quick",
                        "time": "120"
                    }
                },
                "type": "IaaSAntimalware",
                "typeHandlerVersion": "1.5"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[variables('virtualMachineDependencyAgentName')]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "[format('DependencyAgent{0}', variables('osType'))]",
                "typeHandlerVersion": "[if(equals(variables('osType'), 'Windows'), '9.9', '9.9')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[variables('virtualMachineGuestConfigurationAgentName')]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "publisher": "Microsoft.GuestConfiguration",
                "type": "[format('Configurationfor{0}', variables('osType'))]",
                "typeHandlerVersion": "[if(equals(variables('osType'), 'Windows'), '1.9', '1.9')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[variables('virtualMachineGuestHealthAgentName')]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
                "type": "[format('GuestHealth{0}Agent', variables('osType'))]",
                "typeHandlerVersion": "[if(equals(variables('osType'), 'Windows'), '1.0', '1.0')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "condition": "[variables('isAuditEnabled')]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[variables('virtualMachineLogAnalyticsAgentName')]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                    "workspaceKey": "[listKeys(variables('resourceIds').auditLogAnalyticsWorkspace, variables('apiVersions').logAnalyticsWorkspaces).secondarySharedKey]"
                },
                "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                "settings": {
                    "workspaceId": "[reference(variables('resourceIds').auditLogAnalyticsWorkspace, variables('apiVersions').logAnalyticsWorkspaces).customerId]"
                },
                "type": "MicrosoftMonitoringAgent",
                "typeHandlerVersion": "1.0"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[variables('virtualMachineMonitorAgentName')]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "publisher": "Microsoft.Azure.Monitor",
                "type": "[format('AzureMonitor{0}Agent', variables('osType'))]",
                "typeHandlerVersion": "[if(equals(variables('osType'), 'Windows'), '1.0', '1.9')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').virtualMachinesExtensions]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachine]"
            ],
            "location": "[parameters('location')]",
            "name": "[variables('virtualMachineNetworkWatcherAgentName')]",
            "properties": {
                "autoUpgradeMinorVersion": true,
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "[format('NetworkWatcherAgent{0}', variables('osType'))]",
                "typeHandlerVersion": "[if(equals(variables('osType'), 'Windows'), '1.4', '1.4')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "apiVersion": "[variables('apiVersions').serverVulnerabilityAssessments]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachineAntimalwareAgent]",
                "[variables('resourceIds').virtualMachineDependencyAgent]",
                "[variables('resourceIds').virtualMachineGuestConfigurationAgent]",
                "[variables('resourceIds').virtualMachineGuestHealthAgent]",
                "[variables('resourceIds').virtualMachineLogAnalyticsAgent]",
                "[variables('resourceIds').virtualMachineMonitorAgent]",
                "[variables('resourceIds').virtualMachineNetworkWatcherAgent]"
            ],
            "name": "[format('{0}/Microsoft.Security/default', parameters('name'))]",
            "type": "Microsoft.Compute/virtualMachines/providers/serverVulnerabilityAssessments"
        },
        {
            "apiVersion": "[variables('apiVersions').insightsDataCollectionRuleAssociations]",
            "condition": "[variables('isAuditEnabled')]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachineAntimalwareAgent]",
                "[variables('resourceIds').virtualMachineDependencyAgent]",
                "[variables('resourceIds').virtualMachineGuestConfigurationAgent]",
                "[variables('resourceIds').virtualMachineGuestHealthAgent]",
                "[variables('resourceIds').virtualMachineLogAnalyticsAgent]",
                "[variables('resourceIds').virtualMachineMonitorAgent]",
                "[variables('resourceIds').virtualMachineNetworkWatcherAgent]"
            ],
            "name": "[format('{0}/Microsoft.Insights/VMInsights-Health-DcrAssociation', parameters('name'))]",
            "properties": {
                "description": "Association of data collection rule for VM Insights Health.",
                "dataCollectionRuleId": "[variables('resourceIds').insightsDataCollectionRule]"
            },
            "type": "Microsoft.Compute/virtualMachines/providers/dataCollectionRuleAssociations"
        },
        {
            "apiVersion": "[variables('apiVersions').deployments]",
            "condition": "[variables('isBackupEnabled')]",
            "dependsOn": [
                "[variables('resourceIds').virtualMachineAntimalwareAgent]",
                "[variables('resourceIds').virtualMachineDependencyAgent]",
                "[variables('resourceIds').virtualMachineGuestConfigurationAgent]",
                "[variables('resourceIds').virtualMachineGuestHealthAgent]",
                "[variables('resourceIds').virtualMachineLogAnalyticsAgent]",
                "[variables('resourceIds').virtualMachineMonitorAgent]",
                "[variables('resourceIds').virtualMachineNetworkWatcherAgent]"
            ],
            "name": "[format('{0}-Backup', deployment().name)]",
            "properties": {
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                    "recoveryServicesVaultName": {
                        "value": "[variables('backup').recoveryServicesVault.name]"
                    },
                    "recoveryServicesVaultBackupPolicyId": {
                        "value": "[variables('resourceIds').recoveryServicesVaultBackupPolicy]"
                    },
                    "recoveryServicesVaultsProtectedItemsApiVersion": {
                        "value": "[variables('apiVersions').recoveryServicesVaultsProtectedItems]"
                    },
                    "virtualMachineId": {
                        "value": "[variables('resourceIds').virtualMachine]"
                    },
                    "virtualMachineName": {
                        "value": "[parameters('name')]"
                    },
                    "virtualMachineResourceGroupName": {
                        "value": "[resourceGroup().name]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "recoveryServicesVaultName": {
                            "type": "string"
                        },
                        "recoveryServicesVaultBackupPolicyId": {
                            "type": "string"
                        },
                        "recoveryServicesVaultsProtectedItemsApiVersion": {
                            "type": "string"
                        },
                        "virtualMachineId": {
                            "type": "string"
                        },
                        "virtualMachineName": {
                            "type": "string"
                        },
                        "virtualMachineResourceGroupName": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "apiVersion": "[parameters('recoveryServicesVaultsProtectedItemsApiVersion')]",
                            "name": "[format('{0}/Azure/iaasvmcontainer;iaasvmcontainerv2;{1};{2}/vm;iaasvmcontainerv2;{1};{2}', parameters('recoveryServicesVaultName'), parameters('virtualMachineResourceGroupName'), parameters('virtualMachineName'), guid(parameters('virtualMachineResourceGroupName'), parameters('virtualMachineName')))]",
                            "properties": {
                                "backupManagementType": "AzureIaasVM",
                                "extendedProperties": "[null()]",
                                "policyId": "[parameters('recoveryServicesVaultBackupPolicyId')]",
                                "protectedItemType": "Microsoft.Compute/virtualMachines",
                                "sourceResourceId": "[parameters('virtualMachineId')]"
                            },
                            "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems"
                        }
                    ]
                }
            },
            "resourceGroup": "[variables('backup').recoveryServicesVault.resourceGroupName]",
            "subscriptionId": "[variables('backup').recoveryServicesVault.subscriptionId]",
            "type": "Microsoft.Resources/deployments"
        }
    ]
}
