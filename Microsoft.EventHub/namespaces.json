{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "audit": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the audit settings that will be applied to the Azure Event Hub Namespace."
            },
            "type": "object"
        },
        "firewallRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of firewall rules that will be assigned to the Azure Event Hub Namespace."
            },
            "type": "array"
        },
        "identity": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the properties of the identity that will be assigned to the Azure Event Hub Namespace."
            },
            "type": "object"
        },
        "isAllowTrustedMicrosoftServicesEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether trusted Azure services and resources are allowed to access the Azure Event Hub Namespace."
            },
            "type": "bool"
        },
        "isPublicNetworkAccessEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the Azure Event Hub Namespace is accessible from the internet."
            },
            "type": "bool"
        },
        "isZoneRedundant": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the Azure Event Hub Namespace will be zone redundant."
            },
            "type": "bool"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Event Hub Namespace resource(s) will be deployed."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 50,
            "metadata": {
                "description": "Specifies the name of the Azure Event Hub Namespace."
            },
            "minLength": 6,
            "type": "string"
        },
        "privateEndpoints": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of private endpoints that will be linked with the Azure Event Hub Namespace."
            },
            "type": "array"
        },
        "skuName": {
            "defaultValue": "Standard_D2s_v4",
            "metadata": {
                "description": "Specifies the SKU name of the Azure Event Hub Namespace."
            },
            "type": "string"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Event Hub Namespace."
            },
            "type": "object"
        },
        "virtualNetworkRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of virtual network rules that will be assigned to the Azure Event Hub Namespace."
            },
            "type": "array"
        }
    },
    "variables": {
        "apiVersions": {
            "diagnosticSettings": "2017-05-01-preview",
            "eventHubNamespaces": "2021-06-01-preview",
            "eventHubNamespacesNetworkRulesets": "2021-06-01-preview",
            "privateEndpoints": "2020-07-01",
            "privateEndpointsPrivateDnsZoneGroups": "2020-07-01"
        },
        "audit": "[union(variables('defaultResourceProperties').audit, parameters('audit'))]",
        "defaultResourceProperties": {
            "audit": {
                "isEnabled": true,
                "logAnalyticsWorkspace": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "logNames": [
                    "ArchiveLogs",
                    "AutoScaleLogs",
                    "CustomerManagedKeyUserLogs",
                    "EventHubVNetConnectionEvent",
                    "KafkaCoordinatorLogs",
                    "KafkaUserErrorLogs",
                    "OperationalLogs"
                ],
                "retentionPolicy": {
                    "days": 137,
                    "isEnabled": true
                }
            },
            "identity": {
                "isEnabled": true,
                "name": "",
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "privateEndpoint": {
                "dnsZone": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "location": "[parameters('location')]",
                "subnet": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "virtualNetworkRule": {
                "ignoreMissingVnetServiceEndpoint": true,
                "subnet": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            }
        },
        "identity": "[union(variables('defaultResourceProperties').identity, parameters('identity'))]",
        "isAuditEnabled": "[variables('audit').isEnabled]",
        "isAuditLogAnalyticsWorkspaceNameNotEmpty": "[not(empty(variables('audit').logAnalyticsWorkspace.name))]",
        "privateEndpoints": "[if(variables('privateEndpointsIsNotEmpty'), parameters('privateEndpoints'), createArray(createObject('dnsZones', createArray(), 'name', '<NULL>')))]",
        "privateEndpointsCount": "[length(parameters('privateEndpoints'))]",
        "privateEndpointsIsNotEmpty": "[greater(variables('privateEndpointsCount'), 0)]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceIds": {
            "auditLogAnalyticsWorkspace": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.OperationalInsights/workspaces', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>'))]",
            "eventHubNamespace": "[resourceId('Microsoft.EventHub/namespaces', parameters('name'))]"
        },
        "subscriptionId": "[subscription().subscriptionId]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').eventHubNamespaces]",
            "identity": "[if(variables('identity').isEnabled, union(createObject('type', if(empty(variables('identity').name), 'SystemAssigned', 'UserAssigned')), if(empty(variables('identity').name), createObject(), createObject('userAssignedIdentities', createObject(resourceId(variables('identity').subscriptionId, variables('identity').resourceGroupName, 'Microsoft.ManagedIdentity/userAssignedIdentities', variables('identity').name))))), null())]",
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": {
                "disableLocalAuth": false,
                "isAutoInflateEnabled": true,
                "kafkaEnabled": true,
                "maximumThroughputUnits": 3,
                "zoneRedundant": "[parameters('isZoneRedundant')]"
            },
            "sku": {
                "name": "[parameters('skuName')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.EventHub/namespaces"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpoints]",
            "condition": "[variables('privateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('privateEndpointsCount')]",
                "mode": "Parallel",
                "name": "privateEndpointsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').eventHubNamespace]"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, variables('privateEndpoints')[copyIndex()]).location]",
            "name": "[variables('privateEndpoints')[copyIndex()].name]",
            "properties": {
                "customDnsConfigs": [],
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('privateEndpoints')[copyIndex()].name]",
                        "properties": {
                            "groupIds": [
                                "namespace"
                            ],
                            "privateLinkServiceId": "[variables('resourceIds').eventHubNamespace]"
                        }
                    }
                ],
                "subnet": {
                    "id": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint, variables('privateEndpoints')[copyIndex()]).subnet.subscriptionId, union(variables('defaultResourceProperties').privateEndpoint, variables('privateEndpoints')[copyIndex()]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', variables('privateEndpoints')[copyIndex()].subnet.virtualNetworkName, variables('privateEndpoints')[copyIndex()].subnet.name)]"
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/privateEndpoints"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpointsPrivateDnsZoneGroups]",
            "condition": "[variables('privateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('privateEndpointsCount')]",
                "mode": "Parallel",
                "name": "privateDnsZoneGroupsCopy"
            },
            "dependsOn": [
                "privateEndpointsCopy"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, variables('privateEndpoints')[copyIndex()]).location]",
            "name": "[format('{0}/default', variables('privateEndpoints')[copyIndex()].name)]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(variables('privateEndpoints')[copyIndex()].dnsZones)]",
                        "input": {
                            "name": "[replace(variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name, '.', '-')]",
                            "properties": {
                                "privateDnsZoneId": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).subscriptionId, union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).resourceGroupName, 'Microsoft.Network/privateDnsZones', variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name)]"
                            }
                        },
                        "name": "privateDnsZoneConfigs"
                    }
                ]
            },
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
        },
        {
            "apiVersion": "[variables('apiVersions').eventHubNamespacesNetworkRulesets]",
            "dependsOn": [
                "privateDnsZoneGroupsCopy",
                "[variables('resourceIds').eventHubNamespace]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/default', parameters('name'))]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(parameters('firewallRules'))]",
                        "input": {
                            "action": "Allow",
                            "ipMask": "[parameters('firewallRules')[copyIndex('ipRules')]]"
                        },
                        "name": "ipRules"
                    },
                    {
                        "count": "[length(parameters('virtualNetworkRules'))]",
                        "input": {
                            "name": "[union(variables('defaultResourceProperties').virtualNetworkRule, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')]).ignoreMissingVnetServiceEndpoint]",
                            "subnet": {
                                "id": "[resourceId(union(variables('defaultResourceProperties').virtualNetworkRule, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')]).subnet.subscriptionId, union(variables('defaultResourceProperties').virtualNetworkRule, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].subnet.virtualNetworkName, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].subnet.name)]"
                            }
                        },
                        "name": "virtualNetworkRules"
                    }
                ],
                "defaultAction": "[if(parameters('isPublicNetworkAccessEnabled'), 'Allow', 'Deny')]",
                "trustedServiceAccessEnabled": "[parameters('isAllowTrustedMicrosoftServicesEnabled')]"
            },
            "type": "Microsoft.EventHub/namespaces/networkRuleSets"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "condition": "[or(variables('isAuditEnabled'), variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'))]",
            "dependsOn": [
                "[variables('resourceIds').eventHubNamespace]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/Microsoft.Insights/audit', parameters('name'))]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(variables('audit').logNames)]",
                        "input": {
                            "category": "[variables('audit').logNames[copyIndex('logs')]]",
                            "enabled": "[variables('isAuditEnabled')]",
                            "retentionPolicy": {
                                "days": "[variables('audit').retentionPolicy.days]",
                                "enabled": "[variables('audit').retentionPolicy.isEnabled]"
                            }
                        },
                        "name": "logs"
                    }
                ],
                "workspaceId": "[variables('resourceIds').auditLogAnalyticsWorkspace]"
            },
            "type": "Microsoft.EventHub/namespaces/providers/diagnosticsettings"
        }
    ]
}
