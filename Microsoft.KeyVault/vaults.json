{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "examples": [
            {
                "description": "Deploys a standard key vault with the recommended set of properties for a development environment.",
                "name": "Development",
                "value": {
                    "audit": {
                        "isEnabled": false
                    },
                    "isPurgeProtectionEnabled": false,
                    "name": "MyKeyVault",
                    "skuName": "Standard"
                }
            },
            {
                "description": "Deploys a premium key vault with the recommended set of properties for a production environment.",
                "name": "Production",
                "value": {
                    "audit": {
                        "logAnalyticsWorkspace": {
                            "name": "MyLogAnalyticsWorkspace"
                        }
                    },
                    "keys": {
                        "container": []
                    },
                    "name": "MyKeyVault",
                    "privateEndpoints": [
                        {
                            "dnsZones": [
                                {
                                    "name": "privatelink.vaultcore.azure.net"
                                }
                            ],
                            "name": "MyPrivateEndpoint",
                            "subnet": {
                                "name":"MySubnet",
                                "virtualNetworkName": "MyVirtualNetwork"
                            }
                        }
                    ],
                    "secrets": {
                        "container": []
                    },
                    "skuName": "Premium"
                }
            }
        ]
    },
    "parameters": {
        "audit": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the audit settings that will be applied to the Azure Key Vault."
            },
            "type": "object"
        },
        "firewallRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of firewall rules that will be assigned to the Azure Key Vault."
            },
            "type": "array"
        },
        "isAllowTrustedMicrosoftServicesEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether trusted Microsoft services are allowed to access the Azure Key Vault."
            },
            "type": "bool"
        },
        "isDiskEncryptionEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether Azure Disk Encryption is permitted to retrieve secrets and upwrap keys in the Azure Key Vault."
            },
            "type": "bool"
        },
        "isPublicNetworkAccessEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the Azure Key Vault is accessible from the internet."
            },
            "type": "bool"
        },
        "isPurgeProtectionEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the purge protection feature is enabled on the Azure Key Vault."
            },
            "type": "bool"
        },
        "isRbacAuthorizationEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the RBAC authorization feature is enabled on the Azure Key Vault."
            },
            "type": "bool"
        },
        "isTemplateDeploymentEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether Azure Resource Manager is permitted to access secrets from the Azure Key Vault."
            },
            "type": "bool"
        },
        "isVirtualMachineDeploymentEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether Azure virtual machines are able to retrieve certificates stored as secrets from the Azure Key Vault."
            },
            "type": "bool"
        },
        "keys": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the array of keys that will be stored within the Azure Key Vault."
            },
            "type": "secureObject"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Key Vault resource(s) will be deployed."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 24,
            "metadata": {
                "description": "Specifies the name of the Azure Key Vault."
            },
            "minLength": 3,
            "type": "string"
        },
        "privateEndpoints": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of private endpoints that will be linked with the Azure Key Vault."
            },
            "type": "array"
        },
        "secrets": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the array of secrets that will be stored within the Azure Key Vault."
            },
            "type": "secureObject"
        },
        "skuName": {
            "allowedValues": [
                "Premium",
                "Standard"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "Specifies the SKU name of the Azure Key Vault."
            },
            "type": "string"
        },
        "softDeleteRetentionInDays": {
            "defaultValue": 14,
            "metadata": {
                "description": "Specifies the amount of time, in days, that items will remain soft deleted within the Azure Key Vault."
            },
            "type": "int"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Key Vault."
            },
            "type": "object"
        },
        "tenantId": {
            "defaultValue": "[subscription().tenantId]",
            "metadata": {
                "description": "Specifies the Azure Active Directory tenant GUID that will be used for authenticating requests to the Azure Key Vault."
            },
            "type": "string"
        },
        "virtualNetworkRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of virtual network rules that will be assigned to the Azure Key Vault."
            },
            "type": "array"
        }
    },
    "variables": {
        "apiVersions": {
            "diagnosticSettings": "2017-05-01-preview",
            "keyVaults": "2019-09-01",
            "keyVaultKeysApiVersion": "2019-09-01",
            "keyVaultSecretsApiVersion": "2019-09-01",
            "privateEndpoints": "2020-07-01",
            "privateEndpointsPrivateDnsZoneGroups": "2020-07-01"
        },
        "audit": "[union(variables('defaultResourceProperties').audit, parameters('audit'))]",
        "defaultResourceProperties": {
            "audit": {
                "isEnabled": true,
                "logAnalyticsWorkspace": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "logNames": [
                    "AuditEvent"
                ],
                "retentionPolicy": {
                    "days": 137,
                    "isEnabled": true
                }
            },
            "key": {
                "isEnabled": true
            },
            "privateEndpoint": {
                "dnsZone": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "location": "[parameters('location')]",
                "subnet": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "virtualNetworkRules": {
                "subnet": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            }
        },
        "isAuditEnabled": "[variables('audit').isEnabled]",
        "isAuditLogAnalyticsWorkspaceNameNotEmpty": "[not(empty(variables('audit').logAnalyticsWorkspace.name))]",
        "privateEndpointsCount": "[length(parameters('privateEndpoints'))]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceIds": {
            "auditLogAnalyticsWorkspace": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.OperationalInsights/workspaces', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>'))]",
            "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
        },
        "subscriptionId": "[subscription().subscriptionId]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').keyVaults]",
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": {
                "createMode": "default",
                "enabledForDeployment": "[parameters('isVirtualMachineDeploymentEnabled')]",
                "enabledForDiskEncryption": "[parameters('isDiskEncryptionEnabled')]",
                "enabledForTemplateDeployment": "[parameters('isTemplateDeploymentEnabled')]",
                "enablePurgeProtection": "[if(parameters('isPurgeProtectionEnabled'), parameters('isPurgeProtectionEnabled'), null())]",
                "enableRbacAuthorization": "[parameters('isRbacAuthorizationEnabled')]",
                "enableSoftDelete": true,
                "networkAcls": {
                    "bypass": "[if(parameters('isAllowTrustedMicrosoftServicesEnabled'), 'AzureServices', 'None')]",
                    "copy": [
                        {
                            "count": "[length(parameters('firewallRules'))]",
                            "input": {
                                "value": "[parameters('firewallRules')[copyIndex('ipRules')]]"
                            },
                            "name": "ipRules"
                        },
                        {
                            "count": "[length(parameters('virtualNetworkRules'))]",
                            "input": {
                                "id": "[resourceId(union(variables('defaultResourceProperties').virtualNetworkRules, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')]).subnet.subscriptionId, union(variables('defaultResourceProperties').virtualNetworkRules, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].subnet.virtualNetworkName, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].subnet.name)]"
                            },
                            "name": "virtualNetworkRules"
                        }
                    ],
                    "defaultAction": "[if(parameters('isPublicNetworkAccessEnabled'), 'Allow', 'Deny')]"
                },
                "sku": {
                    "family": "A",
                    "name": "[parameters('skuName')]"
                },
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "tenantId": "[parameters('tenantId')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.KeyVault/vaults"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpoints]",
            "copy": {
                "count": "[variables('privateEndpointsCount')]",
                "mode": "Parallel",
                "name": "privateEndpointsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').keyVault]"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, parameters('privateEndpoints')[copyIndex()]).location]",
            "name": "[parameters('privateEndpoints')[copyIndex()].name]",
            "properties": {
                "customDnsConfigs": [],
                "privateLinkServiceConnections": [
                    {
                        "name": "[parameters('privateEndpoints')[copyIndex()].name]",
                        "properties": {
                            "groupIds": [
                                "vault"
                            ],
                            "privateLinkServiceId": "[variables('resourceIds').keyVault]"
                        }
                    }
                ],
                "subnet": {
                    "id": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint, parameters('privateEndpoints')[copyIndex()]).subnet.subscriptionId, union(variables('defaultResourceProperties').privateEndpoint, parameters('privateEndpoints')[copyIndex()]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('privateEndpoints')[copyIndex()].subnet.virtualNetworkName, parameters('privateEndpoints')[copyIndex()].subnet.name)]"
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/privateEndpoints"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpointsPrivateDnsZoneGroups]",
            "copy": {
                "count": "[variables('privateEndpointsCount')]",
                "mode": "Parallel",
                "name": "privateDnsZoneGroupsCopy"
            },
            "dependsOn": [
                "privateEndpointsCopy"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, parameters('privateEndpoints')[copyIndex()]).location]",
            "name": "[format('{0}/default', parameters('privateEndpoints')[copyIndex()].name)]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(parameters('privateEndpoints')[copyIndex()].dnsZones)]",
                        "input": {
                            "name": "[replace(parameters('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name, '.', '-')]",
                            "properties": {
                                "privateDnsZoneId": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint.dnsZone, parameters('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).subscriptionId, union(variables('defaultResourceProperties').privateEndpoint.dnsZone, parameters('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).resourceGroupName, 'Microsoft.Network/privateDnsZones', parameters('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name)]"
                            }
                        },
                        "name": "privateDnsZoneConfigs"
                    }
                ]
            },
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "condition": "[or(variables('isAuditEnabled'), variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'))]",
            "dependsOn": [
                "[variables('resourceIds').keyVault]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/Microsoft.Insights/audit', parameters('name'))]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(variables('audit').logNames)]",
                        "input": {
                            "category": "[variables('audit').logNames[copyIndex('logs')]]",
                            "enabled": "[variables('isAuditEnabled')]",
                            "retentionPolicy": {
                                "days": "[variables('audit').retentionPolicy.days]",
                                "enabled": "[variables('audit').retentionPolicy.isEnabled]"
                            }
                        },
                        "name": "logs"
                    }
                ],
                "workspaceId": "[variables('resourceIds').auditLogAnalyticsWorkspace]"
            },
            "type": "Microsoft.KeyVault/vaults/providers/diagnosticsettings"
        },
        {
            "apiVersion": "[variables('apiVersions').keyVaultKeysApiVersion]",
            "copy": {
                "count": "[length(union(createObject('collection', createArray()), parameters('keys')).collection)]",
                "mode": "Parallel",
                "name": "keysCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').keyVault]"
            ],
            "name": "[format('{0}/{1}', parameters('name'), parameters('keys').collection[copyIndex()].name)]",
            "properties": {
                "attributes": {
                    "enabled": "[union(variables('defaultResourceProperties').key, parameters('keys').collection[copyIndex()]).isEnabled]",
                    "exp": "[null()]",
                    "nbf": "[null()]"
                },
                "curveName": "[null()]",
                "keyOps": "[parameters('keys').collection[copyIndex()].allowedOperations]",
                "keySize": "[parameters('keys').collection[copyIndex()].size]",
                "kty": "[parameters('keys').collection[copyIndex()].type]"
            },
            "type": "Microsoft.KeyVault/vaults/keys"
        },
        {
            "apiVersion": "[variables('apiVersions').keyVaultSecretsApiVersion]",
            "copy": {
                "count": "[length(union(createObject('collection', createArray()), parameters('secrets')).collection)]",
                "mode": "Parallel",
                "name": "secretsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').keyVault]"
            ],
            "name": "[format('{0}/{1}', parameters('name'), parameters('secrets').collection[copyIndex()].name)]",
            "properties": {
                "value": "[parameters('secrets').collection[copyIndex()].value]"
            },
            "type": "Microsoft.KeyVault/vaults/secrets"
        }
    ]
}
