{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "auditLogAnalyticsWorkspaceName": {
            "metadata": {
                "description": "Specifies the name of the Azure Log Analytics workspace that the Azure Key Vault audit feature will send its data to."
            },
            "type": "string"
        },
        "auditLogAnalyticsWorkspaceResourceGroupName": {
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Specifies the resource group name of the Azure Log Analytics workspace that the Azure Key Vault audit feature will send its data to."
            },
            "type": "string"
        },
        "auditLogAnalyticsWorkspaceSubscriptionId": {
            "defaultValue": "[subscription().subscriptionId]",
            "metadata": {
                "description": "Specifies the subscription id of the Azure Log Analytics workspace that the Azure Key Vault audit feature will send its data to."
            },
            "type": "string"
        },
        "firewallRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of firewall rules that will be assigned to the Azure Key Vault."
            },
            "type": "array"
        },
        "isAllowTrustedMicrosoftServicesEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether trusted Microsoft services are allowed to access the Azure Key Vault."
            },
            "type": "bool"
        },
        "isDiskEncryptionEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether Azure Disk Encryption is permitted to retrieve secrets and upwrap keys in the Azure Key Vault."
            },
            "type": "bool"
        },
        "isPurgeProtectionEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the purge protection feature is enabled on the Azure Key Vault."
            },
            "type": "bool"
        },
        "isRbacAuthorizationEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the RBAC authorization feature is enabled on the Azure Key Vault."
            },
            "type": "bool"
        },
        "isTemplateDeploymentEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether Azure Resource Manager is permitted to access secrets from the Azure Key Vault."
            },
            "type": "bool"
        },
        "isVirtualMachineDeploymentEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether Azure virtual machines are able to retrieve certificates stored as secrets from the Azure Key Vault."
            },
            "type": "bool"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Key Vault resource(s) will be deployed."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 24,
            "metadata": {
                "description": "Specifies the name of the Azure Key Vault."
            },
            "minLength": 3,
            "type": "string"
        },
        "secrets": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the array of secrets that will be stored within the Azure Key Vault."
            },
            "type": "secureObject"
        },
        "skuName": {
            "allowedValues": [
                "Premium",
                "Standard"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "Specifies the SKU name of the Azure Key Vault."
            },
            "type": "string"
        },
        "softDeleteRetentionInDays": {
            "defaultValue": 14,
            "metadata": {
                "description": "Specifies the amount of time, in days, that items will remain soft deleted within the Azure Key Vault."
            },
            "type": "int"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Key Vault."
            },
            "type": "object"
        },
        "tenantId": {
            "defaultValue": "[subscription().tenantId]",
            "metadata": {
                "description": "Specifies the Azure Active Directory tenant GUID that will be used for authenticating requests to the Azure Key Vault."
            },
            "type": "string"
        },
        "virtualNetworkRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of virtual network rules that will be assigned to the Azure Key Vault."
            },
            "type": "array"
        }
    },
    "variables": {
        "apiVersions": {
            "diagnosticSettings": "2017-05-01-preview",
            "keyVaults": "2019-09-01",
            "keyVaultSecretsApiVersion": "2019-09-01"
        },
        "copy": [
            {
                "count": "[length(parameters('firewallRules'))]",
                "input": {
                    "value": "[parameters('firewallRules')[copyIndex('firewallRules')]]"
                },
                "name": "firewallRules"
            },
            {
                "count": "[length(parameters('virtualNetworkRules'))]",
                "input": {
                    "id": "[resourceId(union(variables('virtualNetworkRulesDefaultObject'), parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')]).subscriptionId, union(variables('virtualNetworkRulesDefaultObject'), parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')]).resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].virtualNetworkName, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].subnetName)]"
                },
                "name": "virtualNetworkRules"
            }
        ],
        "firewallRulesIsNotEmpty": "[greater(length(parameters('firewallRules')), 0)]",
        "isAuditingEnabled": "[not(empty(parameters('auditLogAnalyticsWorkspaceName')))]",
        "keyVaultResourceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]",
        "secretsArrayCount": "[length(union(variables('secretsDefaultObject'), parameters('secrets')).array)]",
        "secretsArrayIsNotEmpty": "[greater(variables('secretsArrayCount'), 0)]",
        "secretsDefaultObject": {
            "array": []
        },
        "virtualNetworkRulesDefaultObject": {
            "resourceGroupName": "[resourceGroup().name]",
            "subscriptionId": "[subscription().subscriptionId]"
        },
        "virtualNetworkRulesIsNotEmpty": "[greater(length(parameters('virtualNetworkRules')), 0)]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').keyVaults]",
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": {
                "createMode": "default",
                "enabledForDeployment": "[parameters('isVirtualMachineDeploymentEnabled')]",
                "enabledForDiskEncryption": "[parameters('isDiskEncryptionEnabled')]",
                "enabledForTemplateDeployment": "[parameters('isTemplateDeploymentEnabled')]",
                "enablePurgeProtection": "[if(parameters('isPurgeProtectionEnabled'), parameters('isPurgeProtectionEnabled'), json('null'))]",
                "enableRbacAuthorization": "[parameters('isRbacAuthorizationEnabled')]",
                "enableSoftDelete": true,
                "networkAcls": {
                    "bypass": "[if(parameters('isAllowTrustedMicrosoftServicesEnabled'), 'AzureServices', 'None')]",
                    "defaultAction": "[if(or(variables('firewallRulesIsNotEmpty'), variables('virtualNetworkRulesIsNotEmpty')), 'Deny', 'Allow')]",
                    "ipRules": "[if(variables('firewallRulesIsNotEmpty'), variables('firewallRules'), json('null'))]",
                    "virtualNetworkRules": "[if(variables('virtualNetworkRulesIsNotEmpty'), variables('virtualNetworkRules'), json('null'))]"
                },
                "sku": {
                    "family": "A",
                    "name": "[parameters('skuName')]"
                },
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "tenantId": "[parameters('tenantId')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.KeyVault/vaults"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "dependsOn": [
                "[variables('keyVaultResourceId')]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/microsoft.insights/audit', parameters('name'))]",
            "properties": {
                "logs": [
                    {
                        "category": "AuditEvent",
                        "enabled": true,
                        "retentionPolicy": {
                            "enabled": false,
                            "days": 0
                        }
                    }
                ],
                "workspaceId": "[if(variables('isAuditingEnabled'), resourceId(parameters('auditLogAnalyticsWorkspaceSubscriptionId'), parameters('auditLogAnalyticsWorkspaceResourceGroupName'), 'Microsoft.OperationalInsights/workspaces', parameters('auditLogAnalyticsWorkspaceName')), json('null'))]"
            },
            "type": "Microsoft.KeyVault/vaults/providers/diagnosticsettings"
        },
        {
            "apiVersion": "[variables('apiVersions').keyVaultSecretsApiVersion]",
            "condition": "[variables('secretsArrayIsNotEmpty')]",
            "copy": {
                "count": "[variables('secretsArrayCount')]",
                "name": "secretsCopy"
            },
            "dependsOn": [
                "[variables('keyVaultResourceId')]"
            ],
            "name": "[format('{0}/{1}', parameters('name'), if(variables('secretsArrayIsNotEmpty'), parameters('secrets').array[copyIndex()].name, 'dummySecret'))]",
            "properties": {
                "value": "[parameters('secrets').array[copyIndex()].value]"
            },
            "type": "Microsoft.KeyVault/vaults/secrets"
        }
    ]
}
