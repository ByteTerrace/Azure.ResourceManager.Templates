{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "audit": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the audit settings that will be applied to the Azure Cosmos DB Account."
            },
            "type": "object"
        },
        "consistencyPolicy": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the consistency policy that will be enforced on the Azure Cosmos DB Account."
            },
            "type": "object"
        },
        "createMode": {
            "defaultValue": "Default",
            "metadata": {
                "description": "Specifies the mode that will be used when provisioning the Azure Cosmos DB Account."
            },
            "type": "string"
        },
        "firewallRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of firewall rules that will be assigned to the Azure Cosmos DB Account."
            },
            "type": "array"
        },
        "geoReplicationLocations": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of locations that the Azure Cosmos DB Account will be replicated to."
            },
            "type": "array"
        },
        "identity": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the properties of the identity that will be assigned to the Azure Cosmos DB Account."
            },
            "type": "object"
        },
        "isAdvancedThreatProtectionEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the advanced threat detection feature is enabled on the Azure Cosmos DB Account."
            },
            "type": "bool"
        },
        "isAllowTrustedMicrosoftServicesEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether trusted Microsoft services are allowed to access the Azure Cosmos DB Account."
            },
            "type": "bool"
        },
        "isAnalyticalStorageEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the analytical storage feature is enabled on the Azure Cosmos DB Account."
            },
            "type": "bool"
        },
        "isAutomaticFailoverEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the automatic failover feature is enabled on the Azure Cosmos DB Account."
            },
            "type": "bool"
        },
        "isAzurePortalAccessEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether access via the Azure Portal is enabled on the Azure Cosmos DB Account."
            },
            "type": "bool"
        },
        "isAzurePublicDatacenterAccessEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether access via public Azure datacenters is enabled on the Azure Cosmos DB Account."
            },
            "type": "bool"
        },
        "isFreeTierEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether free tier feature is enabled on the Azure Cosmos DB Account."
            },
            "type": "bool"
        },
        "isLocalAuthenticationEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the Azure Cosmos DB Account permits local authentication."
            },
            "type": "bool"
        },
        "isMultipleWriteLocationsEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the Azure Cosmos DB Account is capable of writing to multiple locations."
            },
            "type": "bool"
        },
        "isPublicNetworkAccessEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the Azure Cosmos DB Account is accessible from the internet."
            },
            "type": "bool"
        },
        "kind": {
            "allowedValues": [
                "GlobalDocumentDB",
                "MongoDB",
                "Parse"
            ],
            "defaultValue": "GlobalDocumentDB",
            "metadata": {
                "description": "Specifies the kind of the Azure Cosmos DB Account."
            },
            "type": "string"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Cosmos DB Account resource(s) will be deployed."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 44,
            "metadata": {
                "description": "Specifies the name of the Azure Cosmos DB Account."
            },
            "minLength": 3,
            "type": "string"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Cosmos DB Account."
            },
            "type": "object"
        },
        "virtualNetworkRules": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of virtual network rules that will be assigned to the Azure Cosmos DB Account."
            },
            "type": "array"
        }
    },
    "variables": {
        "apiVersions": {
            "advancedThreatProtectionSettings": "2019-01-01",
            "databaseAccounts": "2021-07-01-preview",
            "diagnosticSettings": "2017-05-01-preview"
        },
        "audit": "[union(variables('defaultResourceProperties').audit, parameters('audit'))]",
        "azureDatacentersIpAddress": "0.0.0.0",
        "azurePortalIpAddresses": [
            "40.76.54.131",
            "52.169.50.45",
            "52.176.6.30",
            "52.187.184.26",
            "104.42.195.92"
        ],
        "copy": [
            {
                "count": "[variables('userAssignedIdentitiesCount')]",
                "input": "[resourceId(union(variables('defaultResourceProperties').userAssignedIdentity, variables('identity').userAssignedIdentities[copyIndex('userAssignedIdentitiesWithResourceId')]).subscriptionId, union(variables('defaultResourceProperties').userAssignedIdentity, variables('identity').userAssignedIdentities[copyIndex('userAssignedIdentitiesWithResourceId')]).resourceGroupName, 'Microsoft.ManagedIdentity/userAssignedIdentities', variables('identity').userAssignedIdentities[copyIndex('userAssignedIdentitiesWithResourceId')].name)]",
                "name": "userAssignedIdentitiesWithResourceId"
            }
        ],
        "defaultResourceProperties": {
            "audit": {
                "isEnabled": true,
                "logAnalyticsWorkspace": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "logNames": [
                    "CassandraRequests",
                    "ControlPlaneRequests",
                    "DataPlaneRequests",
                    "GremlinRequests",
                    "MongoRequests",
                    "TableApiRequests"
                ],
                "retentionPolicy": {
                    "days": 137,
                    "isEnabled": true
                }
            },
            "consistencyPolicy": {
                "defaultConsistencyLevel": "Session",
                "maxIntervalInSeconds": 300,
                "maxStaleRequestCount": 100000
            },
            "geoReplicationLocation": {
                "isZoneRedundant": false
            },
            "identity": {
                "isEnabled": true,
                "type": "[if(greater(variables('userAssignedIdentitiesCount'), 0), 'UserAssigned', 'SystemAssigned')]",
                "userAssignedIdentities": []
            },
            "virtualNetworkRule": {
                "subnet": {
                    "resourceGroupName": "[resourceGroup().name]",
                    "subscriptionId": "[subscription().subscriptionId]"
                }
            }
        },
        "firewallRulesForAzureDatacenters": "[if(parameters('isAzurePublicDatacenterAccessEnabled'), union(createArray(variables('azureDatacentersIpAddress')), variables('azurePortalIpAddresses')), variables('firewallRulesForAzurePortal'))]",
        "firewallRulesForAzurePortal": "[if(or(parameters('isAzurePortalAccessEnabled'), parameters('isAzurePublicDatacenterAccessEnabled')), union(variables('azurePortalIpAddresses'), parameters('firewallRules')), parameters('firewallRules'))]",
        "geoReplicationLocations": "[if(equals(length(parameters('geoReplicationLocations')), 0), createArray(createObject('name', parameters('location'))), parameters('geoReplicationLocations'))]",
        "identity": "[union(variables('defaultResourceProperties').identity, parameters('identity'))]",
        "isAuditEnabled": "[variables('audit').isEnabled]",
        "isAuditLogAnalyticsWorkspaceNameNotEmpty": "[not(empty(variables('audit').logAnalyticsWorkspace.name))]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceIds": {
            "auditLogAnalyticsWorkspace": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.OperationalInsights/workspaces', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>'))]",
            "databaseAccount": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
        },
        "subscriptionId": "[subscription().subscriptionId]",
        "userAssignedIdentitiesCount": "[length(union(createObject('userAssignedIdentities', createArray()), parameters('identity')).userAssignedIdentities)]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').databaseAccounts]",
            "identity": "[if(variables('identity').isEnabled, union(createObject('type', union(variables('defaultResourceProperties').identity, parameters('identity')).type), if(contains(variables('identity').type, 'UserAssigned'), createObject('userAssignedIdentities', json(replace(replace(replace(string(variables('userAssignedIdentitiesWithResourceId')), ',', ':{},'), '[', '{'), ']', ':{}}'))), createObject())), null())]",
            "kind": "[parameters('kind')]",
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": {
                "apiProperties": "[if(equals(toLower(parameters('kind')), 'mongodb'), createObject('serverVersion', '4.0'), null())]",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "[union(variables('defaultResourceProperties').consistencyPolicy, parameters('consistencyPolicy')).defaultConsistencyLevel]",
                    "maxIntervalInSeconds": "[union(variables('defaultResourceProperties').consistencyPolicy, parameters('consistencyPolicy')).maxIntervalInSeconds]",
                    "maxStalenessPrefix": "[union(variables('defaultResourceProperties').consistencyPolicy, parameters('consistencyPolicy')).maxStaleRequestCount]"
                },
                "copy": [
                    {
                        "count": "[length(variables('firewallRulesForAzureDatacenters'))]",
                        "input": {
                            "ipAddressOrRange": "[variables('firewallRulesForAzureDatacenters')[copyIndex('ipRules')]]"
                        },
                        "name": "ipRules"
                    },
                    {
                        "count": "[length(variables('geoReplicationLocations'))]",
                        "input": {
                            "failoverPriority": "[union(createObject('failoverPriority', copyIndex('locations')), variables('geoReplicationLocations')[copyIndex('locations')]).failoverPriority]",
                            "isZoneRedundant": "[union(variables('defaultResourceProperties').geoReplicationLocation, variables('geoReplicationLocations')[copyIndex('locations')]).isZoneRedundant]",
                            "locationName": "[variables('geoReplicationLocations')[copyIndex('locations')].name]"
                        },
                        "name": "locations"
                    },
                    {
                        "count": "[length(parameters('virtualNetworkRules'))]",
                        "input": {
                            "id": "[resourceId(union(variables('defaultResourceProperties').virtualNetworkRule, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')]).subnet.subscriptionId, union(variables('defaultResourceProperties').virtualNetworkRule, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].subnet.virtualNetworkName, parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')].subnet.name)]"
                        },
                        "name": "virtualNetworkRules"
                    }
                ],
                "createMode": "[parameters('createMode')]",
                "databaseAccountOfferType": "Standard",
                "diagnosticsLogSettings": {
                    "enableFullTextQuery": "None"
                },
                "disableLocalAuth": "[not(parameters('isLocalAuthenticationEnabled'))]",
                "enableAnalyticalStorage": "[parameters('isAnalyticalStorageEnabled')]",
                "enableAutomaticFailover": "[parameters('isAutomaticFailoverEnabled')]",
                "enableFreeTier": "[parameters('isFreeTierEnabled')]",
                "enableMultipleWriteLocations": "[parameters('isMultipleWriteLocationsEnabled')]",
                "isVirtualNetworkFilterEnabled": "[greater(length(parameters('virtualNetworkRules')), 0)]",
                "networkAclBypass": "[if(parameters('isAllowTrustedMicrosoftServicesEnabled'), 'AzureServices', 'None')]",
                "publicNetworkAccess": "[if(parameters('isPublicNetworkAccessEnabled'), 'Enabled', 'Disabled')]"
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.DocumentDB/databaseAccounts"
        },
        {
            "apiVersion": "[variables('apiVersions').advancedThreatProtectionSettings]",
            "dependsOn": [
                "[variables('resourceIds').databaseAccount]"
            ],
            "name": "[format('{0}/Microsoft.Security/current', parameters('name'))]",
            "properties": {
                "isEnabled": "[parameters('isAdvancedThreatProtectionEnabled')]"
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/providers/advancedThreatProtectionSettings"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "condition": "[or(variables('isAuditEnabled'), variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'))]",
            "dependsOn": [
                "[variables('resourceIds').databaseAccount]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/Microsoft.Insights/audit', parameters('name'))]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(variables('audit').logNames)]",
                        "input": {
                            "category": "[variables('audit').logNames[copyIndex('logs')]]",
                            "enabled": "[variables('isAuditEnabled')]",
                            "retentionPolicy": {
                                "days": "[variables('audit').retentionPolicy.days]",
                                "enabled": "[variables('audit').retentionPolicy.isEnabled]"
                            }
                        },
                        "name": "logs"
                    }
                ],
                "workspaceId": "[variables('resourceIds').auditLogAnalyticsWorkspace]"
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/providers/diagnosticsettings"
        }
    ]
}
