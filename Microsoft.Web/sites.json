{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "examples": [
            {
                "description": "Deploys a function application with the recommended set of properties for a development environment.",
                "name": "Function Application - Development",
                "value": {
                    "applicationSettings": {
                        "collection": []
                    },
                    "audit": {
                        "isEnabled": false
                    },
                    "connectionStrings": {
                        "collection": []
                    },
                    "cors": {
                        "allowedOrigins": []
                    },
                    "customDomains": [],
                    "frameworkVersion": "DOTNETCORE|3.1",
                    "functionExtension": {
                        "isEnabled": true,
                        "storageAccount": {
                            "name": "MyStorageAccount"
                        }
                    },
                    "name": "MyFunctionApplication",
                    "servicePlan": {
                        "name": "MyServicePlan"
                    }
                }
            },
            {
                "description": "Deploys a function application with the recommended set of properties for a production environment.",
                "name": "Function Application - Production",
                "value": {
                    "applicationSettings": {
                        "collection": []
                    },
                    "audit": {
                        "logAnalyticsWorkspace": {
                            "name": "MyLogAnalyticsWorkspace"
                        }
                    },
                    "connectionStrings": {
                        "collection": []
                    },
                    "cors": {
                        "allowedOrigins": []
                    },
                    "customDomains": [],
                    "frameworkVersion": "DOTNETCORE|3.1",
                    "functionExtension": {
                        "isEnabled": true,
                        "storageAccount": {
                            "name": "MyStorageAccount"
                        }
                    },
                    "ipSecurityRestrictions": [
                        {
                            "action": "Allow",
                            "name": "default",
                            "priority": 0,
                            "subnet":{
                                "name": "MySubnet",
                                "virtualNetworkName": "MyVirtualNetwork"
                            }
                        }
                    ],
                    "name": "MyFunctionApplication",
                    "privateEndpoints": [
                        {
                            "dnsZones": [
                                {
                                    "name": "privatelink.azurewebsites.net"
                                }
                            ],
                            "name": "MyPrivateEndpoint",
                            "subnet": {
                                "name":"MySubnet",
                                "virtualNetworkName": "MyVirtualNetwork"
                            }
                        }
                    ],
                    "servicePlan": {
                        "name": "MyServicePlan"
                    },
                    "subnet": {
                        "name":"MySubnet",
                        "virtualNetworkName": "MyVirtualNetwork"
                    }
                }
            },
            {
                "description": "Deploys a logic workflow with the recommended set of properties for a development environment.",
                "name": "Logic Workflow - Development",
                "value": {
                    "applicationSettings": {
                        "collection": []
                    },
                    "audit": {
                        "isEnabled": false
                    },
                    "connectionStrings": {
                        "collection": []
                    },
                    "cors": {
                        "allowedOrigins": []
                    },
                    "customDomains": [],
                    "frameworkVersion": "NODEJS|12",
                    "functionExtension": {
                        "isEnabled": true,
                        "isLogicWorkflowExtensionEnabled": true,
                        "storageAccount": {
                            "name": "MyStorageAccount"
                        }
                    },
                    "is32BitModeEnabled": true,
                    "name": "MyFunctionApplication",
                    "servicePlan": {
                        "name": "MyServicePlan"
                    }
                }
            },
            {
                "description": "Deploys a logic workflow with the recommended set of properties for a production environment.",
                "name": "Logic Workflow - Production",
                "value": {
                    "applicationSettings": {
                        "collection": []
                    },
                    "audit": {
                        "logAnalyticsWorkspace": {
                            "name": "MyLogAnalyticsWorkspace"
                        }
                    },
                    "connectionStrings": {
                        "collection": []
                    },
                    "cors": {
                        "allowedOrigins": []
                    },
                    "customDomains": [],
                    "frameworkVersion": "NODEJS|12",
                    "functionExtension": {
                        "isEnabled": true,
                        "isLogicWorkflowExtensionEnabled": true,
                        "storageAccount": {
                            "name": "MyStorageAccount"
                        }
                    },
                    "ipSecurityRestrictions": [
                        {
                            "action": "Allow",
                            "name": "default",
                            "priority": 0,
                            "subnet":{
                                "name": "MySubnet",
                                "virtualNetworkName": "MyVirtualNetwork"
                            }
                        }
                    ],
                    "is32BitModeEnabled": true,
                    "name": "MyFunctionApplication",
                    "privateEndpoints": [
                        {
                            "dnsZones": [
                                {
                                    "name": "privatelink.azurewebsites.net"
                                }
                            ],
                            "name": "MyPrivateEndpoint",
                            "subnet": {
                                "name":"MySubnet",
                                "virtualNetworkName": "MyVirtualNetwork"
                            }
                        }
                    ],
                    "servicePlan": {
                        "name": "MyServicePlan"
                    },
                    "subnet": {
                        "name":"MySubnet",
                        "virtualNetworkName": "MyVirtualNetwork"
                    }
                }
            },
            {
                "description": "Deploys a web application with the recommended set of properties for a development environment.",
                "name": "Web Application - Development",
                "value": {
                    "applicationSettings": {
                        "collection": []
                    },
                    "audit": {
                        "isEnabled": false
                    },
                    "connectionStrings": {
                        "collection": []
                    },
                    "cors": {
                        "allowedOrigins": []
                    },
                    "customDomains": [],
                    "frameworkVersion": "NODEJS|12",
                    "functionExtension": {
                        "isEnabled": true,
                        "isLogicWorkflowExtensionEnabled": true,
                        "storageAccount": {
                            "name": "MyStorageAccount"
                        }
                    },
                    "ipSecurityRestrictions": [
                        {
                            "action": "Allow",
                            "name": "default",
                            "priority": 0,
                            "subnet":{
                                "name": "MySubnet",
                                "virtualNetworkName": "MyVirtualNetwork"
                            }
                        }
                    ],
                    "is32BitModeEnabled": true,
                    "name": "MyFunctionApplication",
                    "privateEndpoints": [
                        {
                            "dnsZones": [
                                {
                                    "name": "privatelink.azurewebsites.net"
                                }
                            ],
                            "name": "MyPrivateEndpoint",
                            "subnet": {
                                "name":"MySubnet",
                                "virtualNetworkName": "MyVirtualNetwork"
                            }
                        }
                    ],
                    "servicePlan": {
                        "name": "MyServicePlan"
                    },
                    "subnet": {
                        "name":"MySubnet",
                        "virtualNetworkName": "MyVirtualNetwork"
                    }
                }
            },
            {
                "description": "Deploys a web application with the recommended set of properties for a development environment.",
                "name": "Web Application - Development",
                "value": {
                    "applicationSettings": {
                        "collection": []
                    },
                    "audit": {
                        "isEnabled": false
                    },
                    "connectionStrings": {
                        "collection": []
                    },
                    "cors": {
                        "allowedOrigins": []
                    },
                    "customDomains": [],
                    "frameworkVersion": "DOTNETCORE|3.1",
                    "name": "MyWebApplication",
                    "servicePlan": {
                        "name": "MyServicePlan"
                    }
                }
            },
            {
                "description": "Deploys a web application with the recommended set of properties for a production environment.",
                "name": "Web Application - Production",
                "value": {
                    "applicationSettings": {
                        "collection": []
                    },
                    "audit": {
                        "logAnalyticsWorkspace": {
                            "name": "MyLogAnalyticsWorkspace"
                        }
                    },
                    "connectionStrings": {
                        "collection": []
                    },
                    "cors": {
                        "allowedOrigins": []
                    },
                    "customDomains": [],
                    "frameworkVersion": "DOTNETCORE|3.1",
                    "ipSecurityRestrictions": [
                        {
                            "action": "Allow",
                            "name": "default",
                            "priority": 0,
                            "subnet":{
                                "name": "MySubnet",
                                "virtualNetworkName": "MyVirtualNetwork"
                            }
                        }
                    ],
                    "name": "MyWebApplication",
                    "privateEndpoints": [
                        {
                            "dnsZones": [
                                {
                                    "name": "privatelink.azurewebsites.net"
                                }
                            ],
                            "name": "MyPrivateEndpoint",
                            "subnet": {
                                "name":"MySubnet",
                                "virtualNetworkName": "MyVirtualNetwork"
                            }
                        }
                    ],
                    "servicePlan": {
                        "name": "MyServicePlan"
                    },
                    "subnet": {
                        "name":"MySubnet",
                        "virtualNetworkName": "MyVirtualNetwork"
                    }
                }
            }
        ]
    },
    "parameters": {
        "audit": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the audit settings that will be applied to the Azure Web Site."
            },
            "type": "object"
        },
        "autoHeal": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the auto-heal settings that will be applied to the Azure Web Site."
            },
            "type": "object"
        },
        "applicationSettings": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the array of application setting name-value pairs that will be set on the Azure Web Site."
            },
            "type": "secureObject"
        },
        "connectionStrings": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the array of connection strings that will be set on the Azure Web Site."
            },
            "type": "secureObject"
        },
        "cors": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the CORS settings that will be applied to the Azure Web Site."
            },
            "type": "object"
        },
        "customDomains": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of custom domains that will be assigned to the Azure Web Site."
            },
            "type": "array"
        },
        "dnsZones": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the properties of the DNS zones that the Azure Web Site will be integrated with."
            },
            "type": "object"
        },
        "frameworkVersion": {
            "allowedValues": [
                "DOTNET|4.8",
                "DOTNET-Isolated|5.0",
                "DOTNET|6.0",
                "DOTNET-Isolated|6.0",
                "DOTNETCORE|3.1",
                "JAVA|8",
                "JAVA|11",
                "NODEJS|12",
                "NODEJS|14",
                "POWERSHELL|7.0",
                "PYTHON|3.6",
                "PYTHON|3.7",
                "PYTHON|3.8"
            ],
            "defaultValue": "DOTNET-Isolated|6.0",
            "metadata": {
                "description": "Specifies the application framework version that will be deployed within the Azure Web Site."
            },
            "type": "string"
        },
        "functionExtension": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the function extension settings that will be applied to the Azure Web Site."
            },
            "type": "object"
        },
        "healthCheck": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the health check settings that will be applied to the Azure Web Site."
            },
            "type": "object"
        },
        "identity": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the properties of the identity that will be assigned to the Azure Web Site."
            },
            "type": "object"
        },
        "ipSecurityRestrictions": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of IP security restrictions that will be applied to the Azure Web Site."
            },
            "type": "array"
        },
        "isAlwaysOnEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the always on feature is enabled on the Azure Web Site."
            },
            "type": "bool"
        },
        "isClientAffinityEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the client affinity feature is enabled on the Azure Web Site."
            },
            "type": "bool"
        },
        "isHttpsOnlyModeEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether HTTP network protocol support is restricted to HTTPS on the Azure Web Site."
            },
            "type": "bool"
        },
        "isHttp20SupportEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether support for the HTTP 2.0 network protocol is enabled on the Azure Web Site."
            },
            "type": "bool"
        },
        "isRouteAllTrafficThroughVirtualNetworkEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates that all Azure Web Site outbound traffic will be subject to the network security groups and user-defined routes of the integrated virtual network."
            },
            "type": "bool"
        },
        "isWebSocketSupportEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether support for the HTTP 2.0 network protocol is enabled on the Azure Web Site."
            },
            "type": "bool"
        },
        "is32BitModeEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the Azure Web Site will run in 32-bit mode."
            },
            "type": "bool"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Web Site resource(s) should be deployed."
            },
            "type": "string"
        },
        "logging": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the logging settings that will be applied to the Azure Web Site."
            },
            "type": "object"
        },
        "metadata": {
            "defaultValue": [],
            "metadata": {
                "description": "An object that encapsulates the array of metadata name-value pairs that will be set on the Azure Web Site."
            },
            "type": "array"
        },
        "minimumSupportedTlsVersion": {
            "allowedValues": [
                "1.2"
            ],
            "defaultValue": "1.2",
            "metadata": {
                "description": "Specifies the minimum version of the TLS protocol that will be supported within the Azure Web Site."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 60,
            "metadata": {
                "description": "Specifies the name of the Azure Web Site."
            },
            "minLength": 2,
            "type": "string"
        },
        "privateEndpoints": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of private endpoints that will be linked with the Azure Web Site."
            },
            "type": "array"
        },
        "privateCertificates": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of private certificates that will be assigned to the Azure Web Site."
            },
            "type": "array"
        },
        "publicCertificates": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of public certificates that will be assigned to the Azure Web Site."
            },
            "type": "array"
        },
        "remoteDebugging": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the remote debugging settings that will be applied to the Azure Web Site."
            },
            "type": "object"
        },
        "scmIpSecurityRestrictions": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of SCM IP security restrictions that will be applied to the Azure Web Site."
            },
            "type": "array"
        },
        "servicePlan": {
            "metadata": {
                "description": "An object that encapsulates the properties of the service plan that the Azure Web Site will be deployed within."
            },
            "type": "object"
        },
        "subnet": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the properties of the subnet that the Azure Web Site will be integrated with."
            },
            "type": "object"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Web Site."
            },
            "type": "object"
        },
        "timeZone": {
            "defaultValue": "UTC",
            "metadata": {
                "description": "Specifies the time zone of the Azure Web Site."
            },
            "type": "string"
        }
    },
    "variables": {
        "apiVersions": {
            "diagnosticSettings": "2017-05-01-preview",
            "privateCertificates": "2020-12-01",
            "privateDnsZonesARecords": "2020-06-01",
            "privateDnsZonesCnameRecords": "2020-06-01",
            "privateEndpoints": "2020-07-01",
            "privateEndpointsPrivateDnsZoneGroups": "2020-07-01",
            "publicDnsZonesARecords": "2018-05-01",
            "publicDnsZonesCnameRecords": "2018-05-01",
            "publicDnsZonesTxtRecords": "2018-05-01",
            "serverFarms": "2020-09-01",
            "sites": "2020-12-01",
            "sitesConfig": "2020-12-01",
            "sitesHostNameBindings": "2020-12-01",
            "sitesPublicCertificates": "2020-12-01",
            "storageAccounts": "2021-02-01"
        },
        "applicationSettingsCollection": "[union(union(variables('defaultResourceProperties').applicationSettings, parameters('applicationSettings')).collection, variables('functionApplicationSettingsCollection'), variables('logicWorkflowSettingsCollection'), if(variables('privateEndpointsIsNotEmpty'), variables('privateEndpointsApplicationSettingsCollection'), createArray()), if(equals(variables('currentStack'), 'node'), createArray(createObject('name', 'WEBSITE_NODE_DEFAULT_VERSION', 'value', format('~{0}', split(parameters('frameworkVersion'), '|')[1]))), createArray()), if(variables('autoHeal').isProactiveModeEnabled, createArray(), createArray(createObject('name', 'WEBSITE_PROACTIVE_AUTOHEAL_ENABLED', 'value', 'False'))), if(variables('healthCheck').isEnabled, createArray(createObject('name', 'WEBSITE_HEALTHCHECK_MAXPINGFAILURES', 'value', variables('healthCheck').unhealthyInstanceLifetimeInMinutes)), createArray()))]",
        "audit": "[union(variables('defaultResourceProperties').audit, createObject('logNames', if(variables('functionExtension').isEnabled, variables('defaultFunctionExtenstionLogNames'), variables('defaultApplicationServiceLogNames'))), parameters('audit'))]",
        "autoHeal": "[union(variables('defaultResourceProperties').autoHeal, parameters('autoHeal'))]",
        "cors": "[union(variables('defaultResourceProperties').cors, parameters('cors'))]",
        "defaultApplicationServiceLogNames": [
            "AppServiceAntivirusScanAuditLogs",
            "AppServiceAppLogs",
            "AppServiceAuditLogs",
            "AppServiceFileAuditLogs",
            "AppServiceIPSecAuditLogs",
            "AppServicePlatformLogs"
        ],
        "defaultFunctionExtenstionLogNames": [
            "FunctionAppLogs"
        ],
        "defaultResourceProperties": {
            "applicationSettings": {
                "collection": [],
                "slotEnabledNames": []
            },
            "audit": {
                "isEnabled": true,
                "logAnalyticsWorkspace": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "retentionPolicy": {
                    "days": 137,
                    "isEnabled": true
                }
            },
            "autoHeal": {
                "isProactiveModeEnabled": true,
                "rules": {}
            },
            "connectionStrings": {
                "collection": [],
                "slotEnabledNames": []
            },
            "cors": {
                "allowedOrigins": [],
                "isCredentialSupportEnabled": false
            },
            "customDomain": {
                "ssl": {
                    "certificate": {
                        "name": "[null()]",
                        "resourceGroupName": "[variables('resourceGroupName')]",
                        "subscriptionId": "[variables('subscriptionId')]",
                        "thumbprint": ""
                    },
                    "state": "SniEnabled"
                }
            },
            "functionExtension": {
                "isEnabled": false,
                "isLogicWorkflowExtensionEnabled": false,
                "storageAccount": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "version": "~4"
            },
            "healthCheck": {
                "isEnabled": true,
                "path": "/",
                "unhealthyInstanceLifetimeInMinutes": 7
            },
            "identity": {
                "isEnabled": true,
                "type": "[if(greater(variables('userAssignedIdentitiesCount'), 0), 'UserAssigned', 'SystemAssigned')]",
                "userAssignedIdentities": []
            },
            "ipSecurityRestriction": {
                "description": "",
                "headers": {},
                "ipAddress": "[null()]",
                "subnet": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "subnetMask": "[null()]",
                "tag": "[null()]"
            },
            "logging": {
                "application": {
                    "azureBlobStorage": {
                        "level": "Off",
                        "sasUrl": "[null()]"
                    },
                    "azureTableStorage": {
                        "level": "Off",
                        "sasUrl": "[null()]"
                    },
                    "fileSystem": {
                        "level": "Off"
                    },
                    "isDetailedErrorsEnabled": false
                },
                "http": {
                    "azureBlobStorage": {
                        "level": "Off",
                        "sasUrl": "[null()]"
                    },
                    "fileSystem": {
                        "level": "Off"
                    },
                    "isFailedRequestTracingEnabled": false
                }
            },
            "privateCertificate": {
                "keyVault": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "privateDnsZone": {
                "endpoint": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "name": "",
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "privateEndpoint": {
                "dnsZone": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "location": "[parameters('location')]",
                "subnet": {
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                }
            },
            "publicCertificate": {
                "location": "CurrentUserMy"
            },
            "publicDnsZone": {
                "name": "",
                "isARecordEnabled": true,
                "isCnameRecordEnabled": true,
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "remoteDebugging": {
                "isEnabled": false,
                "version": "[null()]"
            },
            "servicePlan": {
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            },
            "subnet": {
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            }
        },
        "connectionStringsCollection": "[union(variables('defaultResourceProperties').connectionStrings, parameters('connectionStrings')).collection]",
        "currentStack": "[if(startsWith(parameters('frameworkVersion'), 'dotnetcore'), 'dotnetcore', if(startsWith(parameters('frameworkVersion'), 'dotnet'), 'dotnet', if(startsWith(parameters('frameworkVersion'), 'java'), 'java', if(startsWith(parameters('frameworkVersion'), 'nodejs'), 'node', if(startsWith(parameters('frameworkVersion'), 'powershell'), 'powershell', if(startsWith(parameters('frameworkVersion'), 'python'), 'python', null()))))))]",
        "customDomainsCount": "[length(parameters('customDomains'))]",
        "dnsZones": "[union(createObject('private', createArray(), 'public', createArray()), parameters('dnsZones'))]",
        "functionApplicationSettingsCollection": "[if(variables('functionExtension').isEnabled, createArray(createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', variables('functionExtension').version), createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', variables('functionWorkerRuntime'))), createArray())]",
        "functionExtension": "[union(variables('defaultResourceProperties').functionExtension, parameters('functionExtension'))]",
        "functionWorkerRuntime": "[if(and(equals(variables('currentStack'), 'dotnet'), startsWith(parameters('frameworkVersion'), 'dotnet-isolated')), 'dotnet-isolated', if(startsWith(variables('currentStack'), 'dotnet'), 'dotnet', if(equals(variables('currentStack'), 'java'), 'java', if(equals(variables('currentStack'), 'node'), 'node', if(equals(variables('currentStack'), 'powershell'), 'powershell', if(equals(variables('currentStack'), 'python'), 'python', null()))))))]",
        "healthCheck": "[union(variables('defaultResourceProperties').healthCheck, parameters('healthCheck'))]",
        "identity": "[union(variables('defaultResourceProperties').identity, parameters('identity'))]",
        "isAuditEnabled": "[variables('audit').isEnabled]",
        "isAuditLogAnalyticsWorkspaceNameNotEmpty": "[not(empty(variables('audit').logAnalyticsWorkspace.name))]",
        "logging": "[union(variables('defaultResourceProperties').logging, parameters('logging'))]",
        "logicWorkflowSettingsCollection": "[if(and(variables('functionExtension').isEnabled, variables('functionExtension').isLogicWorkflowExtensionEnabled), createArray(createObject('name', 'APP_KIND', 'value', 'workflowApp'), createObject('name', 'AzureFunctionsJobHost__extensionBundle__id', 'value', 'Microsoft.Azure.Functions.ExtensionBundle.Workflows'), createObject('name', 'AzureFunctionsJobHost__extensionBundle__version', 'value', '[1.*, 2.0.0)')), createArray())]",
        "metadata": "[union(createArray(createObject('name', 'CURRENT_STACK', 'value', variables('currentStack'))), parameters('metadata'))]",
        "privateCertificatesCount": "[length(parameters('privateCertificates'))]",
        "privateDnsZonesCount": "[length(variables('dnsZones').private)]",
        "privateDnsZonesIsNotEmpty": "[greater(variables('privateDnsZonesCount'), 0)]",
        "privateEndpoints": "[if(variables('privateEndpointsIsNotEmpty'), parameters('privateEndpoints'), createArray(createObject('dnsZones', createArray(), 'name', '<NULL>')))]",
        "privateEndpointsApplicationSettingsCollection": [
            {
                "name": "WEBSITE_CONTENTOVERVNET",
                "value": "1"
            },
            {
                "name": "WEBSITE_DNS_SERVER",
                "value": "168.63.129.16"
            }
        ],
        "privateEndpointsCount": "[length(parameters('privateEndpoints'))]",
        "privateEndpointsIsNotEmpty": "[greater(variables('privateEndpointsCount'), 0)]",
        "publicCertificatesCount": "[length(parameters('publicCertificates'))]",
        "publicDnsZonesCount": "[length(variables('dnsZones').public)]",
        "publicDnsZonesIsNotEmpty": "[greater(variables('publicDnsZonesCount'), 0)]",
        "remoteDebugging": "[union(variables('defaultResourceProperties').remoteDebugging, parameters('remoteDebugging'))]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceIds": {
            "auditLogAnalyticsWorkspace": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.OperationalInsights/workspaces', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>'))]",
            "serverFarm": "[resourceId(variables('servicePlan').subscriptionId, variables('servicePlan').resourceGroupName, 'Microsoft.Web/serverfarms', variables('servicePlan').name)]",
            "site": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
            "storageAccount": "[resourceId(variables('functionExtension').storageAccount.subscriptionId, variables('functionExtension').storageAccount.resourceGroupName, 'Microsoft.Storage/storageAccounts', union(createObject('name', '<NULL>'), variables('functionExtension').storageAccount).name)]",
            "subnet": "[resourceId(variables('subnet').subscriptionId, variables('subnet').resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', union(createObject('virtualNetworkName', '<NULL>'), variables('subnet')).virtualNetworkName, union(createObject('name', '<NULL>'), variables('subnet')).name)]"
        },
        "scmIpSecurityRestrictionsCount": "[length(parameters('scmIpSecurityRestrictions'))]",
        "servicePlan": "[union(variables('defaultResourceProperties').servicePlan, parameters('servicePlan'))]",
        "subnet": "[union(variables('defaultResourceProperties').subnet, parameters('subnet'))]",
        "subnetIsNotEmpty": "[not(empty(parameters('subnet')))]",
        "subscriptionId": "[subscription().subscriptionId]",
        "userAssignedIdentitiesCount": "[length(union(createObject('userAssignedIdentities', createArray()), parameters('identity')).userAssignedIdentities)]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').sites]",
            "identity": "[if(variables('identity').isEnabled, union(createObject('type', union(variables('defaultResourceProperties').identity, parameters('identity')).type), if(contains(variables('identity').type, 'UserAssigned'), createObject('userAssignedIdentities', createObject(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', first(variables('identity').userAssignedIdentities).name), createObject())), createObject())), null())]",
            "kind": "[if(variables('functionExtension').isEnabled, if(variables('functionExtension').isLogicWorkflowExtensionEnabled, 'functionapp,workflowapp', 'functionapp'), 'app')]",
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": {
                "clientAffinityEnabled": "[parameters('isClientAffinityEnabled')]",
                "clientCertEnabled": false,
                "clientCertMode": "Required",
                "name": "[parameters('name')]",
                "httpsOnly": "[parameters('isHttpsOnlyModeEnabled')]",
                "serverFarmId": "[variables('resourceIds').serverFarm]",
                "siteConfig": {
                    "appSettings": "[if(variables('functionExtension').isEnabled, union(createArray(createObject('name', 'AzureWebJobsStorage', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', variables('functionExtension').storageAccount.name, listKeys(variables('resourceIds').storageAccount, variables('apiVersions').storageAccounts).keys[1].value)), createObject('name', 'FUNCTION_APP_EDIT_MODE', 'value', 'readonly')), if(or(startsWith(reference(variables('resourceIds').serverFarm, variables('apiVersions').serverFarms, 'Full').sku.name, 'EP'), startsWith(reference(variables('resourceIds').serverFarm, variables('apiVersions').serverFarms, 'Full').sku.name, 'WS'), startsWith(reference(variables('resourceIds').serverFarm, variables('apiVersions').serverFarms, 'Full').sku.name, 'Y')), createArray(createObject('name', 'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', variables('functionExtension').storageAccount.name, listKeys(variables('resourceIds').storageAccount, variables('apiVersions').storageAccounts).keys[1].value)), createObject('name', 'WEBSITE_CONTENTSHARE', 'value', format('functionapp-{0}', toLower(parameters('name'))))), createArray()), variables('applicationSettingsCollection')), variables('applicationSettingsCollection'))]",
                    "copy": [
                        {
                            "count": "[length(variables('connectionStringsCollection'))]",
                            "input": {
                                "connectionString": "[variables('connectionStringsCollection')[copyIndex('connectionStrings')].value]",
                                "name": "[variables('connectionStringsCollection')[copyIndex('connectionStrings')].name]",
                                "type": "[variables('connectionStringsCollection')[copyIndex('connectionStrings')].type]"
                            },
                            "name": "connectionStrings"
                        }
                    ],
                    "linuxFxVersion": "[if(endsWith(reference(variables('resourceIds').serverFarm, variables('apiVersions').serverFarms).webSpace, 'linux'), parameters('frameworkVersion'), null())]",
                    "windowsFxVersion": "[null()]"
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Web/sites"
        },
        {
            "apiVersion": "[variables('apiVersions').sitesConfig]",
            "condition": "[not(variables('functionExtension').isEnabled)]",
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/logs', parameters('name'))]",
            "properties": {
                "applicationLogs": {
                    "azureBlobStorage": {
                        "level": "[variables('logging').application.azureBlobStorage.level]",
                        "retentionInDays": 3,
                        "sasUrl": "[variables('logging').application.azureBlobStorage.sasUrl]"
                    },
                    "azureTableStorage": {
                        "level": "[variables('logging').application.azureTableStorage.level]",
                        "sasUrl": "[variables('logging').application.azureTableStorage.sasUrl]"
                    },
                    "fileSystem": {
                        "level": "[variables('logging').application.fileSystem.level]"
                    }
                },
                "detailedErrorMessages": {
                    "enabled": "[variables('logging').application.isDetailedErrorsEnabled]"
                },
                "failedRequestsTracing": {
                    "enabled": "[variables('logging').http.isFailedRequestTracingEnabled]"
                },
                "httpLogs": {
                    "azureBlobStorage": {
                        "level": "[variables('logging').http.azureBlobStorage.level]",
                        "retentionInDays": 3,
                        "sasUrl": "[variables('logging').http.azureBlobStorage.sasUrl]"
                    },
                    "fileSystem": {
                        "level": "[variables('logging').http.fileSystem.level]",
                        "retentionInDays": 3,
                        "retentionInMb": 31
                    }
                }
            },
            "type": "Microsoft.Web/sites/config"
        },
        {
            "apiVersion": "[variables('apiVersions').sitesConfig]",
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/slotConfigNames', parameters('name'))]",
            "properties": {
                "appSettingNames": "[union(variables('defaultResourceProperties').applicationSettings, parameters('applicationSettings')).slotEnabledNames]",
                "connectionStringNames": "[union(variables('defaultResourceProperties').connectionStrings, parameters('connectionStrings')).slotEnabledNames]"
            },
            "type": "Microsoft.Web/sites/config"
        },
        {
            "apiVersion": "[variables('apiVersions').sitesConfig]",
            "condition": "[variables('subnetIsNotEmpty')]",
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/virtualNetwork', parameters('name'))]",
            "properties": {
                "subnetResourceId": "[variables('resourceIds').subnet]"
            },
            "type": "Microsoft.Web/sites/config"
        },
        {
            "apiVersion": "[variables('apiVersions').sitesConfig]",
            "condition": "[variables('subnetIsNotEmpty')]",
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/web', parameters('name'))]",
            "properties": {
                "acrUseManagedIdentityCreds": false,
                "alwaysOn": "[parameters('isAlwaysOnEnabled')]",
                "autoHealEnabled": "[not(empty(variables('autoHeal').rules))]",
                "autoHealRules": "[variables('autoHeal').rules]",
                "copy": [
                    {
                        "count": "[length(parameters('ipSecurityRestrictions'))]",
                        "input": {
                            "action": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).action]",
                            "description": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).description]",
                            "headers": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).headers]",
                            "ipAddress": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).ipAddress]",
                            "priority": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).priority]",
                            "name": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).name]",
                            "subnetMask": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).subnetMask]",
                            "tag": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).tag]",
                            "vnetSubnetResourceId": "[if(empty(union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).subnet.name), null(), resourceId(union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).subnet.subscriptionId, union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).subnet.virtualNetworkName, union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).subnet.name))]"
                        },
                        "name": "ipSecurityRestrictions"
                    },
                    {
                        "count": "[variables('scmIpSecurityRestrictionsCount')]",
                        "input": {
                            "action": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).action]",
                            "description": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).description]",
                            "headers": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).headers]",
                            "ipAddress": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).ipAddress]",
                            "priority": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).priority]",
                            "name": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).name]",
                            "subnetMask": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).subnetMask]",
                            "tag": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).tag]",
                            "vnetSubnetResourceId": "[if(empty(union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).subnet.name), null(), resourceId(union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).subnet.subscriptionId, union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).subnet.virtualNetworkName, union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).subnet.name))]"
                        },
                        "name": "scmIpSecurityRestrictions"
                    }
                ],
                "cors": {
                    "allowedOrigins": "[variables('cors').allowedOrigins]",
                    "supportCredentials": "[variables('cors').isCredentialSupportEnabled]"
                },
                "ftpsState": "FtpsOnly",
                "functionAppScaleLimit": "[if(variables('functionExtension').isEnabled, 1, null())]",
                "functionsRuntimeScaleMonitoringEnabled": "[and(variables('functionExtension').isEnabled, variables('privateEndpointsIsNotEmpty'))]",
                "healthCheckPath": "[if(variables('healthCheck').isEnabled, variables('healthCheck').path, '')]",
                "http20Enabled": "[parameters('isHttp20SupportEnabled')]",
                "javaVersion": "[if(equals(variables('currentStack'), 'java'), if(endsWith(parameters('frameworkVersion'), '|8'), '1.8', if(endsWith(parameters('frameworkVersion'), '|11'), '11', null())), null())]",
                "logsDirectorySizeLimit": 27,
                "managedPipelineMode": "Integrated",
                "metadata": "[variables('metadata')]",
                "minimumElasticInstanceCount": "[if(variables('functionExtension').isEnabled, 1, null())]",
                "minTlsVersion": "[parameters('minimumSupportedTlsVersion')]",
                "scmMinTlsVersion": "[parameters('minimumSupportedTlsVersion')]",
                "powerShellVersion": "[if(equals(variables('currentStack'), 'powershell'), if(endsWith(parameters('frameworkVersion'), '|7'), '~7', null()), null())]",
                "remoteDebuggingEnabled": "[variables('remoteDebugging').isEnabled]",
                "remoteDebuggingVersion": "[variables('remoteDebugging').version]",
                "scmIpSecurityRestrictionsUseMain": "[equals(variables('scmIpSecurityRestrictionsCount'), 0)]",
                "use32BitWorkerProcess": "[parameters('is32BitModeEnabled')]",
                "vnetRouteAllEnabled": "[or(parameters('isRouteAllTrafficThroughVirtualNetworkEnabled'), variables('privateEndpointsIsNotEmpty'))]",
                "webSocketsEnabled": "[parameters('isWebSocketSupportEnabled')]",
                "websiteTimeZone": "[parameters('timeZone')]"
            },
            "type": "Microsoft.Web/sites/config"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpoints]",
            "condition": "[variables('privateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('privateEndpointsCount')]",
                "mode": "Parallel",
                "name": "privateEndpointsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, variables('privateEndpoints')[copyIndex()]).location]",
            "name": "[variables('privateEndpoints')[copyIndex()].name]",
            "properties": {
                "customDnsConfigs": [],
                "privateLinkServiceConnections": [
                    {
                        "name": "[variables('privateEndpoints')[copyIndex()].name]",
                        "properties": {
                            "groupIds": [
                                "sites"
                            ],
                            "privateLinkServiceId": "[variables('resourceIds').site]"
                        }
                    }
                ],
                "subnet": {
                    "id": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint, variables('privateEndpoints')[copyIndex()]).subnet.subscriptionId, union(variables('defaultResourceProperties').privateEndpoint, variables('privateEndpoints')[copyIndex()]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', variables('privateEndpoints')[copyIndex()].subnet.virtualNetworkName, variables('privateEndpoints')[copyIndex()].subnet.name)]"
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Network/privateEndpoints"
        },
        {
            "apiVersion": "[variables('apiVersions').privateEndpointsPrivateDnsZoneGroups]",
            "condition": "[variables('privateEndpointsIsNotEmpty')]",
            "copy": {
                "count": "[variables('privateEndpointsCount')]",
                "mode": "Parallel",
                "name": "privateDnsZoneGroupsCopy"
            },
            "dependsOn": [
                "privateEndpointsCopy"
            ],
            "location": "[union(variables('defaultResourceProperties').privateEndpoint, variables('privateEndpoints')[copyIndex()]).location]",
            "name": "[format('{0}/default', variables('privateEndpoints')[copyIndex()].name)]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(variables('privateEndpoints')[copyIndex()].dnsZones)]",
                        "input": {
                            "name": "[replace(variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name, '.', '-')]",
                            "properties": {
                                "privateDnsZoneId": "[resourceId(union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).subscriptionId, union(variables('defaultResourceProperties').privateEndpoint.dnsZone, variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')]).resourceGroupName, 'Microsoft.Network/privateDnsZones', variables('privateEndpoints')[copyIndex()].dnsZones[copyIndex('privateDnsZoneConfigs')].name)]"
                            }
                        },
                        "name": "privateDnsZoneConfigs"
                    }
                ]
            },
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
        },
        {
            "apiVersion": "[variables('apiVersions').privateDnsZonesARecords]",
            "condition": "[and(variables('privateDnsZonesIsNotEmpty'), not(empty(union(variables('defaultResourceProperties').privateDnsZone, variables('dnsZones').private[copyIndex()]).endpoint.name)))]",
            "copy": {
                "count": "[variables('privateDnsZonesCount')]",
                "mode": "Parallel",
                "name": "privateEndpointsARecordsCopy"
            },
            "dependsOn": [
                "privateDnsZoneGroupsCopy"
            ],
            "name": "[format('{0}/@', coalesce(union(variables('defaultResourceProperties').privateDnsZone, variables('dnsZones').private[copyIndex()]).name, '<NULL>'))]",
            "properties": {
                "aRecords": [
                    {
                        "ipv4Address": "[if(empty(union(variables('defaultResourceProperties').privateDnsZone, variables('dnsZones').private[copyIndex()]).endpoint.name), null(), reference(resourceId(union(variables('defaultResourceProperties').privateDnsZone, variables('dnsZones').private[copyIndex()]).endpoint.subscriptionId, union(variables('defaultResourceProperties').privateDnsZone, variables('dnsZones').private[copyIndex()]).endpoint.resourceGroupName, 'Microsoft.Network/privateEndpoints/privateDnsZoneGroups', union(variables('defaultResourceProperties').privateDnsZone, variables('dnsZones').private[copyIndex()]).endpoint.name, 'default'), variables('apiVersions').privateEndpointsPrivateDnsZoneGroups).privateDnsZoneConfigs[0].properties.recordSets[0].ipAddresses[0])]"
                    }
                ],
                "ttl": 10
            },
            "type": "Microsoft.Network/privateDnsZones/A"
        },
        {
            "apiVersion": "[variables('apiVersions').privateDnsZonesCnameRecords]",
            "condition": "[and(variables('privateDnsZonesIsNotEmpty'), not(empty(union(variables('defaultResourceProperties').privateDnsZone, variables('dnsZones').private[copyIndex()]).endpoint.name)))]",
            "copy": {
                "count": "[variables('privateDnsZonesCount')]",
                "mode": "Parallel",
                "name": "privateDnsZoneCnameRecordsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "name": "[format('{0}/www', coalesce(union(variables('defaultResourceProperties').privateDnsZone, variables('dnsZones').private[copyIndex()]).name, '<NULL>'))]",
            "properties": {
                "cnameRecord": {
                    "cname": "[reference(variables('resourceIds').site, variables('apiVersions').sites).defaultHostName]"
                },
                "ttl": 10
            },
            "type": "Microsoft.Network/privateDnsZones/CNAME"
        },
        {
            "apiVersion": "[variables('apiVersions').publicDnsZonesARecords]",
            "condition": "[and(variables('publicDnsZonesIsNotEmpty'), union(variables('defaultResourceProperties').publicDnsZone, variables('dnsZones').public[copyIndex()]).isARecordEnabled)]",
            "copy": {
                "count": "[variables('publicDnsZonesCount')]",
                "mode": "Parallel",
                "name": "publicDnsZoneARecordsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "name": "[format('{0}/@', coalesce(union(variables('defaultResourceProperties').publicDnsZone, variables('dnsZones').public[copyIndex()]).name, '<NULL>'))]",
            "properties": {
                "ARecords": [
                    {
                        "ipv4Address": "[reference(variables('resourceIds').site, variables('apiVersions').sites).inboundIpAddress]"
                    }
                ],
                "targetResource": {},
                "TTL": 10
            },
            "type": "Microsoft.Network/dnszones/A"
        },
        {
            "apiVersion": "[variables('apiVersions').publicDnsZonesCnameRecords]",
            "condition": "[and(variables('publicDnsZonesIsNotEmpty'), union(variables('defaultResourceProperties').publicDnsZone, variables('dnsZones').public[copyIndex()]).isCnameRecordEnabled)]",
            "copy": {
                "count": "[variables('publicDnsZonesCount')]",
                "mode": "Parallel",
                "name": "publicDnsZoneCnameRecordsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "name": "[format('{0}/www', coalesce(union(variables('defaultResourceProperties').publicDnsZone, variables('dnsZones').public[copyIndex()]).name, '<NULL>'))]",
            "properties": {
                "CNAMERecord": {
                    "cname": "[reference(variables('resourceIds').site, variables('apiVersions').sites).defaultHostName]"
                },
                "targetResource": {},
                "TTL": 10
            },
            "type": "Microsoft.Network/dnszones/CNAME"
        },
        {
            "apiVersion": "[variables('apiVersions').publicDnsZonesTxtRecords]",
            "condition": "[variables('publicDnsZonesIsNotEmpty')]",
            "copy": {
                "count": "[variables('publicDnsZonesCount')]",
                "mode": "Parallel",
                "name": "publicDnsZoneTxtRecordsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "name": "[format('{0}/asuid', coalesce(union(variables('defaultResourceProperties').publicDnsZone, variables('dnsZones').public[copyIndex()]).name, '<NULL>'))]",
            "properties": {
                "targetResource": {},
                "TTL": 10,
                "TXTRecords": [
                    {
                        "value": [
                            "[reference(variables('resourceIds').site, variables('apiVersions').sites).customDomainVerificationId]"
                        ]
                    }
                ]
            },
            "type": "Microsoft.Network/dnszones/TXT"
        },
        {
            "apiVersion": "[variables('apiVersions').publicDnsZonesTxtRecords]",
            "condition": "[variables('publicDnsZonesIsNotEmpty')]",
            "copy": {
                "count": "[variables('publicDnsZonesCount')]",
                "mode": "Parallel",
                "name": "publicDnsZoneWwwTxtRecordsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "name": "[format('{0}/asuid.www', coalesce(union(variables('defaultResourceProperties').publicDnsZone, variables('dnsZones').public[copyIndex()]).name, '<NULL>'))]",
            "properties": {
                "targetResource": {},
                "TTL": 10,
                "TXTRecords": [
                    {
                        "value": [
                            "[reference(variables('resourceIds').site, variables('apiVersions').sites).customDomainVerificationId]"
                        ]
                    }
                ]
            },
            "type": "Microsoft.Network/dnszones/TXT"
        },
        {
            "apiVersion": "[variables('apiVersions').sitesPublicCertificates]",
            "condition": "[greater(variables('publicCertificatesCount'), 0)]",
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "copy": {
                "count": "[variables('publicCertificatesCount')]",
                "mode": "Parallel",
                "name": "publicCertificatesCopy"
            },
            "location": "[parameters('location')]",
            "name":"[format('{0}/{1}', parameters('name'), parameters('publicCertificates')[copyIndex()].name)]",
            "properties": {
                "blob": "[parameters('publicCertificates')[copyIndex()].blob]",
                "publicCertificateLocation": "[union(variables('defaultResourceProperties').publicCertificate, parameters('publicCertificates')[copyIndex()]).location]"
            },
            "type": "Microsoft.Web/sites/publicCertificates"
        },
        {
            "apiVersion": "[variables('apiVersions').privateCertificates]",
            "condition": "[greater(variables('privateCertificatesCount'), 0)]",
            "copy": {
                "count": "[variables('privateCertificatesCount')]",
                "mode": "Parallel",
                "name": "privateCertificatesCopy"
            },
            "location": "[parameters('location')]",
            "name": "[format('{0}-{1}', parameters('servicePlan').name, parameters('privateCertificates')[copyIndex()].keyVault.secretName)]",
            "properties": {
                "keyVaultId": "[resourceId(union(variables('defaultResourceProperties').privateCertificate, parameters('privateCertificates')[copyIndex()]).keyVault.subscriptionId, union(variables('defaultResourceProperties').privateCertificate, parameters('privateCertificates')[copyIndex()]).keyVault.resourceGroupName, 'Microsoft.KeyVault/vaults', parameters('privateCertificates')[copyIndex()].keyVault.name)]",
                "keyVaultSecretName": "[parameters('privateCertificates')[copyIndex()].keyVault.secretName]",
                "serverFarmId": "[variables('resourceIds').serverFarm]"
            },
            "type": "Microsoft.Web/certificates"
        },
        {
            "apiVersion": "[variables('apiVersions').sitesHostNameBindings]",
            "condition": "[greater(variables('customDomainsCount'), 0)]",
            "copy": {
                "count": "[variables('customDomainsCount')]",
                "mode": "Serial", // Note: This copy block is run in serial mode because running in parallel results in "another operation is in progress" errors.
                "name": "hostNameBindingsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').site]",
                "privateCertificatesCopy",
                "privateDnsZoneGroupsCopy",
                "privateEndpointsCopy",
                "publicCertificatesCopy",
                "publicDnsZoneTxtRecordsCopy",
                "publicDnsZoneWwwTxtRecordsCopy"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/{1}', parameters('name'), parameters('customDomains')[copyIndex()].name)]",
            "properties": {
                "sslState": "[union(variables('defaultResourceProperties').customDomain, parameters('customDomains')[copyIndex()]).ssl.state]",
                "thumbprint": "[if(equals(toLower(union(variables('defaultResourceProperties').customDomain, parameters('customDomains')[copyIndex()]).ssl.state), 'disabled'), null(), if(empty(union(variables('defaultResourceProperties').customDomain, parameters('customDomains')[copyIndex()]).ssl.certificate.thumbprint), reference(resourceId(union(variables('defaultResourceProperties').customDomain, parameters('customDomains')[copyIndex()]).ssl.certificate.subscriptionId, union(variables('defaultResourceProperties').customDomain, parameters('customDomains')[copyIndex()]).ssl.certificate.resourceGroupName, 'Microsoft.Web/certificates', coalesce(union(variables('defaultResourceProperties').customDomain, parameters('customDomains')[copyIndex()]).ssl.certificate.name, parameters('customDomains')[copyIndex()].name))).thumbprint, parameters('customDomains')[copyIndex()].ssl.certificate.thumbprint))]"
            },
            "type": "Microsoft.Web/sites/hostNameBindings"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "condition": "[or(variables('isAuditEnabled'), variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'))]",
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/Microsoft.Insights/audit', parameters('name'))]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(variables('audit').logNames)]",
                        "input": {
                            "category": "[variables('audit').logNames[copyIndex('logs')]]",
                            "enabled": "[variables('isAuditEnabled')]",
                            "retentionPolicy": {
                                "days": "[variables('audit').retentionPolicy.days]",
                                "enabled": "[variables('audit').retentionPolicy.isEnabled]"
                            }
                        },
                        "name": "logs"
                    }
                ],
                "workspaceId": "[variables('resourceIds').auditLogAnalyticsWorkspace]"
            },
            "type": "Microsoft.Web/sites/providers/diagnosticsettings"
        }
    ]
}
