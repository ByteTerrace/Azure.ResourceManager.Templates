{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "audit": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the audit settings that will be applied to the Azure Web Site."
            },
            "type": "object"
        },
        "autoHeal": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the auto-heal settings that will be applied to the Azure Web Site."
            },
            "type": "object"
        },
        "applicationSettings": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the array of application setting name-value pairs that will be set on the Azure Web Site."
            },
            "type": "secureObject"
        },
        "connectionStrings": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the array of connection strings that will be set on the Azure Web Site."
            },
            "type": "secureObject"
        },
        "cors": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the CORS settings that will be applied to the Azure Web Site."
            },
            "type": "object"
        },
        "customDomains": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of custom domains that will be assigned to the Azure Web Site."
            },
            "type": "array"
        },
        "dnsZones": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the properties of the DNS zones that the Azure Web Site will be integrated with."
            },
            "type": "object"
        },
        "frameworkVersion": {
            "defaultValue": "DOTNETCORE|3.1",
            "metadata": {
                "description": "Specifies the application framework version that will be deployed within the Azure Web Site."
            },
            "type": "string"
        },
        "healthCheck": {
            "defaultValue": {},
            "metadata": {
                "description": "An object that encapsulates the health check settings that will be applied to the Azure Web Site."
            },
            "type": "object"
        },
        "ipSecurityRestrictions": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of IP security restrictions that will be applied to the Azure Web Site."
            },
            "type": "array"
        },
        "isAlwaysOnEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether the always on feature is enabled on the Azure Web Site."
            },
            "type": "bool"
        },
        "isClientAffinityEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the client affinity feature is enabled on the Azure Web Site."
            },
            "type": "bool"
        },
        "isHttp20SupportEnabled": {
            "defaultValue": true,
            "metadata": {
                "description": "Indicates whether support for the HTTP 2.0 network protocol is enabled on the Azure Web Site."
            },
            "type": "bool"
        },
        "isWebSocketSupportEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether support for the HTTP 2.0 network protocol is enabled on the Azure Web Site."
            },
            "type": "bool"
        },
        "is32BitModeEnabled": {
            "defaultValue": false,
            "metadata": {
                "description": "Indicates whether the Azure Web Site will run in 32-bit mode."
            },
            "type": "bool"
        },
        "location": {
            "metadata": {
                "description": "Specifies the location in which the Azure Web Site resource(s) should be deployed."
            },
            "type": "string"
        },
        "metadata": {
            "defaultValue": [],
            "metadata": {
                "description": "An object that encapsulates the array of metadata name-value pairs that will be set on the Azure Web Site."
            },
            "type": "array"
        },
        "minimumSupportedTlsVersion": {
            "allowedValues": [
                "1.2"
            ],
            "defaultValue": "1.2",
            "metadata": {
                "description": "Specifies the minimum version of the TLS protocol that will be supported within the Azure Web Site."
            },
            "type": "string"
        },
        "name": {
            "maxLength": 60,
            "metadata": {
                "description": "Specifies the name of the Azure Web Site."
            },
            "minLength": 2,
            "type": "string"
        },
        "scmIpSecurityRestrictions": {
            "defaultValue": [],
            "metadata": {
                "description": "An array of SCM IP security restrictions that will be applied to the Azure Web Site."
            },
            "type": "array"
        },
        "servicePlan": {
            "metadata": {
                "description": "An object that encapsulates the properties of the service plan that the Azure Web Site will be deployed within."
            },
            "type": "object"
        },
        "tags": {
            "defaultValue": {},
            "metadata": {
                "description": "Specifies the set of tag key-value pairs that will be assigned to the Azure Web Site."
            },
            "type": "object"
        }
    },
    "variables": {
        "apiVersions": {
            "diagnosticSettings": "2017-05-01-preview",
            "privateDnsZonesARecords": "2020-06-01",
            "privateDnsZonesTXTRecords": "2020-06-01",
            "publicDnsZonesARecords": "2018-05-01",
            "publicDnsZonesTXTRecords": "2018-05-01",
            "serverFarms": "2020-09-01",
            "sites": "2020-12-01",
            "sitesConfig": "2020-12-01",
            "sitesHostNameBindings": "2020-12-01"
        },
        "applicationSettingsCollection": "[union(union(createObject('collection', createArray()), parameters('applicationSettings')).collection, if(variables('autoHeal').isProactiveModeEnabled, createArray(), createArray(createObject('name', 'WEBSITE_PROACTIVE_AUTOHEAL_ENABLED', 'value', 'False'))), if(variables('healthCheck').isEnabled, createArray(createObject('name', 'WEBSITE_HEALTHCHECK_MAXPINGFAILURES', 'value', variables('healthCheck').unhealthyInstanceLifetimeInMinutes)), createArray()))]",
        "audit": "[union(variables('defaultResourceProperties').audit, parameters('audit'))]",
        "autoHeal": "[union(variables('defaultResourceProperties').autoHeal, parameters('autoHeal'))]",
        "cors": "[union(variables('defaultResourceProperties').cors, parameters('cors'))]",
        "defaultResourceProperties": {
            "audit": {
                "isEnabled": true,
                "logAnalyticsWorkspace": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "logNames": [
                    "AppServiceAntivirusScanAuditLogs",
                    "AppServiceAuditLogs",
                    "AppServiceFileAuditLogs",
                    "AppServiceIPSecAuditLogs",
                    "AppServicePlatformLogs"
                ],
                "retentionPolicy": {
                    "days": 137,
                    "isEnabled": true
                }
            },
            "autoHeal": {
                "isProactiveModeEnabled": true,
                "rules": {}
            },
            "connectionStrings": {
                "collection": []
            },
            "cors": {
                "allowedOrigins": [],
                "isCredentialSupportEnabled": false
            },
            "healthCheck": {
                "isEnabled": true,
                "path": "/",
                "unhealthyInstanceLifetimeInMinutes": 7
            },
            "privateDnsZone": {
                "name": "",
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]",
                "recordTimeToLiveInSeconds": 1020
            },
            "publicDnsZone": {
                "name": "",
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]",
                "recordTimeToLiveInSeconds": 1020
            },
            "ipSecurityRestriction": {
                "description": "",
                "headers": {},
                "ipAddress": "[null()]",
                "subnet": {
                    "name": "",
                    "resourceGroupName": "[variables('resourceGroupName')]",
                    "subscriptionId": "[variables('subscriptionId')]"
                },
                "subnetMask": "[null()]",
                "tag": "[null()]"
            },
            "servicePlan": {
                "resourceGroupName": "[variables('resourceGroupName')]",
                "subscriptionId": "[variables('subscriptionId')]"
            }
        },
        "connectionStringsCollection": "[union(variables('defaultResourceProperties').connectionStrings, parameters('connectionStrings')).collection]",
        "currentStack": "[if(or(startsWith(toLower(parameters('frameworkVersion')), 'dotnetcore|'), and(startsWith(toLower(parameters('frameworkVersion')), 'dotnet|'), endsWith(parameters('frameworkVersion'), '5.0'))), 'dotnetcore', 'dotnet')]",
        "customDomainsCount": "[length(parameters('customDomains'))]",
        "dnsZones": "[union(createObject('private', createArray(), 'public', createArray()), parameters('dnsZones'))]",
        "healthCheck": "[union(variables('defaultResourceProperties').healthCheck, parameters('healthCheck'))]",
        "isAuditEnabled": "[variables('audit').isEnabled]",
        "isAuditLogAnalyticsWorkspaceNameNotEmpty": "[not(empty(variables('audit').logAnalyticsWorkspace.name))]",
        "linuxFxVersion": "[if(and(equals(variables('currentStack'), 'dotnetcore'), endsWith(parameters('frameworkVersion'), '5.0')), 'DOTNETCORE|5.0', parameters('frameworkVersion'))]",
        "metadata": "[union(createArray(createObject('name', 'CURRENT_STACK', 'value', variables('currentStack'))), parameters('metadata'))]",
        "privateDnsZonesCount": "[length(variables('dnsZones').private)]",
        "privateDnsZonesIsNotEmpty": "[greater(variables('privateDnsZonesCount'), 0)]",
        "publicDnsZonesCount": "[length(variables('dnsZones').public)]",
        "publicDnsZonesIsNotEmpty": "[greater(variables('publicDnsZonesCount'), 0)]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceIds": {
            "auditLogAnalyticsWorkspace": "[resourceId(variables('audit').logAnalyticsWorkspace.subscriptionId, variables('audit').logAnalyticsWorkspace.resourceGroupName, 'Microsoft.OperationalInsights/workspaces', if(variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'), variables('audit').logAnalyticsWorkspace.name, '<NULL>'))]",
            "serverFarm": "[resourceId(variables('servicePlan').subscriptionId, variables('servicePlan').resourceGroupName, 'Microsoft.Web/serverfarms', variables('servicePlan').name)]",
            "site": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
        },
        "scmIpSecurityRestrictionsCount": "[length(parameters('scmIpSecurityRestrictions'))]",
        "servicePlan": "[union(variables('defaultResourceProperties').servicePlan, parameters('servicePlan'))]",
        "subscriptionId": "[subscription().subscriptionId]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersions').sites]",
            "identity": {
                "type": "SystemAssigned"
            },
            "location": "[parameters('location')]",
            "name": "[parameters('name')]",
            "properties": {
                "clientAffinityEnabled": "[parameters('isClientAffinityEnabled')]",
                "clientCertEnabled": false,
                "clientCertMode": "Required",
                "name": "[parameters('name')]",
                "httpsOnly": true,
                "serverFarmId": "[variables('resourceIds').serverFarm]",
                "siteConfig": {
                    "acrUseManagedIdentityCreds": false,
                    "alwaysOn": "[parameters('isAlwaysOnEnabled')]",
                    "autoHealEnabled": "[not(empty(variables('autoHeal').rules))]",
                    "autoHealRules": "[variables('autoHeal').rules]",
                    "copy": [
                        {
                            "count": "[length(variables('applicationSettingsCollection'))]",
                            "input": {
                                "name": "[variables('applicationSettingsCollection')[copyIndex('appSettings')].name]",
                                "value": "[variables('applicationSettingsCollection')[copyIndex('appSettings')].value]"
                            },
                            "name": "appSettings"
                        },
                        {
                            "count": "[length(variables('connectionStringsCollection'))]",
                            "input": {
                                "connectionString": "[variables('connectionStringsCollection')[copyIndex('connectionStrings')].value]",
                                "name": "[variables('connectionStringsCollection')[copyIndex('connectionStrings')].name]",
                                "type": "[variables('connectionStringsCollection')[copyIndex('connectionStrings')].type]"
                            },
                            "name": "connectionStrings"
                        },
                        {
                            "count": "[length(parameters('ipSecurityRestrictions'))]",
                            "input": {
                                "action": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).action]",
                                "description": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).description]",
                                "headers": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).headers]",
                                "ipAddress": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).ipAddress]",
                                "priority": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).priority]",
                                "name": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).name]",
                                "subnetMask": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).subnetMask]",
                                "tag": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).tag]",
                                "vnetSubnetResourceId": "[if(empty(union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).subnet.name), null(), resourceId(union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).subnet.subscriptionId, union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).subnet.virtualNetworkName, union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('ipSecurityRestrictions')[copyIndex('ipSecurityRestrictions')]).subnet.name))]"
                            },
                            "name": "ipSecurityRestrictions"
                        },
                        {
                            "count": "[variables('scmIpSecurityRestrictionsCount')]",
                            "input": {
                                "action": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).action]",
                                "description": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).description]",
                                "headers": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).headers]",
                                "ipAddress": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).ipAddress]",
                                "priority": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).priority]",
                                "name": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).name]",
                                "subnetMask": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).subnetMask]",
                                "tag": "[union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).tag]",
                                "vnetSubnetResourceId": "[if(empty(union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).subnet.name), null(), resourceId(union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).subnet.subscriptionId, union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).subnet.resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).subnet.virtualNetworkName, union(variables('defaultResourceProperties').ipSecurityRestriction, parameters('scmIpSecurityRestrictions')[copyIndex('scmIpSecurityRestrictions')]).subnet.name))]"
                            },
                            "name": "scmIpSecurityRestrictions"
                        }
                    ],
                    "cors": {
                        "allowedOrigins": "[variables('cors').allowedOrigins]",
                        "supportCredentials": "[variables('cors').isCredentialSupportEnabled]"
                    },
                    "ftpsState": "FtpsOnly",
                    "healthCheckPath": "[if(variables('healthCheck').isEnabled, variables('healthCheck').path, '')]",
                    "http20Enabled": "[parameters('isHttp20SupportEnabled')]",
                    "keyVaultReferenceIdentity": "SystemAssigned",
                    "linuxFxVersion": "[if(equals(toLower(reference(variables('resourceIds').serverFarm, variables('apiVersions').serverFarms).kind), 'linux'), variables('linuxFxVersion'), null())]",
                    "loadBalancing": "LeastRequests",
                    "logsDirectorySizeLimit": 27,
                    "managedPipelineMode": "Integrated",
                    "metadata": "[variables('metadata')]",
                    "netFrameworkVersion": "[if(and(not(equals(toLower(reference(variables('resourceIds').serverFarm, variables('apiVersions').serverFarms).kind), 'linux')), equals(variables('currentStack'), 'dotnetcore'), endsWith(parameters('frameworkVersion'), '5.0')), 'v5.0', 'v4.0')]",
                    "minTlsVersion": "[parameters('minimumSupportedTlsVersion')]",
                    "numberOfWorkers": 1,
                    "scmMinTlsVersion": "[parameters('minimumSupportedTlsVersion')]",
                    "phpVersion": "OFF",
                    "remoteDebuggingEnabled": false,
                    "redundancyMode": "None",
                    "scmIpSecurityRestrictionsUseMain": "[equals(variables('scmIpSecurityRestrictionsCount'), 0)]",
                    "use32BitWorkerProcess": "[parameters('is32BitModeEnabled')]",
                    "webSocketsEnabled": "[parameters('isWebSocketSupportEnabled')]",
                    "websiteTimeZone": "UTC",
                    "windowsFxVersion": "[null()]"
                }
            },
            "tags": "[parameters('tags')]",
            "type": "Microsoft.Web/sites"
        },
        {
            "apiVersion": "[variables('apiVersions').sitesConfig]",
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/logs', parameters('name'))]",
            "properties": {
                "applicationLogs": {
                    "azureTableStorage": {
                        "level": "Off",
                        "sasUrl": "[null()]"
                    },
                    "azureBlobStorage": {
                        "level": "Off",
                        "retentionInDays": 3,
                        "sasUrl": "[null()]"
                    },
                    "fileSystem": {
                        "level": "Error"
                    }
                },
                "detailedErrorMessages": {
                    "enabled": true
                },
                "failedRequestsTracing": {
                    "enabled": true
                },
                "httpLogs": {
                    "azureBlobStorage": {
                        "enabled": false,
                        "retentionInDays": 3,
                        "sasUrl": "[null()]"
                    },
                    "fileSystem": {
                        "enabled": true,
                        "retentionInDays": 3,
                        "retentionInMb": 31
                    }
                }
            },
            "type": "Microsoft.Web/sites/config"
        },
        {
            "apiVersion": "[variables('apiVersions').privateDnsZonesARecords]",
            "condition": "[variables('privateDnsZonesIsNotEmpty')]",
            "copy": {
                "count": "[variables('privateDnsZonesCount')]",
                "name": "privateDnsZoneARecords"
            },
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "name": "[format('{0}/@', coalesce(union(variables('defaultResourceProperties').privateDnsZone, variables('dnsZones').private[copyIndex()]).name, 'dummyDnsZone'))]",
            "properties": {
                "aRecords": [
                    {
                        "ipv4Address": "[reference(variables('resourceIds').site, variables('apiVersions').sites, 'Full').properties.inboundIpAddress]"
                    }
                ],
                "ttl": "[union(variables('defaultResourceProperties').privateDnsZone, variables('dnsZones').private[copyIndex()]).recordTimeToLiveInSeconds]"
            },
            "type": "Microsoft.Network/privateDnsZones/A"
        },
        {
            "apiVersion": "[variables('apiVersions').privateDnsZonesTXTRecords]",
            "condition": "[variables('privateDnsZonesIsNotEmpty')]",
            "copy": {
                "count": "[variables('privateDnsZonesCount')]",
                "name": "privateDnsZoneTXTRecords"
            },
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "name": "[format('{0}/asuid', coalesce(union(variables('defaultResourceProperties').privateDnsZone, variables('dnsZones').private[copyIndex()]).name, 'dummyDnsZone'))]",
            "properties": {
                "ttl": "[union(variables('defaultResourceProperties').privateDnsZone, variables('dnsZones').private[copyIndex()]).recordTimeToLiveInSeconds]",
                "txtRecords": [
                    {
                        "value": [
                            "[reference(variables('resourceIds').site, variables('apiVersions').sites).customDomainVerificationId]"
                        ]
                    }
                ]
            },
            "type": "Microsoft.Network/privateDnsZones/TXT"
        },
        {
            "apiVersion": "[variables('apiVersions').publicDnsZonesARecords]",
            "condition": "[variables('publicDnsZonesIsNotEmpty')]",
            "copy": {
                "count": "[variables('publicDnsZonesCount')]",
                "name": "publicDnsZoneARecords"
            },
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "name": "[format('{0}/@', coalesce(union(variables('defaultResourceProperties').publicDnsZone, variables('dnsZones').public[copyIndex()]).name, 'dummyDnsZone'))]",
            "properties": {
                "ARecords": [
                    {
                        "ipv4Address": "[reference(variables('resourceIds').site, variables('apiVersions').sites, 'Full').properties.inboundIpAddress]"
                    }
                ],
                "targetResource": {},
                "TTL": "[union(variables('defaultResourceProperties').publicDnsZone, variables('dnsZones').public[copyIndex()]).recordTimeToLiveInSeconds]"
            },
            "type": "Microsoft.Network/dnszones/A"
        },
        {
            "apiVersion": "[variables('apiVersions').publicDnsZonesTXTRecords]",
            "condition": "[variables('publicDnsZonesIsNotEmpty')]",
            "copy": {
                "count": "[variables('publicDnsZonesCount')]",
                "name": "publicDnsZoneTXTRecords"
            },
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "name": "[format('{0}/asuid', coalesce(union(variables('defaultResourceProperties').publicDnsZone, variables('dnsZones').public[copyIndex()]).name, 'dummyDnsZone'))]",
            "properties": {
                "targetResource": {},
                "TTL": "[union(variables('defaultResourceProperties').publicDnsZone, variables('dnsZones').public[copyIndex()]).recordTimeToLiveInSeconds]",
                "TXTRecords": [
                    {
                        "value": [
                            "[reference(variables('resourceIds').site, variables('apiVersions').sites).customDomainVerificationId]"
                        ]
                    }
                ]
            },
            "type": "Microsoft.Network/dnszones/TXT"
        },
        {
            "apiVersion": "[variables('apiVersions').sitesHostNameBindings]",
            "condition": "[greater(variables('customDomainsCount'), 0)]",
            "copy": {
                "count": "[variables('customDomainsCount')]",
                "mode": "Serial", // Note: This copy block is run in serial mode because running in parallel results in "another operation is in progress" errors.
                "name": "hostNameBindingsCopy"
            },
            "dependsOn": [
                "[variables('resourceIds').site]",
                "privateDnsZoneTXTRecords",
                "publicDnsZoneTXTRecords"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/{1}', parameters('name'), parameters('customDomains')[copyIndex()].name)]",
            "properties": {
                "hostNameType": "Verified",
                "siteName": "[parameters('name')]"
            },
            "type": "Microsoft.Web/sites/hostNameBindings"
        },
        {
            "apiVersion": "[variables('apiVersions').diagnosticSettings]",
            "condition": "[or(variables('isAuditEnabled'), variables('isAuditLogAnalyticsWorkspaceNameNotEmpty'))]",
            "dependsOn": [
                "[variables('resourceIds').site]"
            ],
            "location": "[parameters('location')]",
            "name": "[format('{0}/Microsoft.Insights/audit', parameters('name'))]",
            "properties": {
                "copy": [
                    {
                        "count": "[length(variables('audit').logNames)]",
                        "input": {
                            "category": "[variables('audit').logNames[copyIndex('logs')]]",
                            "enabled": "[variables('isAuditEnabled')]",
                            "retentionPolicy": {
                                "days": "[variables('audit').retentionPolicy.days]",
                                "enabled": "[variables('audit').retentionPolicy.isEnabled]"
                            }
                        },
                        "name": "logs"
                    }
                ],
                "workspaceId": "[variables('resourceIds').auditLogAnalyticsWorkspace]"
            },
            "type": "Microsoft.Web/sites/providers/diagnosticsettings"
        }
    ]
}
